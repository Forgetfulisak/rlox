<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="998" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="981.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="981.00"> </text><svg id="frames" x="10" width="1180" total_samples="2243"><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (2 samples, 0.09%)</title><rect x="0.0000%" y="917" width="0.0892%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="927.50"></text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (31 samples, 1.38%)</title><rect x="0.0892%" y="901" width="1.3821%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="31"/><text x="0.3392%" y="911.50"></text></g><g><title>&lt;rlox::parser::Literal as core::clone::Clone&gt;::clone (11 samples, 0.49%)</title><rect x="0.9808%" y="885" width="0.4904%" height="15" fill="rgb(221,193,54)" fg:x="22" fg:w="11"/><text x="1.2308%" y="895.50"></text></g><g><title>&lt;rlox::parser::Stmt as core::clone::Clone&gt;::clone (10 samples, 0.45%)</title><rect x="1.4712%" y="901" width="0.4458%" height="15" fill="rgb(248,212,6)" fg:x="33" fg:w="10"/><text x="1.7212%" y="911.50"></text></g><g><title>__GI___libc_free (22 samples, 0.98%)</title><rect x="1.9171%" y="901" width="0.9808%" height="15" fill="rgb(208,68,35)" fg:x="43" fg:w="22"/><text x="2.1671%" y="911.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.80%)</title><rect x="2.8979%" y="901" width="0.8025%" height="15" fill="rgb(232,128,0)" fg:x="65" fg:w="18"/><text x="3.1479%" y="911.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.04%)</title><rect x="3.7004%" y="901" width="0.0446%" height="15" fill="rgb(207,160,47)" fg:x="83" fg:w="1"/><text x="3.9504%" y="911.50"></text></g><g><title>_int_free (41 samples, 1.83%)</title><rect x="3.7450%" y="901" width="1.8279%" height="15" fill="rgb(228,23,34)" fg:x="84" fg:w="41"/><text x="3.9950%" y="911.50">_..</text></g><g><title>_int_malloc (3 samples, 0.13%)</title><rect x="5.5729%" y="901" width="0.1337%" height="15" fill="rgb(218,30,26)" fg:x="125" fg:w="3"/><text x="5.8229%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.13%)</title><rect x="5.7066%" y="901" width="0.1337%" height="15" fill="rgb(220,122,19)" fg:x="128" fg:w="3"/><text x="5.9566%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.13%)</title><rect x="5.7066%" y="885" width="0.1337%" height="15" fill="rgb(250,228,42)" fg:x="128" fg:w="3"/><text x="5.9566%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (3 samples, 0.13%)</title><rect x="5.7066%" y="869" width="0.1337%" height="15" fill="rgb(240,193,28)" fg:x="128" fg:w="3"/><text x="5.9566%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3 samples, 0.13%)</title><rect x="5.7066%" y="853" width="0.1337%" height="15" fill="rgb(216,20,37)" fg:x="128" fg:w="3"/><text x="5.9566%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (3 samples, 0.13%)</title><rect x="5.7066%" y="837" width="0.1337%" height="15" fill="rgb(206,188,39)" fg:x="128" fg:w="3"/><text x="5.9566%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3 samples, 0.13%)</title><rect x="5.7066%" y="821" width="0.1337%" height="15" fill="rgb(217,207,13)" fg:x="128" fg:w="3"/><text x="5.9566%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3 samples, 0.13%)</title><rect x="5.7066%" y="805" width="0.1337%" height="15" fill="rgb(231,73,38)" fg:x="128" fg:w="3"/><text x="5.9566%" y="815.50"></text></g><g><title>core::hash::Hasher::write_u8 (2 samples, 0.09%)</title><rect x="5.7512%" y="789" width="0.0892%" height="15" fill="rgb(225,20,46)" fg:x="129" fg:w="2"/><text x="6.0012%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (16 samples, 0.71%)</title><rect x="5.8404%" y="901" width="0.7133%" height="15" fill="rgb(210,31,41)" fg:x="131" fg:w="16"/><text x="6.0904%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;rlox::parser::Expression&gt;&gt; (1 samples, 0.04%)</title><rect x="6.5091%" y="885" width="0.0446%" height="15" fill="rgb(221,200,47)" fg:x="146" fg:w="1"/><text x="6.7591%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;rlox::parser::Stmt&gt;&gt; (1 samples, 0.04%)</title><rect x="6.8658%" y="885" width="0.0446%" height="15" fill="rgb(226,26,5)" fg:x="154" fg:w="1"/><text x="7.1158%" y="895.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.04%)</title><rect x="6.8658%" y="869" width="0.0446%" height="15" fill="rgb(249,33,26)" fg:x="154" fg:w="1"/><text x="7.1158%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="6.8658%" y="853" width="0.0446%" height="15" fill="rgb(235,183,28)" fg:x="154" fg:w="1"/><text x="7.1158%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="6.8658%" y="837" width="0.0446%" height="15" fill="rgb(221,5,38)" fg:x="154" fg:w="1"/><text x="7.1158%" y="847.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="6.8658%" y="821" width="0.0446%" height="15" fill="rgb(247,18,42)" fg:x="154" fg:w="1"/><text x="7.1158%" y="831.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="6.8658%" y="805" width="0.0446%" height="15" fill="rgb(241,131,45)" fg:x="154" fg:w="1"/><text x="7.1158%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Stmt&gt; (9 samples, 0.40%)</title><rect x="6.5537%" y="901" width="0.4012%" height="15" fill="rgb(249,31,29)" fg:x="147" fg:w="9"/><text x="6.8037%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rlox::parser::Stmt&gt;&gt; (1 samples, 0.04%)</title><rect x="6.9104%" y="885" width="0.0446%" height="15" fill="rgb(225,111,53)" fg:x="155" fg:w="1"/><text x="7.1604%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="6.9104%" y="869" width="0.0446%" height="15" fill="rgb(238,160,17)" fg:x="155" fg:w="1"/><text x="7.1604%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;[rlox::parser::Stmt]&gt; (1 samples, 0.04%)</title><rect x="6.9104%" y="853" width="0.0446%" height="15" fill="rgb(214,148,48)" fg:x="155" fg:w="1"/><text x="7.1604%" y="863.50"></text></g><g><title>rlox::interpreter::Interpreter::evaluate (5 samples, 0.22%)</title><rect x="6.9550%" y="901" width="0.2229%" height="15" fill="rgb(232,36,49)" fg:x="156" fg:w="5"/><text x="7.2050%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::parser::Stmt,alloc::alloc::Global&gt;&gt; (2 samples, 0.09%)</title><rect x="7.1779%" y="853" width="0.0892%" height="15" fill="rgb(209,103,24)" fg:x="161" fg:w="2"/><text x="7.4279%" y="863.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="7.1779%" y="837" width="0.0892%" height="15" fill="rgb(229,88,8)" fg:x="161" fg:w="2"/><text x="7.4279%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rlox::parser::Stmt&gt;&gt; (2 samples, 0.09%)</title><rect x="7.1779%" y="821" width="0.0892%" height="15" fill="rgb(213,181,19)" fg:x="161" fg:w="2"/><text x="7.4279%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="7.1779%" y="805" width="0.0892%" height="15" fill="rgb(254,191,54)" fg:x="161" fg:w="2"/><text x="7.4279%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.09%)</title><rect x="7.1779%" y="789" width="0.0892%" height="15" fill="rgb(241,83,37)" fg:x="161" fg:w="2"/><text x="7.4279%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.09%)</title><rect x="7.1779%" y="773" width="0.0892%" height="15" fill="rgb(233,36,39)" fg:x="161" fg:w="2"/><text x="7.4279%" y="783.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.09%)</title><rect x="7.1779%" y="757" width="0.0892%" height="15" fill="rgb(226,3,54)" fg:x="161" fg:w="2"/><text x="7.4279%" y="767.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.09%)</title><rect x="7.1779%" y="741" width="0.0892%" height="15" fill="rgb(245,192,40)" fg:x="161" fg:w="2"/><text x="7.4279%" y="751.50"></text></g><g><title>[[heap]] (162 samples, 7.22%)</title><rect x="0.0892%" y="917" width="7.2225%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="162"/><text x="0.3392%" y="927.50">[[heap]]</text></g><g><title>rlox::interpreter::Interpreter::execute_block (3 samples, 0.13%)</title><rect x="7.1779%" y="901" width="0.1337%" height="15" fill="rgb(232,182,51)" fg:x="161" fg:w="3"/><text x="7.4279%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;rlox::parser::Stmt&gt;&gt; (3 samples, 0.13%)</title><rect x="7.1779%" y="885" width="0.1337%" height="15" fill="rgb(231,60,39)" fg:x="161" fg:w="3"/><text x="7.4279%" y="895.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.13%)</title><rect x="7.1779%" y="869" width="0.1337%" height="15" fill="rgb(208,69,12)" fg:x="161" fg:w="3"/><text x="7.4279%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;[rlox::parser::Stmt]&gt; (1 samples, 0.04%)</title><rect x="7.2671%" y="853" width="0.0446%" height="15" fill="rgb(235,93,37)" fg:x="163" fg:w="1"/><text x="7.5171%" y="863.50"></text></g><g><title>&lt;rlox::interpreter::LoxValue as core::clone::Clone&gt;::clone (6 samples, 0.27%)</title><rect x="7.3116%" y="901" width="0.2675%" height="15" fill="rgb(213,116,39)" fg:x="164" fg:w="6"/><text x="7.5616%" y="911.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (6 samples, 0.27%)</title><rect x="8.1587%" y="869" width="0.2675%" height="15" fill="rgb(222,207,29)" fg:x="183" fg:w="6"/><text x="8.4087%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.67%)</title><rect x="8.1587%" y="885" width="0.6687%" height="15" fill="rgb(206,96,30)" fg:x="183" fg:w="15"/><text x="8.4087%" y="895.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (9 samples, 0.40%)</title><rect x="8.4262%" y="869" width="0.4012%" height="15" fill="rgb(218,138,4)" fg:x="189" fg:w="9"/><text x="8.6762%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (9 samples, 0.40%)</title><rect x="8.4262%" y="853" width="0.4012%" height="15" fill="rgb(250,191,14)" fg:x="189" fg:w="9"/><text x="8.6762%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.40%)</title><rect x="8.4262%" y="837" width="0.4012%" height="15" fill="rgb(239,60,40)" fg:x="189" fg:w="9"/><text x="8.6762%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.40%)</title><rect x="8.4262%" y="821" width="0.4012%" height="15" fill="rgb(206,27,48)" fg:x="189" fg:w="9"/><text x="8.6762%" y="831.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.40%)</title><rect x="8.4262%" y="805" width="0.4012%" height="15" fill="rgb(225,35,8)" fg:x="189" fg:w="9"/><text x="8.6762%" y="815.50"></text></g><g><title>__rdl_alloc (9 samples, 0.40%)</title><rect x="8.4262%" y="789" width="0.4012%" height="15" fill="rgb(250,213,24)" fg:x="189" fg:w="9"/><text x="8.6762%" y="799.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.40%)</title><rect x="8.4262%" y="773" width="0.4012%" height="15" fill="rgb(247,123,22)" fg:x="189" fg:w="9"/><text x="8.6762%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="8.8275%" y="885" width="0.0446%" height="15" fill="rgb(231,138,38)" fg:x="198" fg:w="1"/><text x="9.0775%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="8.8275%" y="869" width="0.0446%" height="15" fill="rgb(231,145,46)" fg:x="198" fg:w="1"/><text x="9.0775%" y="879.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="8.8275%" y="853" width="0.0446%" height="15" fill="rgb(251,118,11)" fg:x="198" fg:w="1"/><text x="9.0775%" y="863.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="8.8275%" y="837" width="0.0446%" height="15" fill="rgb(217,147,25)" fg:x="198" fg:w="1"/><text x="9.0775%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="8.8275%" y="821" width="0.0446%" height="15" fill="rgb(247,81,37)" fg:x="198" fg:w="1"/><text x="9.0775%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="8.8275%" y="805" width="0.0446%" height="15" fill="rgb(209,12,38)" fg:x="198" fg:w="1"/><text x="9.0775%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="8.8275%" y="789" width="0.0446%" height="15" fill="rgb(227,1,9)" fg:x="198" fg:w="1"/><text x="9.0775%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="8.8275%" y="773" width="0.0446%" height="15" fill="rgb(248,47,43)" fg:x="198" fg:w="1"/><text x="9.0775%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="8.8275%" y="757" width="0.0446%" height="15" fill="rgb(221,10,30)" fg:x="198" fg:w="1"/><text x="9.0775%" y="767.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="8.8275%" y="741" width="0.0446%" height="15" fill="rgb(210,229,1)" fg:x="198" fg:w="1"/><text x="9.0775%" y="751.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="8.8275%" y="725" width="0.0446%" height="15" fill="rgb(222,148,37)" fg:x="198" fg:w="1"/><text x="9.0775%" y="735.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="8.8275%" y="709" width="0.0446%" height="15" fill="rgb(234,67,33)" fg:x="198" fg:w="1"/><text x="9.0775%" y="719.50"></text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (38 samples, 1.69%)</title><rect x="7.5791%" y="901" width="1.6942%" height="15" fill="rgb(247,98,35)" fg:x="170" fg:w="38"/><text x="7.8291%" y="911.50"></text></g><g><title>&lt;rlox::parser::Literal as core::clone::Clone&gt;::clone (9 samples, 0.40%)</title><rect x="8.8720%" y="885" width="0.4012%" height="15" fill="rgb(247,138,52)" fg:x="199" fg:w="9"/><text x="9.1220%" y="895.50"></text></g><g><title>__GI___libc_free (13 samples, 0.58%)</title><rect x="9.2733%" y="901" width="0.5796%" height="15" fill="rgb(213,79,30)" fg:x="208" fg:w="13"/><text x="9.5233%" y="911.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.04%)</title><rect x="9.8529%" y="901" width="0.0446%" height="15" fill="rgb(246,177,23)" fg:x="221" fg:w="1"/><text x="10.1029%" y="911.50"></text></g><g><title>_int_free (2 samples, 0.09%)</title><rect x="9.8975%" y="901" width="0.0892%" height="15" fill="rgb(230,62,27)" fg:x="222" fg:w="2"/><text x="10.1475%" y="911.50"></text></g><g><title>_int_malloc (1 samples, 0.04%)</title><rect x="9.9866%" y="901" width="0.0446%" height="15" fill="rgb(216,154,8)" fg:x="224" fg:w="1"/><text x="10.2366%" y="911.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.09%)</title><rect x="10.0312%" y="901" width="0.0892%" height="15" fill="rgb(244,35,45)" fg:x="225" fg:w="2"/><text x="10.2812%" y="911.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.04%)</title><rect x="10.0758%" y="885" width="0.0446%" height="15" fill="rgb(251,115,12)" fg:x="226" fg:w="1"/><text x="10.3258%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1 samples, 0.04%)</title><rect x="10.0758%" y="869" width="0.0446%" height="15" fill="rgb(240,54,50)" fg:x="226" fg:w="1"/><text x="10.3258%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.04%)</title><rect x="10.0758%" y="853" width="0.0446%" height="15" fill="rgb(233,84,52)" fg:x="226" fg:w="1"/><text x="10.3258%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.04%)</title><rect x="10.0758%" y="837" width="0.0446%" height="15" fill="rgb(207,117,47)" fg:x="226" fg:w="1"/><text x="10.3258%" y="847.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.04%)</title><rect x="10.0758%" y="821" width="0.0446%" height="15" fill="rgb(249,43,39)" fg:x="226" fg:w="1"/><text x="10.3258%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.04%)</title><rect x="10.0758%" y="805" width="0.0446%" height="15" fill="rgb(209,38,44)" fg:x="226" fg:w="1"/><text x="10.3258%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (3 samples, 0.13%)</title><rect x="10.1204%" y="901" width="0.1337%" height="15" fill="rgb(236,212,23)" fg:x="227" fg:w="3"/><text x="10.3704%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;rlox::parser::Expression&gt;&gt; (1 samples, 0.04%)</title><rect x="10.2095%" y="885" width="0.0446%" height="15" fill="rgb(242,79,21)" fg:x="229" fg:w="1"/><text x="10.4595%" y="895.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.04%)</title><rect x="10.2095%" y="869" width="0.0446%" height="15" fill="rgb(211,96,35)" fg:x="229" fg:w="1"/><text x="10.4595%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="10.2095%" y="853" width="0.0446%" height="15" fill="rgb(253,215,40)" fg:x="229" fg:w="1"/><text x="10.4595%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="10.2095%" y="837" width="0.0446%" height="15" fill="rgb(211,81,21)" fg:x="229" fg:w="1"/><text x="10.4595%" y="847.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="10.2095%" y="821" width="0.0446%" height="15" fill="rgb(208,190,38)" fg:x="229" fg:w="1"/><text x="10.4595%" y="831.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="10.2095%" y="805" width="0.0446%" height="15" fill="rgb(235,213,38)" fg:x="229" fg:w="1"/><text x="10.4595%" y="815.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="10.2987%" y="885" width="0.0446%" height="15" fill="rgb(237,122,38)" fg:x="231" fg:w="1"/><text x="10.5487%" y="895.50"></text></g><g><title>_int_free (3 samples, 0.13%)</title><rect x="10.3433%" y="885" width="0.1337%" height="15" fill="rgb(244,218,35)" fg:x="232" fg:w="3"/><text x="10.5933%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Stmt&gt; (6 samples, 0.27%)</title><rect x="10.2541%" y="901" width="0.2675%" height="15" fill="rgb(240,68,47)" fg:x="230" fg:w="6"/><text x="10.5041%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (1 samples, 0.04%)</title><rect x="10.4770%" y="885" width="0.0446%" height="15" fill="rgb(210,16,53)" fg:x="235" fg:w="1"/><text x="10.7270%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.04%)</title><rect x="10.5216%" y="901" width="0.0446%" height="15" fill="rgb(235,124,12)" fg:x="236" fg:w="1"/><text x="10.7716%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.09%)</title><rect x="10.7891%" y="885" width="0.0892%" height="15" fill="rgb(224,169,11)" fg:x="242" fg:w="2"/><text x="11.0391%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.09%)</title><rect x="10.7891%" y="869" width="0.0892%" height="15" fill="rgb(250,166,2)" fg:x="242" fg:w="2"/><text x="11.0391%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.09%)</title><rect x="10.7891%" y="853" width="0.0892%" height="15" fill="rgb(242,216,29)" fg:x="242" fg:w="2"/><text x="11.0391%" y="863.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="10.7891%" y="837" width="0.0892%" height="15" fill="rgb(230,116,27)" fg:x="242" fg:w="2"/><text x="11.0391%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.09%)</title><rect x="10.7891%" y="821" width="0.0892%" height="15" fill="rgb(228,99,48)" fg:x="242" fg:w="2"/><text x="11.0391%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.09%)</title><rect x="10.7891%" y="805" width="0.0892%" height="15" fill="rgb(253,11,6)" fg:x="242" fg:w="2"/><text x="11.0391%" y="815.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.09%)</title><rect x="10.7891%" y="789" width="0.0892%" height="15" fill="rgb(247,143,39)" fg:x="242" fg:w="2"/><text x="11.0391%" y="799.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.09%)</title><rect x="10.7891%" y="773" width="0.0892%" height="15" fill="rgb(236,97,10)" fg:x="242" fg:w="2"/><text x="11.0391%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.09%)</title><rect x="10.8783%" y="837" width="0.0892%" height="15" fill="rgb(233,208,19)" fg:x="244" fg:w="2"/><text x="11.1283%" y="847.50"></text></g><g><title>rlox::environ::Environ::get (10 samples, 0.45%)</title><rect x="10.5662%" y="901" width="0.4458%" height="15" fill="rgb(216,164,2)" fg:x="237" fg:w="10"/><text x="10.8162%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.13%)</title><rect x="10.8783%" y="885" width="0.1337%" height="15" fill="rgb(220,129,5)" fg:x="244" fg:w="3"/><text x="11.1283%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.13%)</title><rect x="10.8783%" y="869" width="0.1337%" height="15" fill="rgb(242,17,10)" fg:x="244" fg:w="3"/><text x="11.1283%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.13%)</title><rect x="10.8783%" y="853" width="0.1337%" height="15" fill="rgb(242,107,0)" fg:x="244" fg:w="3"/><text x="11.1283%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.04%)</title><rect x="10.9675%" y="837" width="0.0446%" height="15" fill="rgb(251,28,31)" fg:x="246" fg:w="1"/><text x="11.2175%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.04%)</title><rect x="10.9675%" y="821" width="0.0446%" height="15" fill="rgb(233,223,10)" fg:x="246" fg:w="1"/><text x="11.2175%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.04%)</title><rect x="10.9675%" y="805" width="0.0446%" height="15" fill="rgb(215,21,27)" fg:x="246" fg:w="1"/><text x="11.2175%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.04%)</title><rect x="10.9675%" y="789" width="0.0446%" height="15" fill="rgb(232,23,21)" fg:x="246" fg:w="1"/><text x="11.2175%" y="799.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.04%)</title><rect x="10.9675%" y="773" width="0.0446%" height="15" fill="rgb(244,5,23)" fg:x="246" fg:w="1"/><text x="11.2175%" y="783.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.04%)</title><rect x="10.9675%" y="757" width="0.0446%" height="15" fill="rgb(226,81,46)" fg:x="246" fg:w="1"/><text x="11.2175%" y="767.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.04%)</title><rect x="10.9675%" y="741" width="0.0446%" height="15" fill="rgb(247,70,30)" fg:x="246" fg:w="1"/><text x="11.2175%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (1 samples, 0.04%)</title><rect x="10.9675%" y="725" width="0.0446%" height="15" fill="rgb(212,68,19)" fg:x="246" fg:w="1"/><text x="11.2175%" y="735.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1 samples, 0.04%)</title><rect x="10.9675%" y="709" width="0.0446%" height="15" fill="rgb(240,187,13)" fg:x="246" fg:w="1"/><text x="11.2175%" y="719.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.04%)</title><rect x="10.9675%" y="693" width="0.0446%" height="15" fill="rgb(223,113,26)" fg:x="246" fg:w="1"/><text x="11.2175%" y="703.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.04%)</title><rect x="10.9675%" y="677" width="0.0446%" height="15" fill="rgb(206,192,2)" fg:x="246" fg:w="1"/><text x="11.2175%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.04%)</title><rect x="11.5470%" y="821" width="0.0446%" height="15" fill="rgb(241,108,4)" fg:x="259" fg:w="1"/><text x="11.7970%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.04%)</title><rect x="11.5470%" y="805" width="0.0446%" height="15" fill="rgb(247,173,49)" fg:x="259" fg:w="1"/><text x="11.7970%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.04%)</title><rect x="11.5470%" y="789" width="0.0446%" height="15" fill="rgb(224,114,35)" fg:x="259" fg:w="1"/><text x="11.7970%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="11.5470%" y="773" width="0.0446%" height="15" fill="rgb(245,159,27)" fg:x="259" fg:w="1"/><text x="11.7970%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.04%)</title><rect x="11.5470%" y="757" width="0.0446%" height="15" fill="rgb(245,172,44)" fg:x="259" fg:w="1"/><text x="11.7970%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;rlox::parser::Expression&gt;&gt; (1 samples, 0.04%)</title><rect x="11.5470%" y="741" width="0.0446%" height="15" fill="rgb(236,23,11)" fg:x="259" fg:w="1"/><text x="11.7970%" y="751.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="11.5470%" y="725" width="0.0446%" height="15" fill="rgb(205,117,38)" fg:x="259" fg:w="1"/><text x="11.7970%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::parser::Expression,alloc::alloc::Global&gt;&gt; (1 samples, 0.04%)</title><rect x="11.5470%" y="709" width="0.0446%" height="15" fill="rgb(237,72,25)" fg:x="259" fg:w="1"/><text x="11.7970%" y="719.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="11.5470%" y="693" width="0.0446%" height="15" fill="rgb(244,70,9)" fg:x="259" fg:w="1"/><text x="11.7970%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rlox::parser::Expression&gt;&gt; (1 samples, 0.04%)</title><rect x="11.5470%" y="677" width="0.0446%" height="15" fill="rgb(217,125,39)" fg:x="259" fg:w="1"/><text x="11.7970%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="11.5470%" y="661" width="0.0446%" height="15" fill="rgb(235,36,10)" fg:x="259" fg:w="1"/><text x="11.7970%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="11.5470%" y="645" width="0.0446%" height="15" fill="rgb(251,123,47)" fg:x="259" fg:w="1"/><text x="11.7970%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="11.5470%" y="629" width="0.0446%" height="15" fill="rgb(221,13,13)" fg:x="259" fg:w="1"/><text x="11.7970%" y="639.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="11.5470%" y="613" width="0.0446%" height="15" fill="rgb(238,131,9)" fg:x="259" fg:w="1"/><text x="11.7970%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="11.5470%" y="597" width="0.0446%" height="15" fill="rgb(211,50,8)" fg:x="259" fg:w="1"/><text x="11.7970%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.09%)</title><rect x="11.5470%" y="885" width="0.0892%" height="15" fill="rgb(245,182,24)" fg:x="259" fg:w="2"/><text x="11.7970%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.09%)</title><rect x="11.5470%" y="869" width="0.0892%" height="15" fill="rgb(242,14,37)" fg:x="259" fg:w="2"/><text x="11.7970%" y="879.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.09%)</title><rect x="11.5470%" y="853" width="0.0892%" height="15" fill="rgb(246,228,12)" fg:x="259" fg:w="2"/><text x="11.7970%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.09%)</title><rect x="11.5470%" y="837" width="0.0892%" height="15" fill="rgb(213,55,15)" fg:x="259" fg:w="2"/><text x="11.7970%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.04%)</title><rect x="11.5916%" y="821" width="0.0446%" height="15" fill="rgb(209,9,3)" fg:x="260" fg:w="1"/><text x="11.8416%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="11.5916%" y="805" width="0.0446%" height="15" fill="rgb(230,59,30)" fg:x="260" fg:w="1"/><text x="11.8416%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="11.5916%" y="789" width="0.0446%" height="15" fill="rgb(209,121,21)" fg:x="260" fg:w="1"/><text x="11.8416%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="11.5916%" y="773" width="0.0446%" height="15" fill="rgb(220,109,13)" fg:x="260" fg:w="1"/><text x="11.8416%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="11.5916%" y="757" width="0.0446%" height="15" fill="rgb(232,18,1)" fg:x="260" fg:w="1"/><text x="11.8416%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="11.5916%" y="741" width="0.0446%" height="15" fill="rgb(215,41,42)" fg:x="260" fg:w="1"/><text x="11.8416%" y="751.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="11.5916%" y="725" width="0.0446%" height="15" fill="rgb(224,123,36)" fg:x="260" fg:w="1"/><text x="11.8416%" y="735.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="11.5916%" y="709" width="0.0446%" height="15" fill="rgb(240,125,3)" fg:x="260" fg:w="1"/><text x="11.8416%" y="719.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="11.5916%" y="693" width="0.0446%" height="15" fill="rgb(205,98,50)" fg:x="260" fg:w="1"/><text x="11.8416%" y="703.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (1 samples, 0.04%)</title><rect x="11.6362%" y="869" width="0.0446%" height="15" fill="rgb(205,185,37)" fg:x="261" fg:w="1"/><text x="11.8862%" y="879.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (1 samples, 0.04%)</title><rect x="11.6362%" y="853" width="0.0446%" height="15" fill="rgb(238,207,15)" fg:x="261" fg:w="1"/><text x="11.8862%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="11.6362%" y="837" width="0.0446%" height="15" fill="rgb(213,199,42)" fg:x="261" fg:w="1"/><text x="11.8862%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="11.6362%" y="821" width="0.0446%" height="15" fill="rgb(235,201,11)" fg:x="261" fg:w="1"/><text x="11.8862%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="11.6362%" y="805" width="0.0446%" height="15" fill="rgb(207,46,11)" fg:x="261" fg:w="1"/><text x="11.8862%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="11.6362%" y="789" width="0.0446%" height="15" fill="rgb(241,35,35)" fg:x="261" fg:w="1"/><text x="11.8862%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="11.6362%" y="773" width="0.0446%" height="15" fill="rgb(243,32,47)" fg:x="261" fg:w="1"/><text x="11.8862%" y="783.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.04%)</title><rect x="11.6362%" y="757" width="0.0446%" height="15" fill="rgb(247,202,23)" fg:x="261" fg:w="1"/><text x="11.8862%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="11.6362%" y="741" width="0.0446%" height="15" fill="rgb(219,102,11)" fg:x="261" fg:w="1"/><text x="11.8862%" y="751.50"></text></g><g><title>rlox::interpreter::Interpreter::evaluate (16 samples, 0.71%)</title><rect x="11.0120%" y="901" width="0.7133%" height="15" fill="rgb(243,110,44)" fg:x="247" fg:w="16"/><text x="11.2620%" y="911.50"></text></g><g><title>rlox::interpreter::LoxCallable::call (2 samples, 0.09%)</title><rect x="11.6362%" y="885" width="0.0892%" height="15" fill="rgb(222,74,54)" fg:x="261" fg:w="2"/><text x="11.8862%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="11.6808%" y="869" width="0.0446%" height="15" fill="rgb(216,99,12)" fg:x="262" fg:w="1"/><text x="11.9308%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="11.6808%" y="853" width="0.0446%" height="15" fill="rgb(226,22,26)" fg:x="262" fg:w="1"/><text x="11.9308%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="11.6808%" y="837" width="0.0446%" height="15" fill="rgb(217,163,10)" fg:x="262" fg:w="1"/><text x="11.9308%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="11.6808%" y="821" width="0.0446%" height="15" fill="rgb(213,25,53)" fg:x="262" fg:w="1"/><text x="11.9308%" y="831.50"></text></g><g><title>rlox::interpreter::Interpreter::execute (4 samples, 0.18%)</title><rect x="11.7254%" y="901" width="0.1783%" height="15" fill="rgb(252,105,26)" fg:x="263" fg:w="4"/><text x="11.9754%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.09%)</title><rect x="11.8145%" y="885" width="0.0892%" height="15" fill="rgb(220,39,43)" fg:x="265" fg:w="2"/><text x="12.0645%" y="895.50"></text></g><g><title>rlox::interpreter::Interpreter::execute::{{closure}} (2 samples, 0.09%)</title><rect x="11.8145%" y="869" width="0.0892%" height="15" fill="rgb(229,68,48)" fg:x="265" fg:w="2"/><text x="12.0645%" y="879.50"></text></g><g><title>rlox::interpreter::Interpreter::execute_block (1 samples, 0.04%)</title><rect x="11.9037%" y="901" width="0.0446%" height="15" fill="rgb(252,8,32)" fg:x="267" fg:w="1"/><text x="12.1537%" y="911.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="11.9037%" y="885" width="0.0446%" height="15" fill="rgb(223,20,43)" fg:x="267" fg:w="1"/><text x="12.1537%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (1 samples, 0.04%)</title><rect x="11.9037%" y="869" width="0.0446%" height="15" fill="rgb(229,81,49)" fg:x="267" fg:w="1"/><text x="12.1537%" y="879.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.04%)</title><rect x="11.9037%" y="853" width="0.0446%" height="15" fill="rgb(236,28,36)" fg:x="267" fg:w="1"/><text x="12.1537%" y="863.50"></text></g><g><title>[[stack]] (106 samples, 4.73%)</title><rect x="7.3116%" y="917" width="4.7258%" height="15" fill="rgb(249,185,26)" fg:x="164" fg:w="106"/><text x="7.5616%" y="927.50">[[stac..</text></g><g><title>rlox::interpreter::is_less (2 samples, 0.09%)</title><rect x="11.9483%" y="901" width="0.0892%" height="15" fill="rgb(249,174,33)" fg:x="268" fg:w="2"/><text x="12.1983%" y="911.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.31%)</title><rect x="12.0820%" y="901" width="0.3121%" height="15" fill="rgb(233,201,37)" fg:x="271" fg:w="7"/><text x="12.3320%" y="911.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="12.3941%" y="853" width="0.0446%" height="15" fill="rgb(221,78,26)" fg:x="278" fg:w="1"/><text x="12.6441%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="12.3941%" y="837" width="0.0446%" height="15" fill="rgb(250,127,30)" fg:x="278" fg:w="1"/><text x="12.6441%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="12.3941%" y="821" width="0.0446%" height="15" fill="rgb(230,49,44)" fg:x="278" fg:w="1"/><text x="12.6441%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="12.3941%" y="805" width="0.0446%" height="15" fill="rgb(229,67,23)" fg:x="278" fg:w="1"/><text x="12.6441%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="12.3941%" y="789" width="0.0446%" height="15" fill="rgb(249,83,47)" fg:x="278" fg:w="1"/><text x="12.6441%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.04%)</title><rect x="12.3941%" y="773" width="0.0446%" height="15" fill="rgb(215,43,3)" fg:x="278" fg:w="1"/><text x="12.6441%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="12.3941%" y="757" width="0.0446%" height="15" fill="rgb(238,154,13)" fg:x="278" fg:w="1"/><text x="12.6441%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="12.5279%" y="709" width="0.0446%" height="15" fill="rgb(219,56,2)" fg:x="281" fg:w="1"/><text x="12.7779%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="12.5279%" y="693" width="0.0446%" height="15" fill="rgb(233,0,4)" fg:x="281" fg:w="1"/><text x="12.7779%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="12.5279%" y="677" width="0.0446%" height="15" fill="rgb(235,30,7)" fg:x="281" fg:w="1"/><text x="12.7779%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="12.5279%" y="661" width="0.0446%" height="15" fill="rgb(250,79,13)" fg:x="281" fg:w="1"/><text x="12.7779%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="12.5279%" y="645" width="0.0446%" height="15" fill="rgb(211,146,34)" fg:x="281" fg:w="1"/><text x="12.7779%" y="655.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="12.5279%" y="629" width="0.0446%" height="15" fill="rgb(228,22,38)" fg:x="281" fg:w="1"/><text x="12.7779%" y="639.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="12.5279%" y="613" width="0.0446%" height="15" fill="rgb(235,168,5)" fg:x="281" fg:w="1"/><text x="12.7779%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="12.5279%" y="597" width="0.0446%" height="15" fill="rgb(221,155,16)" fg:x="281" fg:w="1"/><text x="12.7779%" y="607.50"></text></g><g><title>&lt;rlox::interpreter::LoxValue as core::clone::Clone&gt;::clone (5 samples, 0.22%)</title><rect x="12.3941%" y="901" width="0.2229%" height="15" fill="rgb(215,215,53)" fg:x="278" fg:w="5"/><text x="12.6441%" y="911.50"></text></g><g><title>&lt;rlox::interpreter::LoxCallable as core::clone::Clone&gt;::clone (5 samples, 0.22%)</title><rect x="12.3941%" y="885" width="0.2229%" height="15" fill="rgb(223,4,10)" fg:x="278" fg:w="5"/><text x="12.6441%" y="895.50"></text></g><g><title>&lt;rlox::interpreter::LoxFunction as core::clone::Clone&gt;::clone (5 samples, 0.22%)</title><rect x="12.3941%" y="869" width="0.2229%" height="15" fill="rgb(234,103,6)" fg:x="278" fg:w="5"/><text x="12.6441%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.18%)</title><rect x="12.4387%" y="853" width="0.1783%" height="15" fill="rgb(227,97,0)" fg:x="279" fg:w="4"/><text x="12.6887%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.18%)</title><rect x="12.4387%" y="837" width="0.1783%" height="15" fill="rgb(234,150,53)" fg:x="279" fg:w="4"/><text x="12.6887%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.18%)</title><rect x="12.4387%" y="821" width="0.1783%" height="15" fill="rgb(228,201,54)" fg:x="279" fg:w="4"/><text x="12.6887%" y="831.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.18%)</title><rect x="12.4387%" y="805" width="0.1783%" height="15" fill="rgb(222,22,37)" fg:x="279" fg:w="4"/><text x="12.6887%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.09%)</title><rect x="12.5279%" y="789" width="0.0892%" height="15" fill="rgb(237,53,32)" fg:x="281" fg:w="2"/><text x="12.7779%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.09%)</title><rect x="12.5279%" y="773" width="0.0892%" height="15" fill="rgb(233,25,53)" fg:x="281" fg:w="2"/><text x="12.7779%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.09%)</title><rect x="12.5279%" y="757" width="0.0892%" height="15" fill="rgb(210,40,34)" fg:x="281" fg:w="2"/><text x="12.7779%" y="767.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.09%)</title><rect x="12.5279%" y="741" width="0.0892%" height="15" fill="rgb(241,220,44)" fg:x="281" fg:w="2"/><text x="12.7779%" y="751.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.09%)</title><rect x="12.5279%" y="725" width="0.0892%" height="15" fill="rgb(235,28,35)" fg:x="281" fg:w="2"/><text x="12.7779%" y="735.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.04%)</title><rect x="12.5724%" y="709" width="0.0446%" height="15" fill="rgb(210,56,17)" fg:x="282" fg:w="1"/><text x="12.8224%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="12.5724%" y="693" width="0.0446%" height="15" fill="rgb(224,130,29)" fg:x="282" fg:w="1"/><text x="12.8224%" y="703.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (2 samples, 0.09%)</title><rect x="14.1774%" y="869" width="0.0892%" height="15" fill="rgb(235,212,8)" fg:x="318" fg:w="2"/><text x="14.4274%" y="879.50"></text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (39 samples, 1.74%)</title><rect x="12.6170%" y="901" width="1.7387%" height="15" fill="rgb(223,33,50)" fg:x="283" fg:w="39"/><text x="12.8670%" y="911.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.18%)</title><rect x="14.1774%" y="885" width="0.1783%" height="15" fill="rgb(219,149,13)" fg:x="318" fg:w="4"/><text x="14.4274%" y="895.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (2 samples, 0.09%)</title><rect x="14.2666%" y="869" width="0.0892%" height="15" fill="rgb(250,156,29)" fg:x="320" fg:w="2"/><text x="14.5166%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (2 samples, 0.09%)</title><rect x="14.2666%" y="853" width="0.0892%" height="15" fill="rgb(216,193,19)" fg:x="320" fg:w="2"/><text x="14.5166%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.09%)</title><rect x="14.2666%" y="837" width="0.0892%" height="15" fill="rgb(216,135,14)" fg:x="320" fg:w="2"/><text x="14.5166%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.09%)</title><rect x="14.2666%" y="821" width="0.0892%" height="15" fill="rgb(241,47,5)" fg:x="320" fg:w="2"/><text x="14.5166%" y="831.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.09%)</title><rect x="14.2666%" y="805" width="0.0892%" height="15" fill="rgb(233,42,35)" fg:x="320" fg:w="2"/><text x="14.5166%" y="815.50"></text></g><g><title>__rdl_alloc (2 samples, 0.09%)</title><rect x="14.2666%" y="789" width="0.0892%" height="15" fill="rgb(231,13,6)" fg:x="320" fg:w="2"/><text x="14.5166%" y="799.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.09%)</title><rect x="14.2666%" y="773" width="0.0892%" height="15" fill="rgb(207,181,40)" fg:x="320" fg:w="2"/><text x="14.5166%" y="783.50"></text></g><g><title>&lt;rlox::parser::Stmt as core::clone::Clone&gt;::clone (8 samples, 0.36%)</title><rect x="14.3558%" y="901" width="0.3567%" height="15" fill="rgb(254,173,49)" fg:x="322" fg:w="8"/><text x="14.6058%" y="911.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.09%)</title><rect x="14.6233%" y="885" width="0.0892%" height="15" fill="rgb(221,1,38)" fg:x="328" fg:w="2"/><text x="14.8733%" y="895.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (2 samples, 0.09%)</title><rect x="14.6233%" y="869" width="0.0892%" height="15" fill="rgb(206,124,46)" fg:x="328" fg:w="2"/><text x="14.8733%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (2 samples, 0.09%)</title><rect x="14.6233%" y="853" width="0.0892%" height="15" fill="rgb(249,21,11)" fg:x="328" fg:w="2"/><text x="14.8733%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.09%)</title><rect x="14.6233%" y="837" width="0.0892%" height="15" fill="rgb(222,201,40)" fg:x="328" fg:w="2"/><text x="14.8733%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.09%)</title><rect x="14.6233%" y="821" width="0.0892%" height="15" fill="rgb(235,61,29)" fg:x="328" fg:w="2"/><text x="14.8733%" y="831.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.09%)</title><rect x="14.6233%" y="805" width="0.0892%" height="15" fill="rgb(219,207,3)" fg:x="328" fg:w="2"/><text x="14.8733%" y="815.50"></text></g><g><title>__rdl_alloc (2 samples, 0.09%)</title><rect x="14.6233%" y="789" width="0.0892%" height="15" fill="rgb(222,56,46)" fg:x="328" fg:w="2"/><text x="14.8733%" y="799.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.09%)</title><rect x="14.6233%" y="773" width="0.0892%" height="15" fill="rgb(239,76,54)" fg:x="328" fg:w="2"/><text x="14.8733%" y="783.50"></text></g><g><title>__GI___libc_free (23 samples, 1.03%)</title><rect x="14.7124%" y="901" width="1.0254%" height="15" fill="rgb(231,124,27)" fg:x="330" fg:w="23"/><text x="14.9624%" y="911.50"></text></g><g><title>__GI___libc_malloc (33 samples, 1.47%)</title><rect x="15.7379%" y="901" width="1.4712%" height="15" fill="rgb(249,195,6)" fg:x="353" fg:w="33"/><text x="15.9879%" y="911.50"></text></g><g><title>__memcpy_evex_unaligned_erms (4 samples, 0.18%)</title><rect x="17.2091%" y="901" width="0.1783%" height="15" fill="rgb(237,174,47)" fg:x="386" fg:w="4"/><text x="17.4591%" y="911.50"></text></g><g><title>_int_free (31 samples, 1.38%)</title><rect x="17.3874%" y="901" width="1.3821%" height="15" fill="rgb(206,201,31)" fg:x="390" fg:w="31"/><text x="17.6374%" y="911.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::get_mut_unchecked (1 samples, 0.04%)</title><rect x="18.7695%" y="885" width="0.0446%" height="15" fill="rgb(231,57,52)" fg:x="421" fg:w="1"/><text x="19.0195%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.13%)</title><rect x="18.7695%" y="901" width="0.1337%" height="15" fill="rgb(248,177,22)" fg:x="421" fg:w="3"/><text x="19.0195%" y="911.50"></text></g><g><title>core::mem::drop (2 samples, 0.09%)</title><rect x="18.8141%" y="885" width="0.0892%" height="15" fill="rgb(215,211,37)" fg:x="422" fg:w="2"/><text x="19.0641%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;std::sync::mutex::Mutex&lt;rlox::environ::Environ&gt;&gt;&gt; (2 samples, 0.09%)</title><rect x="18.8141%" y="869" width="0.0892%" height="15" fill="rgb(241,128,51)" fg:x="422" fg:w="2"/><text x="19.0641%" y="879.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="18.8141%" y="853" width="0.0892%" height="15" fill="rgb(227,165,31)" fg:x="422" fg:w="2"/><text x="19.0641%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.09%)</title><rect x="18.8141%" y="837" width="0.0892%" height="15" fill="rgb(228,167,24)" fg:x="422" fg:w="2"/><text x="19.0641%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.09%)</title><rect x="18.8141%" y="821" width="0.0892%" height="15" fill="rgb(228,143,12)" fg:x="422" fg:w="2"/><text x="19.0641%" y="831.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.09%)</title><rect x="18.8141%" y="805" width="0.0892%" height="15" fill="rgb(249,149,8)" fg:x="422" fg:w="2"/><text x="19.0641%" y="815.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.09%)</title><rect x="18.8141%" y="789" width="0.0892%" height="15" fill="rgb(243,35,44)" fg:x="422" fg:w="2"/><text x="19.0641%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.09%)</title><rect x="18.9478%" y="869" width="0.0892%" height="15" fill="rgb(246,89,9)" fg:x="425" fg:w="2"/><text x="19.1978%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.09%)</title><rect x="18.9478%" y="853" width="0.0892%" height="15" fill="rgb(233,213,13)" fg:x="425" fg:w="2"/><text x="19.1978%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.09%)</title><rect x="18.9478%" y="837" width="0.0892%" height="15" fill="rgb(233,141,41)" fg:x="425" fg:w="2"/><text x="19.1978%" y="847.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="18.9478%" y="821" width="0.0892%" height="15" fill="rgb(239,167,4)" fg:x="425" fg:w="2"/><text x="19.1978%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.09%)</title><rect x="18.9478%" y="805" width="0.0892%" height="15" fill="rgb(209,217,16)" fg:x="425" fg:w="2"/><text x="19.1978%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.09%)</title><rect x="18.9478%" y="789" width="0.0892%" height="15" fill="rgb(219,88,35)" fg:x="425" fg:w="2"/><text x="19.1978%" y="799.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.09%)</title><rect x="18.9478%" y="773" width="0.0892%" height="15" fill="rgb(220,193,23)" fg:x="425" fg:w="2"/><text x="19.1978%" y="783.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.09%)</title><rect x="18.9478%" y="757" width="0.0892%" height="15" fill="rgb(230,90,52)" fg:x="425" fg:w="2"/><text x="19.1978%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (2 samples, 0.09%)</title><rect x="19.0370%" y="869" width="0.0892%" height="15" fill="rgb(252,106,19)" fg:x="427" fg:w="2"/><text x="19.2870%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="19.0370%" y="853" width="0.0892%" height="15" fill="rgb(206,74,20)" fg:x="427" fg:w="2"/><text x="19.2870%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (2 samples, 0.09%)</title><rect x="19.0370%" y="837" width="0.0892%" height="15" fill="rgb(230,138,44)" fg:x="427" fg:w="2"/><text x="19.2870%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.09%)</title><rect x="19.0370%" y="821" width="0.0892%" height="15" fill="rgb(235,182,43)" fg:x="427" fg:w="2"/><text x="19.2870%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.09%)</title><rect x="19.0370%" y="805" width="0.0892%" height="15" fill="rgb(242,16,51)" fg:x="427" fg:w="2"/><text x="19.2870%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.09%)</title><rect x="19.0370%" y="789" width="0.0892%" height="15" fill="rgb(248,9,4)" fg:x="427" fg:w="2"/><text x="19.2870%" y="799.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="19.0370%" y="773" width="0.0892%" height="15" fill="rgb(210,31,22)" fg:x="427" fg:w="2"/><text x="19.2870%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.09%)</title><rect x="19.0370%" y="757" width="0.0892%" height="15" fill="rgb(239,54,39)" fg:x="427" fg:w="2"/><text x="19.2870%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.09%)</title><rect x="19.0370%" y="741" width="0.0892%" height="15" fill="rgb(230,99,41)" fg:x="427" fg:w="2"/><text x="19.2870%" y="751.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.09%)</title><rect x="19.0370%" y="725" width="0.0892%" height="15" fill="rgb(253,106,12)" fg:x="427" fg:w="2"/><text x="19.2870%" y="735.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.09%)</title><rect x="19.0370%" y="709" width="0.0892%" height="15" fill="rgb(213,46,41)" fg:x="427" fg:w="2"/><text x="19.2870%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::interpreter::LoxCallable&gt; (6 samples, 0.27%)</title><rect x="18.9033%" y="901" width="0.2675%" height="15" fill="rgb(215,133,35)" fg:x="424" fg:w="6"/><text x="19.1533%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::interpreter::LoxFunction&gt; (5 samples, 0.22%)</title><rect x="18.9478%" y="885" width="0.2229%" height="15" fill="rgb(213,28,5)" fg:x="425" fg:w="5"/><text x="19.1978%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rlox::parser::Stmt&gt;&gt; (1 samples, 0.04%)</title><rect x="19.1262%" y="869" width="0.0446%" height="15" fill="rgb(215,77,49)" fg:x="429" fg:w="1"/><text x="19.3762%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rlox::parser::Stmt&gt;&gt; (1 samples, 0.04%)</title><rect x="19.1262%" y="853" width="0.0446%" height="15" fill="rgb(248,100,22)" fg:x="429" fg:w="1"/><text x="19.3762%" y="863.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="19.1262%" y="837" width="0.0446%" height="15" fill="rgb(208,67,9)" fg:x="429" fg:w="1"/><text x="19.3762%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="19.1262%" y="821" width="0.0446%" height="15" fill="rgb(219,133,21)" fg:x="429" fg:w="1"/><text x="19.3762%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="19.1262%" y="805" width="0.0446%" height="15" fill="rgb(246,46,29)" fg:x="429" fg:w="1"/><text x="19.3762%" y="815.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="19.1262%" y="789" width="0.0446%" height="15" fill="rgb(246,185,52)" fg:x="429" fg:w="1"/><text x="19.3762%" y="799.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="19.1262%" y="773" width="0.0446%" height="15" fill="rgb(252,136,11)" fg:x="429" fg:w="1"/><text x="19.3762%" y="783.50"></text></g><g><title>__GI___libc_free (7 samples, 0.31%)</title><rect x="19.4383%" y="885" width="0.3121%" height="15" fill="rgb(219,138,53)" fg:x="436" fg:w="7"/><text x="19.6883%" y="895.50"></text></g><g><title>_int_free (12 samples, 0.53%)</title><rect x="19.7503%" y="885" width="0.5350%" height="15" fill="rgb(211,51,23)" fg:x="443" fg:w="12"/><text x="20.0003%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (26 samples, 1.16%)</title><rect x="19.1708%" y="901" width="1.1592%" height="15" fill="rgb(247,221,28)" fg:x="430" fg:w="26"/><text x="19.4208%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (1 samples, 0.04%)</title><rect x="20.2853%" y="885" width="0.0446%" height="15" fill="rgb(251,222,45)" fg:x="455" fg:w="1"/><text x="20.5353%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.13%)</title><rect x="20.5974%" y="885" width="0.1337%" height="15" fill="rgb(217,162,53)" fg:x="462" fg:w="3"/><text x="20.8474%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.13%)</title><rect x="20.5974%" y="869" width="0.1337%" height="15" fill="rgb(229,93,14)" fg:x="462" fg:w="3"/><text x="20.8474%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.13%)</title><rect x="20.5974%" y="853" width="0.1337%" height="15" fill="rgb(209,67,49)" fg:x="462" fg:w="3"/><text x="20.8474%" y="863.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.13%)</title><rect x="20.5974%" y="837" width="0.1337%" height="15" fill="rgb(213,87,29)" fg:x="462" fg:w="3"/><text x="20.8474%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.13%)</title><rect x="20.5974%" y="821" width="0.1337%" height="15" fill="rgb(205,151,52)" fg:x="462" fg:w="3"/><text x="20.8474%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.13%)</title><rect x="20.5974%" y="805" width="0.1337%" height="15" fill="rgb(253,215,39)" fg:x="462" fg:w="3"/><text x="20.8474%" y="815.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.13%)</title><rect x="20.5974%" y="789" width="0.1337%" height="15" fill="rgb(221,220,41)" fg:x="462" fg:w="3"/><text x="20.8474%" y="799.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.13%)</title><rect x="20.5974%" y="773" width="0.1337%" height="15" fill="rgb(218,133,21)" fg:x="462" fg:w="3"/><text x="20.8474%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="20.7312%" y="837" width="0.0446%" height="15" fill="rgb(221,193,43)" fg:x="465" fg:w="1"/><text x="20.9812%" y="847.50"></text></g><g><title>rlox::environ::Environ::get (12 samples, 0.53%)</title><rect x="20.3299%" y="901" width="0.5350%" height="15" fill="rgb(240,128,52)" fg:x="456" fg:w="12"/><text x="20.5799%" y="911.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3 samples, 0.13%)</title><rect x="20.7312%" y="885" width="0.1337%" height="15" fill="rgb(253,114,12)" fg:x="465" fg:w="3"/><text x="20.9812%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3 samples, 0.13%)</title><rect x="20.7312%" y="869" width="0.1337%" height="15" fill="rgb(215,223,47)" fg:x="465" fg:w="3"/><text x="20.9812%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.13%)</title><rect x="20.7312%" y="853" width="0.1337%" height="15" fill="rgb(248,225,23)" fg:x="465" fg:w="3"/><text x="20.9812%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.09%)</title><rect x="20.7757%" y="837" width="0.0892%" height="15" fill="rgb(250,108,0)" fg:x="466" fg:w="2"/><text x="21.0257%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.09%)</title><rect x="20.7757%" y="821" width="0.0892%" height="15" fill="rgb(228,208,7)" fg:x="466" fg:w="2"/><text x="21.0257%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.09%)</title><rect x="20.7757%" y="805" width="0.0892%" height="15" fill="rgb(244,45,10)" fg:x="466" fg:w="2"/><text x="21.0257%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.09%)</title><rect x="20.7757%" y="789" width="0.0892%" height="15" fill="rgb(207,125,25)" fg:x="466" fg:w="2"/><text x="21.0257%" y="799.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.09%)</title><rect x="20.7757%" y="773" width="0.0892%" height="15" fill="rgb(210,195,18)" fg:x="466" fg:w="2"/><text x="21.0257%" y="783.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.09%)</title><rect x="20.7757%" y="757" width="0.0892%" height="15" fill="rgb(249,80,12)" fg:x="466" fg:w="2"/><text x="21.0257%" y="767.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.09%)</title><rect x="20.7757%" y="741" width="0.0892%" height="15" fill="rgb(221,65,9)" fg:x="466" fg:w="2"/><text x="21.0257%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (2 samples, 0.09%)</title><rect x="20.7757%" y="725" width="0.0892%" height="15" fill="rgb(235,49,36)" fg:x="466" fg:w="2"/><text x="21.0257%" y="735.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (2 samples, 0.09%)</title><rect x="20.7757%" y="709" width="0.0892%" height="15" fill="rgb(225,32,20)" fg:x="466" fg:w="2"/><text x="21.0257%" y="719.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.09%)</title><rect x="20.7757%" y="693" width="0.0892%" height="15" fill="rgb(215,141,46)" fg:x="466" fg:w="2"/><text x="21.0257%" y="703.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.09%)</title><rect x="20.7757%" y="677" width="0.0892%" height="15" fill="rgb(250,160,47)" fg:x="466" fg:w="2"/><text x="21.0257%" y="687.50"></text></g><g><title>__GI___libc_free (9 samples, 0.40%)</title><rect x="21.6228%" y="421" width="0.4012%" height="15" fill="rgb(216,222,40)" fg:x="485" fg:w="9"/><text x="21.8728%" y="431.50"></text></g><g><title>_int_free (7 samples, 0.31%)</title><rect x="21.7120%" y="405" width="0.3121%" height="15" fill="rgb(234,217,39)" fg:x="487" fg:w="7"/><text x="21.9620%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;rlox::environ::Environ&gt;&gt; (14 samples, 0.62%)</title><rect x="22.0241%" y="421" width="0.6242%" height="15" fill="rgb(207,178,40)" fg:x="494" fg:w="14"/><text x="22.2741%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.62%)</title><rect x="22.0241%" y="405" width="0.6242%" height="15" fill="rgb(221,136,13)" fg:x="494" fg:w="14"/><text x="22.2741%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (14 samples, 0.62%)</title><rect x="22.0241%" y="389" width="0.6242%" height="15" fill="rgb(249,199,10)" fg:x="494" fg:w="14"/><text x="22.2741%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (14 samples, 0.62%)</title><rect x="22.0241%" y="373" width="0.6242%" height="15" fill="rgb(249,222,13)" fg:x="494" fg:w="14"/><text x="22.2741%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_swap (14 samples, 0.62%)</title><rect x="22.0241%" y="357" width="0.6242%" height="15" fill="rgb(244,185,38)" fg:x="494" fg:w="14"/><text x="22.2741%" y="367.50"></text></g><g><title>&lt;rlox::interpreter::LoxValue as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="22.6482%" y="405" width="0.0446%" height="15" fill="rgb(236,202,9)" fg:x="508" fg:w="1"/><text x="22.8982%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.04%)</title><rect x="22.6928%" y="405" width="0.0446%" height="15" fill="rgb(250,229,37)" fg:x="509" fg:w="1"/><text x="22.9428%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.04%)</title><rect x="22.6928%" y="389" width="0.0446%" height="15" fill="rgb(206,174,23)" fg:x="509" fg:w="1"/><text x="22.9428%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.04%)</title><rect x="22.6928%" y="373" width="0.0446%" height="15" fill="rgb(211,33,43)" fg:x="509" fg:w="1"/><text x="22.9428%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="22.6928%" y="357" width="0.0446%" height="15" fill="rgb(245,58,50)" fg:x="509" fg:w="1"/><text x="22.9428%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="22.6928%" y="341" width="0.0446%" height="15" fill="rgb(244,68,36)" fg:x="509" fg:w="1"/><text x="22.9428%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.09%)</title><rect x="22.8266%" y="277" width="0.0892%" height="15" fill="rgb(232,229,15)" fg:x="512" fg:w="2"/><text x="23.0766%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="22.8266%" y="261" width="0.0892%" height="15" fill="rgb(254,30,23)" fg:x="512" fg:w="2"/><text x="23.0766%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.13%)</title><rect x="22.9157%" y="261" width="0.1337%" height="15" fill="rgb(235,160,14)" fg:x="514" fg:w="3"/><text x="23.1657%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.31%)</title><rect x="22.8266%" y="325" width="0.3121%" height="15" fill="rgb(212,155,44)" fg:x="512" fg:w="7"/><text x="23.0766%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.31%)</title><rect x="22.8266%" y="309" width="0.3121%" height="15" fill="rgb(226,2,50)" fg:x="512" fg:w="7"/><text x="23.0766%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.31%)</title><rect x="22.8266%" y="293" width="0.3121%" height="15" fill="rgb(234,177,6)" fg:x="512" fg:w="7"/><text x="23.0766%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.22%)</title><rect x="22.9157%" y="277" width="0.2229%" height="15" fill="rgb(217,24,9)" fg:x="514" fg:w="5"/><text x="23.1657%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.09%)</title><rect x="23.0495%" y="261" width="0.0892%" height="15" fill="rgb(220,13,46)" fg:x="517" fg:w="2"/><text x="23.2995%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.13%)</title><rect x="23.1387%" y="325" width="0.1337%" height="15" fill="rgb(239,221,27)" fg:x="519" fg:w="3"/><text x="23.3887%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.13%)</title><rect x="23.2724%" y="229" width="0.1337%" height="15" fill="rgb(222,198,25)" fg:x="522" fg:w="3"/><text x="23.5224%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.09%)</title><rect x="23.3170%" y="213" width="0.0892%" height="15" fill="rgb(211,99,13)" fg:x="523" fg:w="2"/><text x="23.5670%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (19 samples, 0.85%)</title><rect x="22.7820%" y="357" width="0.8471%" height="15" fill="rgb(232,111,31)" fg:x="511" fg:w="19"/><text x="23.0320%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19 samples, 0.85%)</title><rect x="22.7820%" y="341" width="0.8471%" height="15" fill="rgb(245,82,37)" fg:x="511" fg:w="19"/><text x="23.0320%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8 samples, 0.36%)</title><rect x="23.2724%" y="325" width="0.3567%" height="15" fill="rgb(227,149,46)" fg:x="522" fg:w="8"/><text x="23.5224%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (8 samples, 0.36%)</title><rect x="23.2724%" y="309" width="0.3567%" height="15" fill="rgb(218,36,50)" fg:x="522" fg:w="8"/><text x="23.5224%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (8 samples, 0.36%)</title><rect x="23.2724%" y="293" width="0.3567%" height="15" fill="rgb(226,80,48)" fg:x="522" fg:w="8"/><text x="23.5224%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (8 samples, 0.36%)</title><rect x="23.2724%" y="277" width="0.3567%" height="15" fill="rgb(238,224,15)" fg:x="522" fg:w="8"/><text x="23.5224%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (8 samples, 0.36%)</title><rect x="23.2724%" y="261" width="0.3567%" height="15" fill="rgb(241,136,10)" fg:x="522" fg:w="8"/><text x="23.5224%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (8 samples, 0.36%)</title><rect x="23.2724%" y="245" width="0.3567%" height="15" fill="rgb(208,32,45)" fg:x="522" fg:w="8"/><text x="23.5224%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u8 (5 samples, 0.22%)</title><rect x="23.4062%" y="229" width="0.2229%" height="15" fill="rgb(207,135,9)" fg:x="525" fg:w="5"/><text x="23.6562%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.22%)</title><rect x="23.4062%" y="213" width="0.2229%" height="15" fill="rgb(206,86,44)" fg:x="525" fg:w="5"/><text x="23.6562%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.18%)</title><rect x="23.4507%" y="197" width="0.1783%" height="15" fill="rgb(245,177,15)" fg:x="526" fg:w="4"/><text x="23.7007%" y="207.50"></text></g><g><title>rlox::environ::Environ::get (25 samples, 1.11%)</title><rect x="22.6482%" y="421" width="1.1146%" height="15" fill="rgb(206,64,50)" fg:x="508" fg:w="25"/><text x="22.8982%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (23 samples, 1.03%)</title><rect x="22.7374%" y="405" width="1.0254%" height="15" fill="rgb(234,36,40)" fg:x="510" fg:w="23"/><text x="22.9874%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (23 samples, 1.03%)</title><rect x="22.7374%" y="389" width="1.0254%" height="15" fill="rgb(213,64,8)" fg:x="510" fg:w="23"/><text x="22.9874%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (23 samples, 1.03%)</title><rect x="22.7374%" y="373" width="1.0254%" height="15" fill="rgb(210,75,36)" fg:x="510" fg:w="23"/><text x="22.9874%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.13%)</title><rect x="23.6291%" y="357" width="0.1337%" height="15" fill="rgb(229,88,21)" fg:x="530" fg:w="3"/><text x="23.8791%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.13%)</title><rect x="23.6291%" y="341" width="0.1337%" height="15" fill="rgb(252,204,47)" fg:x="530" fg:w="3"/><text x="23.8791%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 0.13%)</title><rect x="23.6291%" y="325" width="0.1337%" height="15" fill="rgb(208,77,27)" fg:x="530" fg:w="3"/><text x="23.8791%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 0.13%)</title><rect x="23.6291%" y="309" width="0.1337%" height="15" fill="rgb(221,76,26)" fg:x="530" fg:w="3"/><text x="23.8791%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 0.13%)</title><rect x="23.6291%" y="293" width="0.1337%" height="15" fill="rgb(225,139,18)" fg:x="530" fg:w="3"/><text x="23.8791%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.13%)</title><rect x="23.6291%" y="277" width="0.1337%" height="15" fill="rgb(230,137,11)" fg:x="530" fg:w="3"/><text x="23.8791%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.13%)</title><rect x="23.6291%" y="261" width="0.1337%" height="15" fill="rgb(212,28,1)" fg:x="530" fg:w="3"/><text x="23.8791%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (3 samples, 0.13%)</title><rect x="23.6291%" y="245" width="0.1337%" height="15" fill="rgb(248,164,17)" fg:x="530" fg:w="3"/><text x="23.8791%" y="255.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (3 samples, 0.13%)</title><rect x="23.6291%" y="229" width="0.1337%" height="15" fill="rgb(222,171,42)" fg:x="530" fg:w="3"/><text x="23.8791%" y="239.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 0.13%)</title><rect x="23.6291%" y="213" width="0.1337%" height="15" fill="rgb(243,84,45)" fg:x="530" fg:w="3"/><text x="23.8791%" y="223.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.13%)</title><rect x="23.6291%" y="197" width="0.1337%" height="15" fill="rgb(252,49,23)" fg:x="530" fg:w="3"/><text x="23.8791%" y="207.50"></text></g><g><title>__memcmp_evex_movbe (1 samples, 0.04%)</title><rect x="23.7182%" y="181" width="0.0446%" height="15" fill="rgb(215,19,7)" fg:x="532" fg:w="1"/><text x="23.9682%" y="191.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (2 samples, 0.09%)</title><rect x="23.7628%" y="405" width="0.0892%" height="15" fill="rgb(238,81,41)" fg:x="533" fg:w="2"/><text x="24.0128%" y="415.50"></text></g><g><title>std::sync::poison::Flag::guard (2 samples, 0.09%)</title><rect x="23.7628%" y="389" width="0.0892%" height="15" fill="rgb(210,199,37)" fg:x="533" fg:w="2"/><text x="24.0128%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (77 samples, 3.43%)</title><rect x="21.1324%" y="645" width="3.4329%" height="15" fill="rgb(244,192,49)" fg:x="474" fg:w="77"/><text x="21.3824%" y="655.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (77 samples, 3.43%)</title><rect x="21.1324%" y="629" width="3.4329%" height="15" fill="rgb(226,211,11)" fg:x="474" fg:w="77"/><text x="21.3824%" y="639.50">&lt;al..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (77 samples, 3.43%)</title><rect x="21.1324%" y="613" width="3.4329%" height="15" fill="rgb(236,162,54)" fg:x="474" fg:w="77"/><text x="21.3824%" y="623.50">all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (77 samples, 3.43%)</title><rect x="21.1324%" y="597" width="3.4329%" height="15" fill="rgb(220,229,9)" fg:x="474" fg:w="77"/><text x="21.3824%" y="607.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (77 samples, 3.43%)</title><rect x="21.1324%" y="581" width="3.4329%" height="15" fill="rgb(250,87,22)" fg:x="474" fg:w="77"/><text x="21.3824%" y="591.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (77 samples, 3.43%)</title><rect x="21.1324%" y="565" width="3.4329%" height="15" fill="rgb(239,43,17)" fg:x="474" fg:w="77"/><text x="21.3824%" y="575.50">all..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (77 samples, 3.43%)</title><rect x="21.1324%" y="549" width="3.4329%" height="15" fill="rgb(231,177,25)" fg:x="474" fg:w="77"/><text x="21.3824%" y="559.50">cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (77 samples, 3.43%)</title><rect x="21.1324%" y="533" width="3.4329%" height="15" fill="rgb(219,179,1)" fg:x="474" fg:w="77"/><text x="21.3824%" y="543.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (77 samples, 3.43%)</title><rect x="21.1324%" y="517" width="3.4329%" height="15" fill="rgb(238,219,53)" fg:x="474" fg:w="77"/><text x="21.3824%" y="527.50">cor..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (77 samples, 3.43%)</title><rect x="21.1324%" y="501" width="3.4329%" height="15" fill="rgb(232,167,36)" fg:x="474" fg:w="77"/><text x="21.3824%" y="511.50">cor..</text></g><g><title>rlox::interpreter::Interpreter::evaluate::{{closure}} (77 samples, 3.43%)</title><rect x="21.1324%" y="485" width="3.4329%" height="15" fill="rgb(244,19,51)" fg:x="474" fg:w="77"/><text x="21.3824%" y="495.50">rlo..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (77 samples, 3.43%)</title><rect x="21.1324%" y="469" width="3.4329%" height="15" fill="rgb(224,6,22)" fg:x="474" fg:w="77"/><text x="21.3824%" y="479.50">rlo..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (77 samples, 3.43%)</title><rect x="21.1324%" y="453" width="3.4329%" height="15" fill="rgb(224,145,5)" fg:x="474" fg:w="77"/><text x="21.3824%" y="463.50">rlo..</text></g><g><title>rlox::interpreter::Interpreter::val_from_lit (70 samples, 3.12%)</title><rect x="21.4445%" y="437" width="3.1208%" height="15" fill="rgb(234,130,49)" fg:x="481" fg:w="70"/><text x="21.6945%" y="447.50">rlo..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (18 samples, 0.80%)</title><rect x="23.7628%" y="421" width="0.8025%" height="15" fill="rgb(254,6,2)" fg:x="533" fg:w="18"/><text x="24.0128%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (16 samples, 0.71%)</title><rect x="23.8520%" y="405" width="0.7133%" height="15" fill="rgb(208,96,46)" fg:x="535" fg:w="16"/><text x="24.1020%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (16 samples, 0.71%)</title><rect x="23.8520%" y="389" width="0.7133%" height="15" fill="rgb(239,3,39)" fg:x="535" fg:w="16"/><text x="24.1020%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.71%)</title><rect x="23.8520%" y="373" width="0.7133%" height="15" fill="rgb(233,210,1)" fg:x="535" fg:w="16"/><text x="24.1020%" y="383.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (23 samples, 1.03%)</title><rect x="24.5653%" y="453" width="1.0254%" height="15" fill="rgb(244,137,37)" fg:x="551" fg:w="23"/><text x="24.8153%" y="463.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (23 samples, 1.03%)</title><rect x="24.5653%" y="437" width="1.0254%" height="15" fill="rgb(240,136,2)" fg:x="551" fg:w="23"/><text x="24.8153%" y="447.50"></text></g><g><title>&lt;rlox::parser::Stmt as core::clone::Clone&gt;::clone (23 samples, 1.03%)</title><rect x="24.5653%" y="421" width="1.0254%" height="15" fill="rgb(239,18,37)" fg:x="551" fg:w="23"/><text x="24.8153%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (23 samples, 1.03%)</title><rect x="24.5653%" y="405" width="1.0254%" height="15" fill="rgb(218,185,22)" fg:x="551" fg:w="23"/><text x="24.8153%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (23 samples, 1.03%)</title><rect x="24.5653%" y="389" width="1.0254%" height="15" fill="rgb(225,218,4)" fg:x="551" fg:w="23"/><text x="24.8153%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (23 samples, 1.03%)</title><rect x="24.5653%" y="373" width="1.0254%" height="15" fill="rgb(230,182,32)" fg:x="551" fg:w="23"/><text x="24.8153%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (23 samples, 1.03%)</title><rect x="24.5653%" y="357" width="1.0254%" height="15" fill="rgb(242,56,43)" fg:x="551" fg:w="23"/><text x="24.8153%" y="367.50"></text></g><g><title>&lt;rlox::parser::Stmt as core::clone::Clone&gt;::clone (23 samples, 1.03%)</title><rect x="24.5653%" y="341" width="1.0254%" height="15" fill="rgb(233,99,24)" fg:x="551" fg:w="23"/><text x="24.8153%" y="351.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.45%)</title><rect x="25.1449%" y="325" width="0.4458%" height="15" fill="rgb(234,209,42)" fg:x="564" fg:w="10"/><text x="25.3949%" y="335.50"></text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="25.5461%" y="309" width="0.0446%" height="15" fill="rgb(227,7,12)" fg:x="573" fg:w="1"/><text x="25.7961%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.09%)</title><rect x="26.2149%" y="101" width="0.0892%" height="15" fill="rgb(245,203,43)" fg:x="588" fg:w="2"/><text x="26.4649%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.09%)</title><rect x="26.2149%" y="85" width="0.0892%" height="15" fill="rgb(238,205,33)" fg:x="588" fg:w="2"/><text x="26.4649%" y="95.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.09%)</title><rect x="26.2149%" y="69" width="0.0892%" height="15" fill="rgb(231,56,7)" fg:x="588" fg:w="2"/><text x="26.4649%" y="79.50"></text></g><g><title>__rdl_alloc (2 samples, 0.09%)</title><rect x="26.2149%" y="53" width="0.0892%" height="15" fill="rgb(244,186,29)" fg:x="588" fg:w="2"/><text x="26.4649%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.09%)</title><rect x="26.2149%" y="37" width="0.0892%" height="15" fill="rgb(234,111,31)" fg:x="588" fg:w="2"/><text x="26.4649%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.22%)</title><rect x="26.2149%" y="229" width="0.2229%" height="15" fill="rgb(241,149,10)" fg:x="588" fg:w="5"/><text x="26.4649%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.22%)</title><rect x="26.2149%" y="213" width="0.2229%" height="15" fill="rgb(249,206,44)" fg:x="588" fg:w="5"/><text x="26.4649%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.22%)</title><rect x="26.2149%" y="197" width="0.2229%" height="15" fill="rgb(251,153,30)" fg:x="588" fg:w="5"/><text x="26.4649%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.22%)</title><rect x="26.2149%" y="181" width="0.2229%" height="15" fill="rgb(239,152,38)" fg:x="588" fg:w="5"/><text x="26.4649%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.22%)</title><rect x="26.2149%" y="165" width="0.2229%" height="15" fill="rgb(249,139,47)" fg:x="588" fg:w="5"/><text x="26.4649%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.22%)</title><rect x="26.2149%" y="149" width="0.2229%" height="15" fill="rgb(244,64,35)" fg:x="588" fg:w="5"/><text x="26.4649%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.22%)</title><rect x="26.2149%" y="133" width="0.2229%" height="15" fill="rgb(216,46,15)" fg:x="588" fg:w="5"/><text x="26.4649%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.22%)</title><rect x="26.2149%" y="117" width="0.2229%" height="15" fill="rgb(250,74,19)" fg:x="588" fg:w="5"/><text x="26.4649%" y="127.50"></text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.13%)</title><rect x="26.3041%" y="101" width="0.1337%" height="15" fill="rgb(249,42,33)" fg:x="590" fg:w="3"/><text x="26.5541%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (3 samples, 0.13%)</title><rect x="26.3041%" y="85" width="0.1337%" height="15" fill="rgb(242,149,17)" fg:x="590" fg:w="3"/><text x="26.5541%" y="95.50"></text></g><g><title>_int_malloc (22 samples, 0.98%)</title><rect x="26.6161%" y="213" width="0.9808%" height="15" fill="rgb(244,29,21)" fg:x="597" fg:w="22"/><text x="26.8661%" y="223.50"></text></g><g><title>tcache_put (8 samples, 0.36%)</title><rect x="27.2403%" y="197" width="0.3567%" height="15" fill="rgb(220,130,37)" fg:x="611" fg:w="8"/><text x="27.4903%" y="207.50"></text></g><g><title>__GI___libc_malloc (28 samples, 1.25%)</title><rect x="26.4378%" y="229" width="1.2483%" height="15" fill="rgb(211,67,2)" fg:x="593" fg:w="28"/><text x="26.6878%" y="239.50"></text></g><g><title>checked_request2size (2 samples, 0.09%)</title><rect x="27.5970%" y="213" width="0.0892%" height="15" fill="rgb(235,68,52)" fg:x="619" fg:w="2"/><text x="27.8470%" y="223.50"></text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (48 samples, 2.14%)</title><rect x="25.5907%" y="309" width="2.1400%" height="15" fill="rgb(246,142,3)" fg:x="574" fg:w="48"/><text x="25.8407%" y="319.50">&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (48 samples, 2.14%)</title><rect x="25.5907%" y="293" width="2.1400%" height="15" fill="rgb(241,25,7)" fg:x="574" fg:w="48"/><text x="25.8407%" y="303.50">&lt;..</text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (48 samples, 2.14%)</title><rect x="25.5907%" y="277" width="2.1400%" height="15" fill="rgb(242,119,39)" fg:x="574" fg:w="48"/><text x="25.8407%" y="287.50">&lt;..</text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (48 samples, 2.14%)</title><rect x="25.5907%" y="261" width="2.1400%" height="15" fill="rgb(241,98,45)" fg:x="574" fg:w="48"/><text x="25.8407%" y="271.50">&lt;..</text></g><g><title>&lt;rlox::parser::Literal as core::clone::Clone&gt;::clone (46 samples, 2.05%)</title><rect x="25.6799%" y="245" width="2.0508%" height="15" fill="rgb(254,28,30)" fg:x="576" fg:w="46"/><text x="25.9299%" y="255.50">&lt;..</text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.04%)</title><rect x="27.6861%" y="229" width="0.0446%" height="15" fill="rgb(241,142,54)" fg:x="621" fg:w="1"/><text x="27.9361%" y="239.50"></text></g><g><title>rlox::interpreter::Interpreter::evaluate (77 samples, 3.43%)</title><rect x="24.5653%" y="645" width="3.4329%" height="15" fill="rgb(222,85,15)" fg:x="551" fg:w="77"/><text x="24.8153%" y="655.50">rlo..</text></g><g><title>rlox::interpreter::Interpreter::val_from_lit (77 samples, 3.43%)</title><rect x="24.5653%" y="629" width="3.4329%" height="15" fill="rgb(210,85,47)" fg:x="551" fg:w="77"/><text x="24.8153%" y="639.50">rlo..</text></g><g><title>rlox::environ::Environ::get (77 samples, 3.43%)</title><rect x="24.5653%" y="613" width="3.4329%" height="15" fill="rgb(224,206,25)" fg:x="551" fg:w="77"/><text x="24.8153%" y="623.50">rlo..</text></g><g><title>rlox::environ::Environ::get (77 samples, 3.43%)</title><rect x="24.5653%" y="597" width="3.4329%" height="15" fill="rgb(243,201,19)" fg:x="551" fg:w="77"/><text x="24.8153%" y="607.50">rlo..</text></g><g><title>&lt;rlox::interpreter::LoxValue as core::clone::Clone&gt;::clone (77 samples, 3.43%)</title><rect x="24.5653%" y="581" width="3.4329%" height="15" fill="rgb(236,59,4)" fg:x="551" fg:w="77"/><text x="24.8153%" y="591.50">&lt;rl..</text></g><g><title>&lt;rlox::interpreter::LoxCallable as core::clone::Clone&gt;::clone (77 samples, 3.43%)</title><rect x="24.5653%" y="565" width="3.4329%" height="15" fill="rgb(254,179,45)" fg:x="551" fg:w="77"/><text x="24.8153%" y="575.50">&lt;rl..</text></g><g><title>&lt;rlox::interpreter::LoxFunction as core::clone::Clone&gt;::clone (77 samples, 3.43%)</title><rect x="24.5653%" y="549" width="3.4329%" height="15" fill="rgb(226,14,10)" fg:x="551" fg:w="77"/><text x="24.8153%" y="559.50">&lt;rl..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (77 samples, 3.43%)</title><rect x="24.5653%" y="533" width="3.4329%" height="15" fill="rgb(244,27,41)" fg:x="551" fg:w="77"/><text x="24.8153%" y="543.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (77 samples, 3.43%)</title><rect x="24.5653%" y="517" width="3.4329%" height="15" fill="rgb(235,35,32)" fg:x="551" fg:w="77"/><text x="24.8153%" y="527.50">all..</text></g><g><title>alloc::slice::hack::to_vec (77 samples, 3.43%)</title><rect x="24.5653%" y="501" width="3.4329%" height="15" fill="rgb(218,68,31)" fg:x="551" fg:w="77"/><text x="24.8153%" y="511.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (77 samples, 3.43%)</title><rect x="24.5653%" y="485" width="3.4329%" height="15" fill="rgb(207,120,37)" fg:x="551" fg:w="77"/><text x="24.8153%" y="495.50">&lt;T ..</text></g><g><title>&lt;rlox::parser::Stmt as core::clone::Clone&gt;::clone (77 samples, 3.43%)</title><rect x="24.5653%" y="469" width="3.4329%" height="15" fill="rgb(227,98,0)" fg:x="551" fg:w="77"/><text x="24.8153%" y="479.50">&lt;rl..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (54 samples, 2.41%)</title><rect x="25.5907%" y="453" width="2.4075%" height="15" fill="rgb(207,7,3)" fg:x="574" fg:w="54"/><text x="25.8407%" y="463.50">&lt;c..</text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (54 samples, 2.41%)</title><rect x="25.5907%" y="437" width="2.4075%" height="15" fill="rgb(206,98,19)" fg:x="574" fg:w="54"/><text x="25.8407%" y="447.50">&lt;r..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (54 samples, 2.41%)</title><rect x="25.5907%" y="421" width="2.4075%" height="15" fill="rgb(217,5,26)" fg:x="574" fg:w="54"/><text x="25.8407%" y="431.50">&lt;a..</text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (54 samples, 2.41%)</title><rect x="25.5907%" y="405" width="2.4075%" height="15" fill="rgb(235,190,38)" fg:x="574" fg:w="54"/><text x="25.8407%" y="415.50">&lt;T..</text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (54 samples, 2.41%)</title><rect x="25.5907%" y="389" width="2.4075%" height="15" fill="rgb(247,86,24)" fg:x="574" fg:w="54"/><text x="25.8407%" y="399.50">&lt;r..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (54 samples, 2.41%)</title><rect x="25.5907%" y="373" width="2.4075%" height="15" fill="rgb(205,101,16)" fg:x="574" fg:w="54"/><text x="25.8407%" y="383.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (54 samples, 2.41%)</title><rect x="25.5907%" y="357" width="2.4075%" height="15" fill="rgb(246,168,33)" fg:x="574" fg:w="54"/><text x="25.8407%" y="367.50">al..</text></g><g><title>alloc::slice::hack::to_vec (54 samples, 2.41%)</title><rect x="25.5907%" y="341" width="2.4075%" height="15" fill="rgb(231,114,1)" fg:x="574" fg:w="54"/><text x="25.8407%" y="351.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (54 samples, 2.41%)</title><rect x="25.5907%" y="325" width="2.4075%" height="15" fill="rgb(207,184,53)" fg:x="574" fg:w="54"/><text x="25.8407%" y="335.50">&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.27%)</title><rect x="27.7307%" y="309" width="0.2675%" height="15" fill="rgb(224,95,51)" fg:x="622" fg:w="6"/><text x="27.9807%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.27%)</title><rect x="27.7307%" y="293" width="0.2675%" height="15" fill="rgb(212,188,45)" fg:x="622" fg:w="6"/><text x="27.9807%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.27%)</title><rect x="27.7307%" y="277" width="0.2675%" height="15" fill="rgb(223,154,38)" fg:x="622" fg:w="6"/><text x="27.9807%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.27%)</title><rect x="27.7307%" y="261" width="0.2675%" height="15" fill="rgb(251,22,52)" fg:x="622" fg:w="6"/><text x="27.9807%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.27%)</title><rect x="27.7307%" y="245" width="0.2675%" height="15" fill="rgb(229,209,22)" fg:x="622" fg:w="6"/><text x="27.9807%" y="255.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.27%)</title><rect x="27.7307%" y="229" width="0.2675%" height="15" fill="rgb(234,138,34)" fg:x="622" fg:w="6"/><text x="27.9807%" y="239.50"></text></g><g><title>__rdl_alloc (6 samples, 0.27%)</title><rect x="27.7307%" y="213" width="0.2675%" height="15" fill="rgb(212,95,11)" fg:x="622" fg:w="6"/><text x="27.9807%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.27%)</title><rect x="27.7307%" y="197" width="0.2675%" height="15" fill="rgb(240,179,47)" fg:x="622" fg:w="6"/><text x="27.9807%" y="207.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.27%)</title><rect x="27.7307%" y="181" width="0.2675%" height="15" fill="rgb(240,163,11)" fg:x="622" fg:w="6"/><text x="27.9807%" y="191.50"></text></g><g><title>_int_malloc (6 samples, 0.27%)</title><rect x="27.7307%" y="165" width="0.2675%" height="15" fill="rgb(236,37,12)" fg:x="622" fg:w="6"/><text x="27.9807%" y="175.50"></text></g><g><title>tcache_put (2 samples, 0.09%)</title><rect x="27.9091%" y="149" width="0.0892%" height="15" fill="rgb(232,164,16)" fg:x="626" fg:w="2"/><text x="28.1591%" y="159.50"></text></g><g><title>_int_free (6 samples, 0.27%)</title><rect x="28.3103%" y="533" width="0.2675%" height="15" fill="rgb(244,205,15)" fg:x="635" fg:w="6"/><text x="28.5603%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (14 samples, 0.62%)</title><rect x="27.9982%" y="597" width="0.6242%" height="15" fill="rgb(223,117,47)" fg:x="628" fg:w="14"/><text x="28.2482%" y="607.50"></text></g><g><title>rlox::interpreter::Interpreter::execute::{{closure}} (14 samples, 0.62%)</title><rect x="27.9982%" y="581" width="0.6242%" height="15" fill="rgb(244,107,35)" fg:x="628" fg:w="14"/><text x="28.2482%" y="591.50"></text></g><g><title>rlox::interpreter::Interpreter::evaluate (14 samples, 0.62%)</title><rect x="27.9982%" y="565" width="0.6242%" height="15" fill="rgb(205,140,8)" fg:x="628" fg:w="14"/><text x="28.2482%" y="575.50"></text></g><g><title>__GI___libc_free (9 samples, 0.40%)</title><rect x="28.2211%" y="549" width="0.4012%" height="15" fill="rgb(228,84,46)" fg:x="633" fg:w="9"/><text x="28.4711%" y="559.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="28.5778%" y="533" width="0.0446%" height="15" fill="rgb(254,188,9)" fg:x="641" fg:w="1"/><text x="28.8278%" y="543.50"></text></g><g><title>rlox::interpreter::Interpreter::evaluate (32 samples, 1.43%)</title><rect x="28.6224%" y="597" width="1.4267%" height="15" fill="rgb(206,112,54)" fg:x="642" fg:w="32"/><text x="28.8724%" y="607.50"></text></g><g><title>__GI___libc_free (10 samples, 0.45%)</title><rect x="29.6032%" y="581" width="0.4458%" height="15" fill="rgb(216,84,49)" fg:x="664" fg:w="10"/><text x="29.8532%" y="591.50"></text></g><g><title>_int_free (8 samples, 0.36%)</title><rect x="29.6924%" y="565" width="0.3567%" height="15" fill="rgb(214,194,35)" fg:x="666" fg:w="8"/><text x="29.9424%" y="575.50"></text></g><g><title>rlox::interpreter::Interpreter::evaluate (211 samples, 9.41%)</title><rect x="21.1324%" y="885" width="9.4070%" height="15" fill="rgb(249,28,3)" fg:x="474" fg:w="211"/><text x="21.3824%" y="895.50">rlox::interpr..</text></g><g><title>rlox::interpreter::LoxCallable::call (211 samples, 9.41%)</title><rect x="21.1324%" y="869" width="9.4070%" height="15" fill="rgb(222,56,52)" fg:x="474" fg:w="211"/><text x="21.3824%" y="879.50">rlox::interpr..</text></g><g><title>rlox::interpreter::Interpreter::execute_block (211 samples, 9.41%)</title><rect x="21.1324%" y="853" width="9.4070%" height="15" fill="rgb(245,217,50)" fg:x="474" fg:w="211"/><text x="21.3824%" y="863.50">rlox::interpr..</text></g><g><title>rlox::interpreter::Interpreter::execute (211 samples, 9.41%)</title><rect x="21.1324%" y="837" width="9.4070%" height="15" fill="rgb(213,201,24)" fg:x="474" fg:w="211"/><text x="21.3824%" y="847.50">rlox::interpr..</text></g><g><title>core::option::Option&lt;T&gt;::map (211 samples, 9.41%)</title><rect x="21.1324%" y="821" width="9.4070%" height="15" fill="rgb(248,116,28)" fg:x="474" fg:w="211"/><text x="21.3824%" y="831.50">core::option:..</text></g><g><title>rlox::interpreter::Interpreter::execute::{{closure}} (211 samples, 9.41%)</title><rect x="21.1324%" y="805" width="9.4070%" height="15" fill="rgb(219,72,43)" fg:x="474" fg:w="211"/><text x="21.3824%" y="815.50">rlox::interpr..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (211 samples, 9.41%)</title><rect x="21.1324%" y="789" width="9.4070%" height="15" fill="rgb(209,138,14)" fg:x="474" fg:w="211"/><text x="21.3824%" y="799.50">rlox::interpr..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (211 samples, 9.41%)</title><rect x="21.1324%" y="773" width="9.4070%" height="15" fill="rgb(222,18,33)" fg:x="474" fg:w="211"/><text x="21.3824%" y="783.50">rlox::interpr..</text></g><g><title>rlox::interpreter::LoxCallable::call (211 samples, 9.41%)</title><rect x="21.1324%" y="757" width="9.4070%" height="15" fill="rgb(213,199,7)" fg:x="474" fg:w="211"/><text x="21.3824%" y="767.50">rlox::interpr..</text></g><g><title>rlox::interpreter::Interpreter::execute_block (211 samples, 9.41%)</title><rect x="21.1324%" y="741" width="9.4070%" height="15" fill="rgb(250,110,10)" fg:x="474" fg:w="211"/><text x="21.3824%" y="751.50">rlox::interpr..</text></g><g><title>rlox::interpreter::Interpreter::execute (211 samples, 9.41%)</title><rect x="21.1324%" y="725" width="9.4070%" height="15" fill="rgb(248,123,6)" fg:x="474" fg:w="211"/><text x="21.3824%" y="735.50">rlox::interpr..</text></g><g><title>core::option::Option&lt;T&gt;::map (211 samples, 9.41%)</title><rect x="21.1324%" y="709" width="9.4070%" height="15" fill="rgb(206,91,31)" fg:x="474" fg:w="211"/><text x="21.3824%" y="719.50">core::option:..</text></g><g><title>rlox::interpreter::Interpreter::execute::{{closure}} (211 samples, 9.41%)</title><rect x="21.1324%" y="693" width="9.4070%" height="15" fill="rgb(211,154,13)" fg:x="474" fg:w="211"/><text x="21.3824%" y="703.50">rlox::interpr..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (211 samples, 9.41%)</title><rect x="21.1324%" y="677" width="9.4070%" height="15" fill="rgb(225,148,7)" fg:x="474" fg:w="211"/><text x="21.3824%" y="687.50">rlox::interpr..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (211 samples, 9.41%)</title><rect x="21.1324%" y="661" width="9.4070%" height="15" fill="rgb(220,160,43)" fg:x="474" fg:w="211"/><text x="21.3824%" y="671.50">rlox::interpr..</text></g><g><title>rlox::interpreter::LoxCallable::call (57 samples, 2.54%)</title><rect x="27.9982%" y="645" width="2.5412%" height="15" fill="rgb(213,52,39)" fg:x="628" fg:w="57"/><text x="28.2482%" y="655.50">rl..</text></g><g><title>rlox::interpreter::Interpreter::execute_block (57 samples, 2.54%)</title><rect x="27.9982%" y="629" width="2.5412%" height="15" fill="rgb(243,137,7)" fg:x="628" fg:w="57"/><text x="28.2482%" y="639.50">rl..</text></g><g><title>rlox::interpreter::Interpreter::execute (57 samples, 2.54%)</title><rect x="27.9982%" y="613" width="2.5412%" height="15" fill="rgb(230,79,13)" fg:x="628" fg:w="57"/><text x="28.2482%" y="623.50">rl..</text></g><g><title>rlox::interpreter::Interpreter::execute (11 samples, 0.49%)</title><rect x="30.0490%" y="597" width="0.4904%" height="15" fill="rgb(247,105,23)" fg:x="674" fg:w="11"/><text x="30.2990%" y="607.50"></text></g><g><title>rlox::interpreter::Interpreter::execute_block (11 samples, 0.49%)</title><rect x="30.0490%" y="581" width="0.4904%" height="15" fill="rgb(223,179,41)" fg:x="674" fg:w="11"/><text x="30.2990%" y="591.50"></text></g><g><title>rlox::interpreter::Interpreter::execute (11 samples, 0.49%)</title><rect x="30.0490%" y="565" width="0.4904%" height="15" fill="rgb(218,9,34)" fg:x="674" fg:w="11"/><text x="30.2990%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.18%)</title><rect x="30.3611%" y="549" width="0.1783%" height="15" fill="rgb(222,106,8)" fg:x="681" fg:w="4"/><text x="30.6111%" y="559.50"></text></g><g><title>__GI___libc_free (8 samples, 0.36%)</title><rect x="30.8961%" y="549" width="0.3567%" height="15" fill="rgb(211,220,0)" fg:x="693" fg:w="8"/><text x="31.1461%" y="559.50"></text></g><g><title>_int_free (7 samples, 0.31%)</title><rect x="30.9407%" y="533" width="0.3121%" height="15" fill="rgb(229,52,16)" fg:x="694" fg:w="7"/><text x="31.1907%" y="543.50"></text></g><g><title>alloc::alloc::box_free (10 samples, 0.45%)</title><rect x="31.2528%" y="549" width="0.4458%" height="15" fill="rgb(212,155,18)" fg:x="701" fg:w="10"/><text x="31.5028%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.45%)</title><rect x="31.2528%" y="533" width="0.4458%" height="15" fill="rgb(242,21,14)" fg:x="701" fg:w="10"/><text x="31.5028%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.45%)</title><rect x="31.2528%" y="517" width="0.4458%" height="15" fill="rgb(222,19,48)" fg:x="701" fg:w="10"/><text x="31.5028%" y="527.50"></text></g><g><title>__rdl_dealloc (10 samples, 0.45%)</title><rect x="31.2528%" y="501" width="0.4458%" height="15" fill="rgb(232,45,27)" fg:x="701" fg:w="10"/><text x="31.5028%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (10 samples, 0.45%)</title><rect x="31.2528%" y="485" width="0.4458%" height="15" fill="rgb(249,103,42)" fg:x="701" fg:w="10"/><text x="31.5028%" y="495.50"></text></g><g><title>__GI___libc_free (10 samples, 0.45%)</title><rect x="31.2528%" y="469" width="0.4458%" height="15" fill="rgb(246,81,33)" fg:x="701" fg:w="10"/><text x="31.5028%" y="479.50"></text></g><g><title>_int_free (9 samples, 0.40%)</title><rect x="31.2974%" y="453" width="0.4012%" height="15" fill="rgb(252,33,42)" fg:x="702" fg:w="9"/><text x="31.5474%" y="463.50"></text></g><g><title>_int_free (9 samples, 0.40%)</title><rect x="31.9661%" y="357" width="0.4012%" height="15" fill="rgb(209,212,41)" fg:x="717" fg:w="9"/><text x="32.2161%" y="367.50"></text></g><g><title>tcache_put (2 samples, 0.09%)</title><rect x="32.2782%" y="341" width="0.0892%" height="15" fill="rgb(207,154,6)" fg:x="724" fg:w="2"/><text x="32.5282%" y="351.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (15 samples, 0.67%)</title><rect x="31.7878%" y="405" width="0.6687%" height="15" fill="rgb(223,64,47)" fg:x="713" fg:w="15"/><text x="32.0378%" y="415.50"></text></g><g><title>rlox::interpreter::Interpreter::evaluate::{{closure}} (15 samples, 0.67%)</title><rect x="31.7878%" y="389" width="0.6687%" height="15" fill="rgb(211,161,38)" fg:x="713" fg:w="15"/><text x="32.0378%" y="399.50"></text></g><g><title>__GI___libc_free (15 samples, 0.67%)</title><rect x="31.7878%" y="373" width="0.6687%" height="15" fill="rgb(219,138,40)" fg:x="713" fg:w="15"/><text x="32.0378%" y="383.50"></text></g><g><title>arena_for_chunk (2 samples, 0.09%)</title><rect x="32.3674%" y="357" width="0.0892%" height="15" fill="rgb(241,228,46)" fg:x="726" fg:w="2"/><text x="32.6174%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (21 samples, 0.94%)</title><rect x="31.6986%" y="485" width="0.9362%" height="15" fill="rgb(223,209,38)" fg:x="711" fg:w="21"/><text x="31.9486%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (21 samples, 0.94%)</title><rect x="31.6986%" y="469" width="0.9362%" height="15" fill="rgb(236,164,45)" fg:x="711" fg:w="21"/><text x="31.9486%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (21 samples, 0.94%)</title><rect x="31.6986%" y="453" width="0.9362%" height="15" fill="rgb(231,15,5)" fg:x="711" fg:w="21"/><text x="31.9486%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.94%)</title><rect x="31.6986%" y="437" width="0.9362%" height="15" fill="rgb(252,35,15)" fg:x="711" fg:w="21"/><text x="31.9486%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (21 samples, 0.94%)</title><rect x="31.6986%" y="421" width="0.9362%" height="15" fill="rgb(248,181,18)" fg:x="711" fg:w="21"/><text x="31.9486%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;rlox::parser::Expression&gt;&gt; (4 samples, 0.18%)</title><rect x="32.4565%" y="405" width="0.1783%" height="15" fill="rgb(233,39,42)" fg:x="728" fg:w="4"/><text x="32.7065%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.18%)</title><rect x="32.4565%" y="389" width="0.1783%" height="15" fill="rgb(238,110,33)" fg:x="728" fg:w="4"/><text x="32.7065%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::parser::Expression,alloc::alloc::Global&gt;&gt; (4 samples, 0.18%)</title><rect x="32.4565%" y="373" width="0.1783%" height="15" fill="rgb(233,195,10)" fg:x="728" fg:w="4"/><text x="32.7065%" y="383.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.18%)</title><rect x="32.4565%" y="357" width="0.1783%" height="15" fill="rgb(254,105,3)" fg:x="728" fg:w="4"/><text x="32.7065%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rlox::parser::Expression&gt;&gt; (4 samples, 0.18%)</title><rect x="32.4565%" y="341" width="0.1783%" height="15" fill="rgb(221,225,9)" fg:x="728" fg:w="4"/><text x="32.7065%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.18%)</title><rect x="32.4565%" y="325" width="0.1783%" height="15" fill="rgb(224,227,45)" fg:x="728" fg:w="4"/><text x="32.7065%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.18%)</title><rect x="32.4565%" y="309" width="0.1783%" height="15" fill="rgb(229,198,43)" fg:x="728" fg:w="4"/><text x="32.7065%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.18%)</title><rect x="32.4565%" y="293" width="0.1783%" height="15" fill="rgb(206,209,35)" fg:x="728" fg:w="4"/><text x="32.7065%" y="303.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.18%)</title><rect x="32.4565%" y="277" width="0.1783%" height="15" fill="rgb(245,195,53)" fg:x="728" fg:w="4"/><text x="32.7065%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.18%)</title><rect x="32.4565%" y="261" width="0.1783%" height="15" fill="rgb(240,92,26)" fg:x="728" fg:w="4"/><text x="32.7065%" y="271.50"></text></g><g><title>__GI___libc_free (4 samples, 0.18%)</title><rect x="32.4565%" y="245" width="0.1783%" height="15" fill="rgb(207,40,23)" fg:x="728" fg:w="4"/><text x="32.7065%" y="255.50"></text></g><g><title>_int_free (3 samples, 0.13%)</title><rect x="32.5011%" y="229" width="0.1337%" height="15" fill="rgb(223,111,35)" fg:x="729" fg:w="3"/><text x="32.7511%" y="239.50"></text></g><g><title>checked_request2size (2 samples, 0.09%)</title><rect x="32.7240%" y="325" width="0.0892%" height="15" fill="rgb(229,147,28)" fg:x="734" fg:w="2"/><text x="32.9740%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (28 samples, 1.25%)</title><rect x="31.6986%" y="549" width="1.2483%" height="15" fill="rgb(211,29,28)" fg:x="711" fg:w="28"/><text x="31.9486%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (28 samples, 1.25%)</title><rect x="31.6986%" y="533" width="1.2483%" height="15" fill="rgb(228,72,33)" fg:x="711" fg:w="28"/><text x="31.9486%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (28 samples, 1.25%)</title><rect x="31.6986%" y="517" width="1.2483%" height="15" fill="rgb(205,214,31)" fg:x="711" fg:w="28"/><text x="31.9486%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (28 samples, 1.25%)</title><rect x="31.6986%" y="501" width="1.2483%" height="15" fill="rgb(224,111,15)" fg:x="711" fg:w="28"/><text x="31.9486%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.31%)</title><rect x="32.6349%" y="485" width="0.3121%" height="15" fill="rgb(253,21,26)" fg:x="732" fg:w="7"/><text x="32.8849%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.31%)</title><rect x="32.6349%" y="469" width="0.3121%" height="15" fill="rgb(245,139,43)" fg:x="732" fg:w="7"/><text x="32.8849%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.31%)</title><rect x="32.6349%" y="453" width="0.3121%" height="15" fill="rgb(252,170,7)" fg:x="732" fg:w="7"/><text x="32.8849%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.31%)</title><rect x="32.6349%" y="437" width="0.3121%" height="15" fill="rgb(231,118,14)" fg:x="732" fg:w="7"/><text x="32.8849%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.27%)</title><rect x="32.6794%" y="421" width="0.2675%" height="15" fill="rgb(238,83,0)" fg:x="733" fg:w="6"/><text x="32.9294%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.27%)</title><rect x="32.6794%" y="405" width="0.2675%" height="15" fill="rgb(221,39,39)" fg:x="733" fg:w="6"/><text x="32.9294%" y="415.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.27%)</title><rect x="32.6794%" y="389" width="0.2675%" height="15" fill="rgb(222,119,46)" fg:x="733" fg:w="6"/><text x="32.9294%" y="399.50"></text></g><g><title>__rdl_alloc (6 samples, 0.27%)</title><rect x="32.6794%" y="373" width="0.2675%" height="15" fill="rgb(222,165,49)" fg:x="733" fg:w="6"/><text x="32.9294%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.27%)</title><rect x="32.6794%" y="357" width="0.2675%" height="15" fill="rgb(219,113,52)" fg:x="733" fg:w="6"/><text x="32.9294%" y="367.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.27%)</title><rect x="32.6794%" y="341" width="0.2675%" height="15" fill="rgb(214,7,15)" fg:x="733" fg:w="6"/><text x="32.9294%" y="351.50"></text></g><g><title>tcache_get (3 samples, 0.13%)</title><rect x="32.8132%" y="325" width="0.1337%" height="15" fill="rgb(235,32,4)" fg:x="736" fg:w="3"/><text x="33.0632%" y="335.50"></text></g><g><title>_int_free (6 samples, 0.27%)</title><rect x="32.9915%" y="373" width="0.2675%" height="15" fill="rgb(238,90,54)" fg:x="740" fg:w="6"/><text x="33.2415%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (8 samples, 0.36%)</title><rect x="32.9469%" y="517" width="0.3567%" height="15" fill="rgb(213,208,19)" fg:x="739" fg:w="8"/><text x="33.1969%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8 samples, 0.36%)</title><rect x="32.9469%" y="501" width="0.3567%" height="15" fill="rgb(233,156,4)" fg:x="739" fg:w="8"/><text x="33.1969%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8 samples, 0.36%)</title><rect x="32.9469%" y="485" width="0.3567%" height="15" fill="rgb(207,194,5)" fg:x="739" fg:w="8"/><text x="33.1969%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.36%)</title><rect x="32.9469%" y="469" width="0.3567%" height="15" fill="rgb(206,111,30)" fg:x="739" fg:w="8"/><text x="33.1969%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.36%)</title><rect x="32.9469%" y="453" width="0.3567%" height="15" fill="rgb(243,70,54)" fg:x="739" fg:w="8"/><text x="33.1969%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.36%)</title><rect x="32.9469%" y="437" width="0.3567%" height="15" fill="rgb(242,28,8)" fg:x="739" fg:w="8"/><text x="33.1969%" y="447.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.36%)</title><rect x="32.9469%" y="421" width="0.3567%" height="15" fill="rgb(219,106,18)" fg:x="739" fg:w="8"/><text x="33.1969%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.36%)</title><rect x="32.9469%" y="405" width="0.3567%" height="15" fill="rgb(244,222,10)" fg:x="739" fg:w="8"/><text x="33.1969%" y="415.50"></text></g><g><title>__GI___libc_free (8 samples, 0.36%)</title><rect x="32.9469%" y="389" width="0.3567%" height="15" fill="rgb(236,179,52)" fg:x="739" fg:w="8"/><text x="33.1969%" y="399.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="33.2590%" y="373" width="0.0446%" height="15" fill="rgb(213,23,39)" fg:x="746" fg:w="1"/><text x="33.5090%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.58%)</title><rect x="33.3036%" y="405" width="0.5796%" height="15" fill="rgb(238,48,10)" fg:x="747" fg:w="13"/><text x="33.5536%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.58%)</title><rect x="33.3036%" y="389" width="0.5796%" height="15" fill="rgb(251,196,23)" fg:x="747" fg:w="13"/><text x="33.5536%" y="399.50"></text></g><g><title>__rdl_dealloc (13 samples, 0.58%)</title><rect x="33.3036%" y="373" width="0.5796%" height="15" fill="rgb(250,152,24)" fg:x="747" fg:w="13"/><text x="33.5536%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (13 samples, 0.58%)</title><rect x="33.3036%" y="357" width="0.5796%" height="15" fill="rgb(209,150,17)" fg:x="747" fg:w="13"/><text x="33.5536%" y="367.50"></text></g><g><title>__GI___libc_free (12 samples, 0.53%)</title><rect x="33.3482%" y="341" width="0.5350%" height="15" fill="rgb(234,202,34)" fg:x="748" fg:w="12"/><text x="33.5982%" y="351.50"></text></g><g><title>_int_free (10 samples, 0.45%)</title><rect x="33.4374%" y="325" width="0.4458%" height="15" fill="rgb(253,148,53)" fg:x="750" fg:w="10"/><text x="33.6874%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.62%)</title><rect x="33.3036%" y="501" width="0.6242%" height="15" fill="rgb(218,129,16)" fg:x="747" fg:w="14"/><text x="33.5536%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (14 samples, 0.62%)</title><rect x="33.3036%" y="485" width="0.6242%" height="15" fill="rgb(216,85,19)" fg:x="747" fg:w="14"/><text x="33.5536%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (14 samples, 0.62%)</title><rect x="33.3036%" y="469" width="0.6242%" height="15" fill="rgb(235,228,7)" fg:x="747" fg:w="14"/><text x="33.5536%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (14 samples, 0.62%)</title><rect x="33.3036%" y="453" width="0.6242%" height="15" fill="rgb(245,175,0)" fg:x="747" fg:w="14"/><text x="33.5536%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (14 samples, 0.62%)</title><rect x="33.3036%" y="437" width="0.6242%" height="15" fill="rgb(208,168,36)" fg:x="747" fg:w="14"/><text x="33.5536%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.62%)</title><rect x="33.3036%" y="421" width="0.6242%" height="15" fill="rgb(246,171,24)" fg:x="747" fg:w="14"/><text x="33.5536%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="33.8832%" y="405" width="0.0446%" height="15" fill="rgb(215,142,24)" fg:x="760" fg:w="1"/><text x="34.1332%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (25 samples, 1.11%)</title><rect x="33.3036%" y="517" width="1.1146%" height="15" fill="rgb(250,187,7)" fg:x="747" fg:w="25"/><text x="33.5536%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (11 samples, 0.49%)</title><rect x="33.9278%" y="501" width="0.4904%" height="15" fill="rgb(228,66,33)" fg:x="761" fg:w="11"/><text x="34.1778%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.49%)</title><rect x="33.9278%" y="485" width="0.4904%" height="15" fill="rgb(234,215,21)" fg:x="761" fg:w="11"/><text x="34.1778%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.49%)</title><rect x="33.9278%" y="469" width="0.4904%" height="15" fill="rgb(222,191,20)" fg:x="761" fg:w="11"/><text x="34.1778%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.49%)</title><rect x="33.9278%" y="453" width="0.4904%" height="15" fill="rgb(245,79,54)" fg:x="761" fg:w="11"/><text x="34.1778%" y="463.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.49%)</title><rect x="33.9278%" y="437" width="0.4904%" height="15" fill="rgb(240,10,37)" fg:x="761" fg:w="11"/><text x="34.1778%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11 samples, 0.49%)</title><rect x="33.9278%" y="421" width="0.4904%" height="15" fill="rgb(214,192,32)" fg:x="761" fg:w="11"/><text x="34.1778%" y="431.50"></text></g><g><title>__GI___libc_free (11 samples, 0.49%)</title><rect x="33.9278%" y="405" width="0.4904%" height="15" fill="rgb(209,36,54)" fg:x="761" fg:w="11"/><text x="34.1778%" y="415.50"></text></g><g><title>_int_free (10 samples, 0.45%)</title><rect x="33.9724%" y="389" width="0.4458%" height="15" fill="rgb(220,10,11)" fg:x="762" fg:w="10"/><text x="34.2224%" y="399.50"></text></g><g><title>__GI___libc_free (9 samples, 0.40%)</title><rect x="34.5074%" y="469" width="0.4012%" height="15" fill="rgb(221,106,17)" fg:x="774" fg:w="9"/><text x="34.7574%" y="479.50"></text></g><g><title>_int_free (8 samples, 0.36%)</title><rect x="34.5519%" y="453" width="0.3567%" height="15" fill="rgb(251,142,44)" fg:x="775" fg:w="8"/><text x="34.8019%" y="463.50"></text></g><g><title>__GI___libc_free (32 samples, 1.43%)</title><rect x="34.9978%" y="453" width="1.4267%" height="15" fill="rgb(238,13,15)" fg:x="785" fg:w="32"/><text x="35.2478%" y="463.50"></text></g><g><title>_int_free (28 samples, 1.25%)</title><rect x="35.1761%" y="437" width="1.2483%" height="15" fill="rgb(208,107,27)" fg:x="789" fg:w="28"/><text x="35.4261%" y="447.50"></text></g><g><title>__GI___libc_free (15 samples, 0.67%)</title><rect x="36.5136%" y="421" width="0.6687%" height="15" fill="rgb(205,136,37)" fg:x="819" fg:w="15"/><text x="36.7636%" y="431.50"></text></g><g><title>_int_free (13 samples, 0.58%)</title><rect x="36.6028%" y="405" width="0.5796%" height="15" fill="rgb(250,205,27)" fg:x="821" fg:w="13"/><text x="36.8528%" y="415.50"></text></g><g><title>_int_free (8 samples, 0.36%)</title><rect x="37.2715%" y="325" width="0.3567%" height="15" fill="rgb(210,80,43)" fg:x="836" fg:w="8"/><text x="37.5215%" y="335.50"></text></g><g><title>alloc::alloc::box_free (12 samples, 0.53%)</title><rect x="37.1823%" y="421" width="0.5350%" height="15" fill="rgb(247,160,36)" fg:x="834" fg:w="12"/><text x="37.4323%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.53%)</title><rect x="37.1823%" y="405" width="0.5350%" height="15" fill="rgb(234,13,49)" fg:x="834" fg:w="12"/><text x="37.4323%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.53%)</title><rect x="37.1823%" y="389" width="0.5350%" height="15" fill="rgb(234,122,0)" fg:x="834" fg:w="12"/><text x="37.4323%" y="399.50"></text></g><g><title>__rdl_dealloc (12 samples, 0.53%)</title><rect x="37.1823%" y="373" width="0.5350%" height="15" fill="rgb(207,146,38)" fg:x="834" fg:w="12"/><text x="37.4323%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12 samples, 0.53%)</title><rect x="37.1823%" y="357" width="0.5350%" height="15" fill="rgb(207,177,25)" fg:x="834" fg:w="12"/><text x="37.4323%" y="367.50"></text></g><g><title>__GI___libc_free (12 samples, 0.53%)</title><rect x="37.1823%" y="341" width="0.5350%" height="15" fill="rgb(211,178,42)" fg:x="834" fg:w="12"/><text x="37.4323%" y="351.50"></text></g><g><title>arena_for_chunk (2 samples, 0.09%)</title><rect x="37.6282%" y="325" width="0.0892%" height="15" fill="rgb(230,69,54)" fg:x="844" fg:w="2"/><text x="37.8782%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;rlox::parser::Expression&gt;&gt; (32 samples, 1.43%)</title><rect x="36.5136%" y="437" width="1.4267%" height="15" fill="rgb(214,135,41)" fg:x="819" fg:w="32"/><text x="36.7636%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (5 samples, 0.22%)</title><rect x="37.7173%" y="421" width="0.2229%" height="15" fill="rgb(237,67,25)" fg:x="846" fg:w="5"/><text x="37.9673%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Literal&gt; (3 samples, 0.13%)</title><rect x="37.8065%" y="405" width="0.1337%" height="15" fill="rgb(222,189,50)" fg:x="848" fg:w="3"/><text x="38.0565%" y="415.50"></text></g><g><title>_int_free (14 samples, 0.62%)</title><rect x="38.0294%" y="373" width="0.6242%" height="15" fill="rgb(245,148,34)" fg:x="853" fg:w="14"/><text x="38.2794%" y="383.50"></text></g><g><title>__GI___libc_free (17 samples, 0.76%)</title><rect x="37.9403%" y="389" width="0.7579%" height="15" fill="rgb(222,29,6)" fg:x="851" fg:w="17"/><text x="38.1903%" y="399.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="38.6536%" y="373" width="0.0446%" height="15" fill="rgb(221,189,43)" fg:x="867" fg:w="1"/><text x="38.9036%" y="383.50"></text></g><g><title>_int_free (33 samples, 1.47%)</title><rect x="38.9657%" y="357" width="1.4712%" height="15" fill="rgb(207,36,27)" fg:x="874" fg:w="33"/><text x="39.2157%" y="367.50"></text></g><g><title>__GI___libc_free (38 samples, 1.69%)</title><rect x="38.8765%" y="373" width="1.6942%" height="15" fill="rgb(217,90,24)" fg:x="872" fg:w="38"/><text x="39.1265%" y="383.50"></text></g><g><title>arena_for_chunk (3 samples, 0.13%)</title><rect x="40.4369%" y="357" width="0.1337%" height="15" fill="rgb(224,66,35)" fg:x="907" fg:w="3"/><text x="40.6869%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (71 samples, 3.17%)</title><rect x="37.9403%" y="421" width="3.1654%" height="15" fill="rgb(221,13,50)" fg:x="851" fg:w="71"/><text x="38.1903%" y="431.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;[rlox::parser::Expression]&gt; (71 samples, 3.17%)</title><rect x="37.9403%" y="405" width="3.1654%" height="15" fill="rgb(236,68,49)" fg:x="851" fg:w="71"/><text x="38.1903%" y="415.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (54 samples, 2.41%)</title><rect x="38.6982%" y="389" width="2.4075%" height="15" fill="rgb(229,146,28)" fg:x="868" fg:w="54"/><text x="38.9482%" y="399.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (12 samples, 0.53%)</title><rect x="40.5707%" y="373" width="0.5350%" height="15" fill="rgb(225,31,38)" fg:x="910" fg:w="12"/><text x="40.8207%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Literal&gt; (3 samples, 0.13%)</title><rect x="40.9719%" y="357" width="0.1337%" height="15" fill="rgb(250,208,3)" fg:x="919" fg:w="3"/><text x="41.2219%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (140 samples, 6.24%)</title><rect x="34.9086%" y="469" width="6.2416%" height="15" fill="rgb(246,54,23)" fg:x="783" fg:w="140"/><text x="35.1586%" y="479.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (106 samples, 4.73%)</title><rect x="36.4244%" y="453" width="4.7258%" height="15" fill="rgb(243,76,11)" fg:x="817" fg:w="106"/><text x="36.6744%" y="463.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rlox::parser::Expression&gt;&gt; (72 samples, 3.21%)</title><rect x="37.9403%" y="437" width="3.2100%" height="15" fill="rgb(245,21,50)" fg:x="851" fg:w="72"/><text x="38.1903%" y="447.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rlox::parser::Expression&gt;&gt; (1 samples, 0.04%)</title><rect x="41.1057%" y="421" width="0.0446%" height="15" fill="rgb(228,9,43)" fg:x="922" fg:w="1"/><text x="41.3557%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="41.1057%" y="405" width="0.0446%" height="15" fill="rgb(208,100,47)" fg:x="922" fg:w="1"/><text x="41.3557%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="41.1057%" y="389" width="0.0446%" height="15" fill="rgb(232,26,8)" fg:x="922" fg:w="1"/><text x="41.3557%" y="399.50"></text></g><g><title>_int_free (5 samples, 0.22%)</title><rect x="41.4177%" y="437" width="0.2229%" height="15" fill="rgb(216,166,38)" fg:x="929" fg:w="5"/><text x="41.6677%" y="447.50"></text></g><g><title>__GI___libc_free (10 samples, 0.45%)</title><rect x="41.2394%" y="453" width="0.4458%" height="15" fill="rgb(251,202,51)" fg:x="925" fg:w="10"/><text x="41.4894%" y="463.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="41.6407%" y="437" width="0.0446%" height="15" fill="rgb(254,216,34)" fg:x="934" fg:w="1"/><text x="41.8907%" y="447.50"></text></g><g><title>__GI___libc_free (4 samples, 0.18%)</title><rect x="41.6852%" y="437" width="0.1783%" height="15" fill="rgb(251,32,27)" fg:x="935" fg:w="4"/><text x="41.9352%" y="447.50"></text></g><g><title>_int_free (2 samples, 0.09%)</title><rect x="41.7744%" y="421" width="0.0892%" height="15" fill="rgb(208,127,28)" fg:x="937" fg:w="2"/><text x="42.0244%" y="431.50"></text></g><g><title>_int_free (7 samples, 0.31%)</title><rect x="41.9973%" y="341" width="0.3121%" height="15" fill="rgb(224,137,22)" fg:x="942" fg:w="7"/><text x="42.2473%" y="351.50"></text></g><g><title>tcache_put (1 samples, 0.04%)</title><rect x="42.2648%" y="325" width="0.0446%" height="15" fill="rgb(254,70,32)" fg:x="948" fg:w="1"/><text x="42.5148%" y="335.50"></text></g><g><title>alloc::alloc::box_free (11 samples, 0.49%)</title><rect x="41.8636%" y="437" width="0.4904%" height="15" fill="rgb(229,75,37)" fg:x="939" fg:w="11"/><text x="42.1136%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.49%)</title><rect x="41.8636%" y="421" width="0.4904%" height="15" fill="rgb(252,64,23)" fg:x="939" fg:w="11"/><text x="42.1136%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.49%)</title><rect x="41.8636%" y="405" width="0.4904%" height="15" fill="rgb(232,162,48)" fg:x="939" fg:w="11"/><text x="42.1136%" y="415.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.49%)</title><rect x="41.8636%" y="389" width="0.4904%" height="15" fill="rgb(246,160,12)" fg:x="939" fg:w="11"/><text x="42.1136%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11 samples, 0.49%)</title><rect x="41.8636%" y="373" width="0.4904%" height="15" fill="rgb(247,166,0)" fg:x="939" fg:w="11"/><text x="42.1136%" y="383.50"></text></g><g><title>__GI___libc_free (11 samples, 0.49%)</title><rect x="41.8636%" y="357" width="0.4904%" height="15" fill="rgb(249,219,21)" fg:x="939" fg:w="11"/><text x="42.1136%" y="367.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="42.3094%" y="341" width="0.0446%" height="15" fill="rgb(205,209,3)" fg:x="949" fg:w="1"/><text x="42.5594%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;rlox::parser::Stmt&gt;&gt; (17 samples, 0.76%)</title><rect x="41.6852%" y="453" width="0.7579%" height="15" fill="rgb(243,44,1)" fg:x="935" fg:w="17"/><text x="41.9352%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Stmt&gt; (2 samples, 0.09%)</title><rect x="42.3540%" y="437" width="0.0892%" height="15" fill="rgb(206,159,16)" fg:x="950" fg:w="2"/><text x="42.6040%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rlox::parser::Stmt&gt;&gt; (1 samples, 0.04%)</title><rect x="42.3986%" y="421" width="0.0446%" height="15" fill="rgb(244,77,30)" fg:x="951" fg:w="1"/><text x="42.6486%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rlox::parser::Stmt&gt;&gt; (1 samples, 0.04%)</title><rect x="42.3986%" y="405" width="0.0446%" height="15" fill="rgb(218,69,12)" fg:x="951" fg:w="1"/><text x="42.6486%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="42.3986%" y="389" width="0.0446%" height="15" fill="rgb(212,87,7)" fg:x="951" fg:w="1"/><text x="42.6486%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="42.3986%" y="373" width="0.0446%" height="15" fill="rgb(245,114,25)" fg:x="951" fg:w="1"/><text x="42.6486%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;rlox::parser::Expression&gt;&gt; (1 samples, 0.04%)</title><rect x="42.4432%" y="453" width="0.0446%" height="15" fill="rgb(210,61,42)" fg:x="952" fg:w="1"/><text x="42.6932%" y="463.50"></text></g><g><title>_int_free (9 samples, 0.40%)</title><rect x="42.7998%" y="421" width="0.4012%" height="15" fill="rgb(211,52,33)" fg:x="960" fg:w="9"/><text x="43.0498%" y="431.50"></text></g><g><title>__GI___libc_free (15 samples, 0.67%)</title><rect x="42.6215%" y="437" width="0.6687%" height="15" fill="rgb(234,58,33)" fg:x="956" fg:w="15"/><text x="42.8715%" y="447.50"></text></g><g><title>arena_for_chunk (2 samples, 0.09%)</title><rect x="43.2011%" y="421" width="0.0892%" height="15" fill="rgb(220,115,36)" fg:x="969" fg:w="2"/><text x="43.4511%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::interpreter::LoxCallable&gt; (237 samples, 10.57%)</title><rect x="32.9469%" y="549" width="10.5662%" height="15" fill="rgb(243,153,54)" fg:x="739" fg:w="237"/><text x="33.1969%" y="559.50">core::ptr::drop..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::interpreter::LoxFunction&gt; (237 samples, 10.57%)</title><rect x="32.9469%" y="533" width="10.5662%" height="15" fill="rgb(251,47,18)" fg:x="739" fg:w="237"/><text x="33.1969%" y="543.50">core::ptr::drop..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rlox::parser::Stmt&gt;&gt; (204 samples, 9.09%)</title><rect x="34.4182%" y="517" width="9.0950%" height="15" fill="rgb(242,102,42)" fg:x="772" fg:w="204"/><text x="34.6682%" y="527.50">core::ptr::dr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (204 samples, 9.09%)</title><rect x="34.4182%" y="501" width="9.0950%" height="15" fill="rgb(234,31,38)" fg:x="772" fg:w="204"/><text x="34.6682%" y="511.50">&lt;alloc::vec::..</text></g><g><title>core::ptr::drop_in_place&lt;[rlox::parser::Stmt]&gt; (204 samples, 9.09%)</title><rect x="34.4182%" y="485" width="9.0950%" height="15" fill="rgb(221,117,51)" fg:x="772" fg:w="204"/><text x="34.6682%" y="495.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Stmt&gt; (53 samples, 2.36%)</title><rect x="41.1502%" y="469" width="2.3629%" height="15" fill="rgb(212,20,18)" fg:x="923" fg:w="53"/><text x="41.4002%" y="479.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (23 samples, 1.03%)</title><rect x="42.4877%" y="453" width="1.0254%" height="15" fill="rgb(245,133,36)" fg:x="953" fg:w="23"/><text x="42.7377%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (5 samples, 0.22%)</title><rect x="43.2902%" y="437" width="0.2229%" height="15" fill="rgb(212,6,19)" fg:x="971" fg:w="5"/><text x="43.5402%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Literal&gt; (2 samples, 0.09%)</title><rect x="43.4240%" y="421" width="0.0892%" height="15" fill="rgb(218,1,36)" fg:x="974" fg:w="2"/><text x="43.6740%" y="431.50"></text></g><g><title>rlox::interpreter::LoxCallable::arity (1 samples, 0.04%)</title><rect x="43.5132%" y="549" width="0.0446%" height="15" fill="rgb(246,84,54)" fg:x="976" fg:w="1"/><text x="43.7632%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.18%)</title><rect x="43.6915%" y="421" width="0.1783%" height="15" fill="rgb(242,110,6)" fg:x="980" fg:w="4"/><text x="43.9415%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.18%)</title><rect x="43.6915%" y="405" width="0.1783%" height="15" fill="rgb(214,47,5)" fg:x="980" fg:w="4"/><text x="43.9415%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.18%)</title><rect x="43.6915%" y="389" width="0.1783%" height="15" fill="rgb(218,159,25)" fg:x="980" fg:w="4"/><text x="43.9415%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.18%)</title><rect x="43.6915%" y="373" width="0.1783%" height="15" fill="rgb(215,211,28)" fg:x="980" fg:w="4"/><text x="43.9415%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.18%)</title><rect x="43.6915%" y="357" width="0.1783%" height="15" fill="rgb(238,59,32)" fg:x="980" fg:w="4"/><text x="43.9415%" y="367.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.18%)</title><rect x="43.6915%" y="341" width="0.1783%" height="15" fill="rgb(226,82,3)" fg:x="980" fg:w="4"/><text x="43.9415%" y="351.50"></text></g><g><title>__rdl_alloc (4 samples, 0.18%)</title><rect x="43.6915%" y="325" width="0.1783%" height="15" fill="rgb(240,164,32)" fg:x="980" fg:w="4"/><text x="43.9415%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.18%)</title><rect x="43.6915%" y="309" width="0.1783%" height="15" fill="rgb(232,46,7)" fg:x="980" fg:w="4"/><text x="43.9415%" y="319.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.18%)</title><rect x="43.6915%" y="293" width="0.1783%" height="15" fill="rgb(229,129,53)" fg:x="980" fg:w="4"/><text x="43.9415%" y="303.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="43.8252%" y="277" width="0.0446%" height="15" fill="rgb(234,188,29)" fg:x="983" fg:w="1"/><text x="44.0752%" y="287.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (5 samples, 0.22%)</title><rect x="43.6915%" y="533" width="0.2229%" height="15" fill="rgb(246,141,4)" fg:x="980" fg:w="5"/><text x="43.9415%" y="543.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (5 samples, 0.22%)</title><rect x="43.6915%" y="517" width="0.2229%" height="15" fill="rgb(229,23,39)" fg:x="980" fg:w="5"/><text x="43.9415%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.22%)</title><rect x="43.6915%" y="501" width="0.2229%" height="15" fill="rgb(206,12,3)" fg:x="980" fg:w="5"/><text x="43.9415%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.22%)</title><rect x="43.6915%" y="485" width="0.2229%" height="15" fill="rgb(252,226,20)" fg:x="980" fg:w="5"/><text x="43.9415%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.22%)</title><rect x="43.6915%" y="469" width="0.2229%" height="15" fill="rgb(216,123,35)" fg:x="980" fg:w="5"/><text x="43.9415%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.22%)</title><rect x="43.6915%" y="453" width="0.2229%" height="15" fill="rgb(212,68,40)" fg:x="980" fg:w="5"/><text x="43.9415%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.22%)</title><rect x="43.6915%" y="437" width="0.2229%" height="15" fill="rgb(254,125,32)" fg:x="980" fg:w="5"/><text x="43.9415%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.04%)</title><rect x="43.8698%" y="421" width="0.0446%" height="15" fill="rgb(253,97,22)" fg:x="984" fg:w="1"/><text x="44.1198%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="43.8698%" y="405" width="0.0446%" height="15" fill="rgb(241,101,14)" fg:x="984" fg:w="1"/><text x="44.1198%" y="415.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.04%)</title><rect x="43.8698%" y="389" width="0.0446%" height="15" fill="rgb(238,103,29)" fg:x="984" fg:w="1"/><text x="44.1198%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.40%)</title><rect x="43.9144%" y="533" width="0.4012%" height="15" fill="rgb(233,195,47)" fg:x="985" fg:w="9"/><text x="44.1644%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (9 samples, 0.40%)</title><rect x="43.9144%" y="517" width="0.4012%" height="15" fill="rgb(246,218,30)" fg:x="985" fg:w="9"/><text x="44.1644%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_add (9 samples, 0.40%)</title><rect x="43.9144%" y="501" width="0.4012%" height="15" fill="rgb(219,145,47)" fg:x="985" fg:w="9"/><text x="44.1644%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="44.9398%" y="341" width="0.0446%" height="15" fill="rgb(243,12,26)" fg:x="1008" fg:w="1"/><text x="45.1898%" y="351.50"></text></g><g><title>&lt;rlox::parser::Stmt as core::clone::Clone&gt;::clone (26 samples, 1.16%)</title><rect x="44.9844%" y="341" width="1.1592%" height="15" fill="rgb(214,87,16)" fg:x="1009" fg:w="26"/><text x="45.2344%" y="351.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (12 samples, 0.53%)</title><rect x="45.6086%" y="325" width="0.5350%" height="15" fill="rgb(208,99,42)" fg:x="1023" fg:w="12"/><text x="45.8586%" y="335.50"></text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (3 samples, 0.13%)</title><rect x="46.0098%" y="309" width="0.1337%" height="15" fill="rgb(253,99,2)" fg:x="1032" fg:w="3"/><text x="46.2598%" y="319.50"></text></g><g><title>&lt;rlox::parser::Literal as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="46.0990%" y="293" width="0.0446%" height="15" fill="rgb(220,168,23)" fg:x="1034" fg:w="1"/><text x="46.3490%" y="303.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="46.2773%" y="197" width="0.0446%" height="15" fill="rgb(242,38,24)" fg:x="1038" fg:w="1"/><text x="46.5273%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.31%)</title><rect x="46.1436%" y="341" width="0.3121%" height="15" fill="rgb(225,182,9)" fg:x="1035" fg:w="7"/><text x="46.3936%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.31%)</title><rect x="46.1436%" y="325" width="0.3121%" height="15" fill="rgb(243,178,37)" fg:x="1035" fg:w="7"/><text x="46.3936%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.31%)</title><rect x="46.1436%" y="309" width="0.3121%" height="15" fill="rgb(232,139,19)" fg:x="1035" fg:w="7"/><text x="46.3936%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.27%)</title><rect x="46.1881%" y="293" width="0.2675%" height="15" fill="rgb(225,201,24)" fg:x="1036" fg:w="6"/><text x="46.4381%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.27%)</title><rect x="46.1881%" y="277" width="0.2675%" height="15" fill="rgb(221,47,46)" fg:x="1036" fg:w="6"/><text x="46.4381%" y="287.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.27%)</title><rect x="46.1881%" y="261" width="0.2675%" height="15" fill="rgb(249,23,13)" fg:x="1036" fg:w="6"/><text x="46.4381%" y="271.50"></text></g><g><title>__rdl_alloc (6 samples, 0.27%)</title><rect x="46.1881%" y="245" width="0.2675%" height="15" fill="rgb(219,9,5)" fg:x="1036" fg:w="6"/><text x="46.4381%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.27%)</title><rect x="46.1881%" y="229" width="0.2675%" height="15" fill="rgb(254,171,16)" fg:x="1036" fg:w="6"/><text x="46.4381%" y="239.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.27%)</title><rect x="46.1881%" y="213" width="0.2675%" height="15" fill="rgb(230,171,20)" fg:x="1036" fg:w="6"/><text x="46.4381%" y="223.50"></text></g><g><title>tcache_get (3 samples, 0.13%)</title><rect x="46.3219%" y="197" width="0.1337%" height="15" fill="rgb(210,71,41)" fg:x="1039" fg:w="3"/><text x="46.5719%" y="207.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (52 samples, 2.32%)</title><rect x="44.8506%" y="437" width="2.3183%" height="15" fill="rgb(206,173,20)" fg:x="1006" fg:w="52"/><text x="45.1006%" y="447.50">&lt;..</text></g><g><title>&lt;rlox::parser::Stmt as core::clone::Clone&gt;::clone (52 samples, 2.32%)</title><rect x="44.8506%" y="421" width="2.3183%" height="15" fill="rgb(233,88,34)" fg:x="1006" fg:w="52"/><text x="45.1006%" y="431.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (50 samples, 2.23%)</title><rect x="44.9398%" y="405" width="2.2292%" height="15" fill="rgb(223,209,46)" fg:x="1008" fg:w="50"/><text x="45.1898%" y="415.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (50 samples, 2.23%)</title><rect x="44.9398%" y="389" width="2.2292%" height="15" fill="rgb(250,43,18)" fg:x="1008" fg:w="50"/><text x="45.1898%" y="399.50">a..</text></g><g><title>alloc::slice::hack::to_vec (50 samples, 2.23%)</title><rect x="44.9398%" y="373" width="2.2292%" height="15" fill="rgb(208,13,10)" fg:x="1008" fg:w="50"/><text x="45.1898%" y="383.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (50 samples, 2.23%)</title><rect x="44.9398%" y="357" width="2.2292%" height="15" fill="rgb(212,200,36)" fg:x="1008" fg:w="50"/><text x="45.1898%" y="367.50">&lt;..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (16 samples, 0.71%)</title><rect x="46.4556%" y="341" width="0.7133%" height="15" fill="rgb(225,90,30)" fg:x="1042" fg:w="16"/><text x="46.7056%" y="351.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (54 samples, 2.41%)</title><rect x="44.8506%" y="453" width="2.4075%" height="15" fill="rgb(236,182,39)" fg:x="1006" fg:w="54"/><text x="45.1006%" y="463.50">&lt;a..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (2 samples, 0.09%)</title><rect x="47.1690%" y="437" width="0.0892%" height="15" fill="rgb(212,144,35)" fg:x="1058" fg:w="2"/><text x="47.4190%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (2 samples, 0.09%)</title><rect x="47.1690%" y="421" width="0.0892%" height="15" fill="rgb(228,63,44)" fg:x="1058" fg:w="2"/><text x="47.4190%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.09%)</title><rect x="47.1690%" y="405" width="0.0892%" height="15" fill="rgb(228,109,6)" fg:x="1058" fg:w="2"/><text x="47.4190%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.09%)</title><rect x="47.1690%" y="389" width="0.0892%" height="15" fill="rgb(238,117,24)" fg:x="1058" fg:w="2"/><text x="47.4190%" y="399.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.09%)</title><rect x="47.1690%" y="373" width="0.0892%" height="15" fill="rgb(242,26,26)" fg:x="1058" fg:w="2"/><text x="47.4190%" y="383.50"></text></g><g><title>__rdl_alloc (2 samples, 0.09%)</title><rect x="47.1690%" y="357" width="0.0892%" height="15" fill="rgb(221,92,48)" fg:x="1058" fg:w="2"/><text x="47.4190%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.09%)</title><rect x="47.1690%" y="341" width="0.0892%" height="15" fill="rgb(209,209,32)" fg:x="1058" fg:w="2"/><text x="47.4190%" y="351.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.09%)</title><rect x="47.1690%" y="325" width="0.0892%" height="15" fill="rgb(221,70,22)" fg:x="1058" fg:w="2"/><text x="47.4190%" y="335.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="47.2136%" y="309" width="0.0446%" height="15" fill="rgb(248,145,5)" fg:x="1059" fg:w="1"/><text x="47.4636%" y="319.50"></text></g><g><title>_int_malloc (7 samples, 0.31%)</title><rect x="48.5956%" y="293" width="0.3121%" height="15" fill="rgb(226,116,26)" fg:x="1090" fg:w="7"/><text x="48.8456%" y="303.50"></text></g><g><title>tcache_put (1 samples, 0.04%)</title><rect x="48.8631%" y="277" width="0.0446%" height="15" fill="rgb(244,5,17)" fg:x="1096" fg:w="1"/><text x="49.1131%" y="287.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="48.9077%" y="293" width="0.0446%" height="15" fill="rgb(252,159,33)" fg:x="1097" fg:w="1"/><text x="49.1577%" y="303.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.49%)</title><rect x="48.5065%" y="309" width="0.4904%" height="15" fill="rgb(206,71,0)" fg:x="1088" fg:w="11"/><text x="48.7565%" y="319.50"></text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="48.9523%" y="293" width="0.0446%" height="15" fill="rgb(233,118,54)" fg:x="1098" fg:w="1"/><text x="49.2023%" y="303.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (24 samples, 1.07%)</title><rect x="48.0160%" y="357" width="1.0700%" height="15" fill="rgb(234,83,48)" fg:x="1077" fg:w="24"/><text x="48.2660%" y="367.50"></text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (23 samples, 1.03%)</title><rect x="48.0606%" y="341" width="1.0254%" height="15" fill="rgb(228,3,54)" fg:x="1078" fg:w="23"/><text x="48.3106%" y="351.50"></text></g><g><title>&lt;rlox::parser::Literal as core::clone::Clone&gt;::clone (19 samples, 0.85%)</title><rect x="48.2390%" y="325" width="0.8471%" height="15" fill="rgb(226,155,13)" fg:x="1082" fg:w="19"/><text x="48.4890%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (2 samples, 0.09%)</title><rect x="48.9969%" y="309" width="0.0892%" height="15" fill="rgb(241,28,37)" fg:x="1099" fg:w="2"/><text x="49.2469%" y="319.50"></text></g><g><title>_int_malloc (11 samples, 0.49%)</title><rect x="49.3535%" y="229" width="0.4904%" height="15" fill="rgb(233,93,10)" fg:x="1107" fg:w="11"/><text x="49.6035%" y="239.50"></text></g><g><title>tcache_put (6 samples, 0.27%)</title><rect x="49.5765%" y="213" width="0.2675%" height="15" fill="rgb(225,113,19)" fg:x="1112" fg:w="6"/><text x="49.8265%" y="223.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="49.8440%" y="229" width="0.0446%" height="15" fill="rgb(241,2,18)" fg:x="1118" fg:w="1"/><text x="50.0940%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (46 samples, 2.05%)</title><rect x="48.0160%" y="373" width="2.0508%" height="15" fill="rgb(228,207,21)" fg:x="1077" fg:w="46"/><text x="48.2660%" y="383.50">&lt;..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (22 samples, 0.98%)</title><rect x="49.0860%" y="357" width="0.9808%" height="15" fill="rgb(213,211,35)" fg:x="1101" fg:w="22"/><text x="49.3360%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (22 samples, 0.98%)</title><rect x="49.0860%" y="341" width="0.9808%" height="15" fill="rgb(209,83,10)" fg:x="1101" fg:w="22"/><text x="49.3360%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.98%)</title><rect x="49.0860%" y="325" width="0.9808%" height="15" fill="rgb(209,164,1)" fg:x="1101" fg:w="22"/><text x="49.3360%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.98%)</title><rect x="49.0860%" y="309" width="0.9808%" height="15" fill="rgb(213,184,43)" fg:x="1101" fg:w="22"/><text x="49.3360%" y="319.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.98%)</title><rect x="49.0860%" y="293" width="0.9808%" height="15" fill="rgb(231,61,34)" fg:x="1101" fg:w="22"/><text x="49.3360%" y="303.50"></text></g><g><title>__rdl_alloc (22 samples, 0.98%)</title><rect x="49.0860%" y="277" width="0.9808%" height="15" fill="rgb(235,75,3)" fg:x="1101" fg:w="22"/><text x="49.3360%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (22 samples, 0.98%)</title><rect x="49.0860%" y="261" width="0.9808%" height="15" fill="rgb(220,106,47)" fg:x="1101" fg:w="22"/><text x="49.3360%" y="271.50"></text></g><g><title>__GI___libc_malloc (22 samples, 0.98%)</title><rect x="49.0860%" y="245" width="0.9808%" height="15" fill="rgb(210,196,33)" fg:x="1101" fg:w="22"/><text x="49.3360%" y="255.50"></text></g><g><title>tcache_get (4 samples, 0.18%)</title><rect x="49.8885%" y="229" width="0.1783%" height="15" fill="rgb(229,154,42)" fg:x="1119" fg:w="4"/><text x="50.1385%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="50.1115%" y="309" width="0.0446%" height="15" fill="rgb(228,114,26)" fg:x="1124" fg:w="1"/><text x="50.3615%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="50.1115%" y="293" width="0.0446%" height="15" fill="rgb(208,144,1)" fg:x="1124" fg:w="1"/><text x="50.3615%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="50.1115%" y="277" width="0.0446%" height="15" fill="rgb(239,112,37)" fg:x="1124" fg:w="1"/><text x="50.3615%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.09%)</title><rect x="50.7802%" y="229" width="0.0892%" height="15" fill="rgb(210,96,50)" fg:x="1139" fg:w="2"/><text x="51.0302%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.09%)</title><rect x="50.7802%" y="213" width="0.0892%" height="15" fill="rgb(222,178,2)" fg:x="1139" fg:w="2"/><text x="51.0302%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.09%)</title><rect x="50.7802%" y="197" width="0.0892%" height="15" fill="rgb(226,74,18)" fg:x="1139" fg:w="2"/><text x="51.0302%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.09%)</title><rect x="50.7802%" y="181" width="0.0892%" height="15" fill="rgb(225,67,54)" fg:x="1139" fg:w="2"/><text x="51.0302%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.09%)</title><rect x="50.7802%" y="165" width="0.0892%" height="15" fill="rgb(251,92,32)" fg:x="1139" fg:w="2"/><text x="51.0302%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.09%)</title><rect x="50.7802%" y="149" width="0.0892%" height="15" fill="rgb(228,149,22)" fg:x="1139" fg:w="2"/><text x="51.0302%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.09%)</title><rect x="50.7802%" y="133" width="0.0892%" height="15" fill="rgb(243,54,13)" fg:x="1139" fg:w="2"/><text x="51.0302%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.09%)</title><rect x="50.7802%" y="117" width="0.0892%" height="15" fill="rgb(243,180,28)" fg:x="1139" fg:w="2"/><text x="51.0302%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.09%)</title><rect x="50.7802%" y="101" width="0.0892%" height="15" fill="rgb(208,167,24)" fg:x="1139" fg:w="2"/><text x="51.0302%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.09%)</title><rect x="50.7802%" y="85" width="0.0892%" height="15" fill="rgb(245,73,45)" fg:x="1139" fg:w="2"/><text x="51.0302%" y="95.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.09%)</title><rect x="50.7802%" y="69" width="0.0892%" height="15" fill="rgb(237,203,48)" fg:x="1139" fg:w="2"/><text x="51.0302%" y="79.50"></text></g><g><title>__rdl_alloc (2 samples, 0.09%)</title><rect x="50.7802%" y="53" width="0.0892%" height="15" fill="rgb(211,197,16)" fg:x="1139" fg:w="2"/><text x="51.0302%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.09%)</title><rect x="50.7802%" y="37" width="0.0892%" height="15" fill="rgb(243,99,51)" fg:x="1139" fg:w="2"/><text x="51.0302%" y="47.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.31%)</title><rect x="50.8694%" y="229" width="0.3121%" height="15" fill="rgb(215,123,29)" fg:x="1141" fg:w="7"/><text x="51.1194%" y="239.50"></text></g><g><title>tcache_get (2 samples, 0.09%)</title><rect x="51.0923%" y="213" width="0.0892%" height="15" fill="rgb(239,186,37)" fg:x="1146" fg:w="2"/><text x="51.3423%" y="223.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (20 samples, 0.89%)</title><rect x="50.3344%" y="277" width="0.8917%" height="15" fill="rgb(252,136,39)" fg:x="1129" fg:w="20"/><text x="50.5844%" y="287.50"></text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (19 samples, 0.85%)</title><rect x="50.3790%" y="261" width="0.8471%" height="15" fill="rgb(223,213,32)" fg:x="1130" fg:w="19"/><text x="50.6290%" y="271.50"></text></g><g><title>&lt;rlox::parser::Literal as core::clone::Clone&gt;::clone (15 samples, 0.67%)</title><rect x="50.5573%" y="245" width="0.6687%" height="15" fill="rgb(233,115,5)" fg:x="1134" fg:w="15"/><text x="50.8073%" y="255.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.04%)</title><rect x="51.1815%" y="229" width="0.0446%" height="15" fill="rgb(207,226,44)" fg:x="1148" fg:w="1"/><text x="51.4315%" y="239.50"></text></g><g><title>_int_malloc (33 samples, 1.47%)</title><rect x="51.7165%" y="149" width="1.4712%" height="15" fill="rgb(208,126,0)" fg:x="1160" fg:w="33"/><text x="51.9665%" y="159.50"></text></g><g><title>tcache_put (5 samples, 0.22%)</title><rect x="52.9648%" y="133" width="0.2229%" height="15" fill="rgb(244,66,21)" fg:x="1188" fg:w="5"/><text x="53.2148%" y="143.50"></text></g><g><title>arena_for_chunk (2 samples, 0.09%)</title><rect x="53.1877%" y="149" width="0.0892%" height="15" fill="rgb(222,97,12)" fg:x="1193" fg:w="2"/><text x="53.4377%" y="159.50"></text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (73 samples, 3.25%)</title><rect x="50.1560%" y="309" width="3.2546%" height="15" fill="rgb(219,213,19)" fg:x="1125" fg:w="73"/><text x="50.4060%" y="319.50">&lt;rl..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (69 samples, 3.08%)</title><rect x="50.3344%" y="293" width="3.0762%" height="15" fill="rgb(252,169,30)" fg:x="1129" fg:w="69"/><text x="50.5844%" y="303.50">&lt;al..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (49 samples, 2.18%)</title><rect x="51.2260%" y="277" width="2.1846%" height="15" fill="rgb(206,32,51)" fg:x="1149" fg:w="49"/><text x="51.4760%" y="287.50">a..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (49 samples, 2.18%)</title><rect x="51.2260%" y="261" width="2.1846%" height="15" fill="rgb(250,172,42)" fg:x="1149" fg:w="49"/><text x="51.4760%" y="271.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49 samples, 2.18%)</title><rect x="51.2260%" y="245" width="2.1846%" height="15" fill="rgb(209,34,43)" fg:x="1149" fg:w="49"/><text x="51.4760%" y="255.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (49 samples, 2.18%)</title><rect x="51.2260%" y="229" width="2.1846%" height="15" fill="rgb(223,11,35)" fg:x="1149" fg:w="49"/><text x="51.4760%" y="239.50">a..</text></g><g><title>alloc::alloc::alloc (49 samples, 2.18%)</title><rect x="51.2260%" y="213" width="2.1846%" height="15" fill="rgb(251,219,26)" fg:x="1149" fg:w="49"/><text x="51.4760%" y="223.50">a..</text></g><g><title>__rdl_alloc (49 samples, 2.18%)</title><rect x="51.2260%" y="197" width="2.1846%" height="15" fill="rgb(231,119,3)" fg:x="1149" fg:w="49"/><text x="51.4760%" y="207.50">_..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (49 samples, 2.18%)</title><rect x="51.2260%" y="181" width="2.1846%" height="15" fill="rgb(216,97,11)" fg:x="1149" fg:w="49"/><text x="51.4760%" y="191.50">s..</text></g><g><title>__GI___libc_malloc (49 samples, 2.18%)</title><rect x="51.2260%" y="165" width="2.1846%" height="15" fill="rgb(223,59,9)" fg:x="1149" fg:w="49"/><text x="51.4760%" y="175.50">_..</text></g><g><title>checked_request2size (3 samples, 0.13%)</title><rect x="53.2769%" y="149" width="0.1337%" height="15" fill="rgb(233,93,31)" fg:x="1195" fg:w="3"/><text x="53.5269%" y="159.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="53.6781%" y="165" width="0.0446%" height="15" fill="rgb(239,81,33)" fg:x="1204" fg:w="1"/><text x="53.9281%" y="175.50"></text></g><g><title>__rdl_alloc (5 samples, 0.22%)</title><rect x="53.5444%" y="213" width="0.2229%" height="15" fill="rgb(213,120,34)" fg:x="1201" fg:w="5"/><text x="53.7944%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.22%)</title><rect x="53.5444%" y="197" width="0.2229%" height="15" fill="rgb(243,49,53)" fg:x="1201" fg:w="5"/><text x="53.7944%" y="207.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.18%)</title><rect x="53.5889%" y="181" width="0.1783%" height="15" fill="rgb(247,216,33)" fg:x="1202" fg:w="4"/><text x="53.8389%" y="191.50"></text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="53.7227%" y="165" width="0.0446%" height="15" fill="rgb(226,26,14)" fg:x="1205" fg:w="1"/><text x="53.9727%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.40%)</title><rect x="53.4998%" y="261" width="0.4012%" height="15" fill="rgb(215,49,53)" fg:x="1200" fg:w="9"/><text x="53.7498%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.40%)</title><rect x="53.4998%" y="245" width="0.4012%" height="15" fill="rgb(245,162,40)" fg:x="1200" fg:w="9"/><text x="53.7498%" y="255.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.36%)</title><rect x="53.5444%" y="229" width="0.3567%" height="15" fill="rgb(229,68,17)" fg:x="1201" fg:w="8"/><text x="53.7944%" y="239.50"></text></g><g><title>core::ptr::read_volatile (3 samples, 0.13%)</title><rect x="53.7673%" y="213" width="0.1337%" height="15" fill="rgb(213,182,10)" fg:x="1206" fg:w="3"/><text x="54.0173%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.58%)</title><rect x="53.4106%" y="309" width="0.5796%" height="15" fill="rgb(245,125,30)" fg:x="1198" fg:w="13"/><text x="53.6606%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.58%)</title><rect x="53.4106%" y="293" width="0.5796%" height="15" fill="rgb(232,202,2)" fg:x="1198" fg:w="13"/><text x="53.6606%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.58%)</title><rect x="53.4106%" y="277" width="0.5796%" height="15" fill="rgb(237,140,51)" fg:x="1198" fg:w="13"/><text x="53.6606%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.09%)</title><rect x="53.9010%" y="261" width="0.0892%" height="15" fill="rgb(236,157,25)" fg:x="1209" fg:w="2"/><text x="54.1510%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.09%)</title><rect x="53.9010%" y="245" width="0.0892%" height="15" fill="rgb(219,209,0)" fg:x="1209" fg:w="2"/><text x="54.1510%" y="255.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (159 samples, 7.09%)</title><rect x="47.8377%" y="405" width="7.0887%" height="15" fill="rgb(240,116,54)" fg:x="1073" fg:w="159"/><text x="48.0877%" y="415.50">&lt;T as allo..</text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (159 samples, 7.09%)</title><rect x="47.8377%" y="389" width="7.0887%" height="15" fill="rgb(216,10,36)" fg:x="1073" fg:w="159"/><text x="48.0877%" y="399.50">&lt;rlox::par..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (109 samples, 4.86%)</title><rect x="50.0669%" y="373" width="4.8596%" height="15" fill="rgb(222,72,44)" fg:x="1123" fg:w="109"/><text x="50.3169%" y="383.50">&lt;alloc..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (109 samples, 4.86%)</title><rect x="50.0669%" y="357" width="4.8596%" height="15" fill="rgb(232,159,9)" fg:x="1123" fg:w="109"/><text x="50.3169%" y="367.50">alloc:..</text></g><g><title>alloc::slice::hack::to_vec (109 samples, 4.86%)</title><rect x="50.0669%" y="341" width="4.8596%" height="15" fill="rgb(210,39,32)" fg:x="1123" fg:w="109"/><text x="50.3169%" y="351.50">alloc:..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (109 samples, 4.86%)</title><rect x="50.0669%" y="325" width="4.8596%" height="15" fill="rgb(216,194,45)" fg:x="1123" fg:w="109"/><text x="50.3169%" y="335.50">&lt;T as ..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (21 samples, 0.94%)</title><rect x="53.9902%" y="309" width="0.9362%" height="15" fill="rgb(218,18,35)" fg:x="1211" fg:w="21"/><text x="54.2402%" y="319.50"></text></g><g><title>checked_request2size (2 samples, 0.09%)</title><rect x="55.1494%" y="277" width="0.0892%" height="15" fill="rgb(207,83,51)" fg:x="1237" fg:w="2"/><text x="55.3994%" y="287.50"></text></g><g><title>__rdl_alloc (9 samples, 0.40%)</title><rect x="54.9264%" y="325" width="0.4012%" height="15" fill="rgb(225,63,43)" fg:x="1232" fg:w="9"/><text x="55.1764%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.40%)</title><rect x="54.9264%" y="309" width="0.4012%" height="15" fill="rgb(207,57,36)" fg:x="1232" fg:w="9"/><text x="55.1764%" y="319.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.40%)</title><rect x="54.9264%" y="293" width="0.4012%" height="15" fill="rgb(216,99,33)" fg:x="1232" fg:w="9"/><text x="55.1764%" y="303.50"></text></g><g><title>tcache_get (2 samples, 0.09%)</title><rect x="55.2385%" y="277" width="0.0892%" height="15" fill="rgb(225,42,16)" fg:x="1239" fg:w="2"/><text x="55.4885%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (182 samples, 8.11%)</title><rect x="47.2581%" y="453" width="8.1141%" height="15" fill="rgb(220,201,45)" fg:x="1060" fg:w="182"/><text x="47.5081%" y="463.50">&lt;core::opti..</text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (171 samples, 7.62%)</title><rect x="47.7486%" y="437" width="7.6237%" height="15" fill="rgb(225,33,4)" fg:x="1071" fg:w="171"/><text x="47.9986%" y="447.50">&lt;rlox::par..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (169 samples, 7.53%)</title><rect x="47.8377%" y="421" width="7.5346%" height="15" fill="rgb(224,33,50)" fg:x="1073" fg:w="169"/><text x="48.0877%" y="431.50">&lt;alloc::bo..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (10 samples, 0.45%)</title><rect x="54.9264%" y="405" width="0.4458%" height="15" fill="rgb(246,198,51)" fg:x="1232" fg:w="10"/><text x="55.1764%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (10 samples, 0.45%)</title><rect x="54.9264%" y="389" width="0.4458%" height="15" fill="rgb(205,22,4)" fg:x="1232" fg:w="10"/><text x="55.1764%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.45%)</title><rect x="54.9264%" y="373" width="0.4458%" height="15" fill="rgb(206,3,8)" fg:x="1232" fg:w="10"/><text x="55.1764%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.45%)</title><rect x="54.9264%" y="357" width="0.4458%" height="15" fill="rgb(251,23,15)" fg:x="1232" fg:w="10"/><text x="55.1764%" y="367.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.45%)</title><rect x="54.9264%" y="341" width="0.4458%" height="15" fill="rgb(252,88,28)" fg:x="1232" fg:w="10"/><text x="55.1764%" y="351.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.04%)</title><rect x="55.3277%" y="325" width="0.0446%" height="15" fill="rgb(212,127,14)" fg:x="1241" fg:w="1"/><text x="55.5777%" y="335.50"></text></g><g><title>checked_request2size (2 samples, 0.09%)</title><rect x="55.6844%" y="357" width="0.0892%" height="15" fill="rgb(247,145,37)" fg:x="1249" fg:w="2"/><text x="55.9344%" y="367.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.36%)</title><rect x="55.5952%" y="373" width="0.3567%" height="15" fill="rgb(209,117,53)" fg:x="1247" fg:w="8"/><text x="55.8452%" y="383.50"></text></g><g><title>tcache_get (4 samples, 0.18%)</title><rect x="55.7735%" y="357" width="0.1783%" height="15" fill="rgb(212,90,42)" fg:x="1251" fg:w="4"/><text x="56.0235%" y="367.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.04%)</title><rect x="55.9519%" y="373" width="0.0446%" height="15" fill="rgb(218,164,37)" fg:x="1255" fg:w="1"/><text x="56.2019%" y="383.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (14 samples, 0.62%)</title><rect x="55.4614%" y="421" width="0.6242%" height="15" fill="rgb(246,65,34)" fg:x="1244" fg:w="14"/><text x="55.7114%" y="431.50"></text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (13 samples, 0.58%)</title><rect x="55.5060%" y="405" width="0.5796%" height="15" fill="rgb(231,100,33)" fg:x="1245" fg:w="13"/><text x="55.7560%" y="415.50"></text></g><g><title>&lt;rlox::parser::Literal as core::clone::Clone&gt;::clone (11 samples, 0.49%)</title><rect x="55.5952%" y="389" width="0.4904%" height="15" fill="rgb(228,126,14)" fg:x="1247" fg:w="11"/><text x="55.8452%" y="399.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (2 samples, 0.09%)</title><rect x="55.9964%" y="373" width="0.0892%" height="15" fill="rgb(215,173,21)" fg:x="1256" fg:w="2"/><text x="56.2464%" y="383.50"></text></g><g><title>checked_request2size (3 samples, 0.13%)</title><rect x="56.2639%" y="293" width="0.1337%" height="15" fill="rgb(210,6,40)" fg:x="1262" fg:w="3"/><text x="56.5139%" y="303.50"></text></g><g><title>&lt;rlox::parser::Stmt as core::clone::Clone&gt;::clone (277 samples, 12.35%)</title><rect x="44.3156%" y="469" width="12.3495%" height="15" fill="rgb(212,48,18)" fg:x="994" fg:w="277"/><text x="44.5656%" y="479.50">&lt;rlox::parser::Stm..</text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (29 samples, 1.29%)</title><rect x="55.3723%" y="453" width="1.2929%" height="15" fill="rgb(230,214,11)" fg:x="1242" fg:w="29"/><text x="55.6223%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (27 samples, 1.20%)</title><rect x="55.4614%" y="437" width="1.2037%" height="15" fill="rgb(254,105,39)" fg:x="1244" fg:w="27"/><text x="55.7114%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (13 samples, 0.58%)</title><rect x="56.0856%" y="421" width="0.5796%" height="15" fill="rgb(245,158,5)" fg:x="1258" fg:w="13"/><text x="56.3356%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (13 samples, 0.58%)</title><rect x="56.0856%" y="405" width="0.5796%" height="15" fill="rgb(249,208,11)" fg:x="1258" fg:w="13"/><text x="56.3356%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.58%)</title><rect x="56.0856%" y="389" width="0.5796%" height="15" fill="rgb(210,39,28)" fg:x="1258" fg:w="13"/><text x="56.3356%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.58%)</title><rect x="56.0856%" y="373" width="0.5796%" height="15" fill="rgb(211,56,53)" fg:x="1258" fg:w="13"/><text x="56.3356%" y="383.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.58%)</title><rect x="56.0856%" y="357" width="0.5796%" height="15" fill="rgb(226,201,30)" fg:x="1258" fg:w="13"/><text x="56.3356%" y="367.50"></text></g><g><title>__rdl_alloc (13 samples, 0.58%)</title><rect x="56.0856%" y="341" width="0.5796%" height="15" fill="rgb(239,101,34)" fg:x="1258" fg:w="13"/><text x="56.3356%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (13 samples, 0.58%)</title><rect x="56.0856%" y="325" width="0.5796%" height="15" fill="rgb(226,209,5)" fg:x="1258" fg:w="13"/><text x="56.3356%" y="335.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.58%)</title><rect x="56.0856%" y="309" width="0.5796%" height="15" fill="rgb(250,105,47)" fg:x="1258" fg:w="13"/><text x="56.3356%" y="319.50"></text></g><g><title>tcache_get (6 samples, 0.27%)</title><rect x="56.3977%" y="293" width="0.2675%" height="15" fill="rgb(230,72,3)" fg:x="1265" fg:w="6"/><text x="56.6477%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.27%)</title><rect x="56.7543%" y="421" width="0.2675%" height="15" fill="rgb(232,218,39)" fg:x="1273" fg:w="6"/><text x="57.0043%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.27%)</title><rect x="56.7543%" y="405" width="0.2675%" height="15" fill="rgb(248,166,6)" fg:x="1273" fg:w="6"/><text x="57.0043%" y="415.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.27%)</title><rect x="56.7543%" y="389" width="0.2675%" height="15" fill="rgb(247,89,20)" fg:x="1273" fg:w="6"/><text x="57.0043%" y="399.50"></text></g><g><title>__rdl_alloc (6 samples, 0.27%)</title><rect x="56.7543%" y="373" width="0.2675%" height="15" fill="rgb(248,130,54)" fg:x="1273" fg:w="6"/><text x="57.0043%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.27%)</title><rect x="56.7543%" y="357" width="0.2675%" height="15" fill="rgb(234,196,4)" fg:x="1273" fg:w="6"/><text x="57.0043%" y="367.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.27%)</title><rect x="56.7543%" y="341" width="0.2675%" height="15" fill="rgb(250,143,31)" fg:x="1273" fg:w="6"/><text x="57.0043%" y="351.50"></text></g><g><title>_int_malloc (4 samples, 0.18%)</title><rect x="56.8435%" y="325" width="0.1783%" height="15" fill="rgb(211,110,34)" fg:x="1275" fg:w="4"/><text x="57.0935%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.40%)</title><rect x="56.6652%" y="469" width="0.4012%" height="15" fill="rgb(215,124,48)" fg:x="1271" fg:w="9"/><text x="56.9152%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.40%)</title><rect x="56.6652%" y="453" width="0.4012%" height="15" fill="rgb(216,46,13)" fg:x="1271" fg:w="9"/><text x="56.9152%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.40%)</title><rect x="56.6652%" y="437" width="0.4012%" height="15" fill="rgb(205,184,25)" fg:x="1271" fg:w="9"/><text x="56.9152%" y="447.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.04%)</title><rect x="57.0218%" y="421" width="0.0446%" height="15" fill="rgb(228,1,10)" fg:x="1279" fg:w="1"/><text x="57.2718%" y="431.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.04%)</title><rect x="57.0218%" y="405" width="0.0446%" height="15" fill="rgb(213,116,27)" fg:x="1279" fg:w="1"/><text x="57.2718%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (311 samples, 13.87%)</title><rect x="44.3156%" y="533" width="13.8654%" height="15" fill="rgb(241,95,50)" fg:x="994" fg:w="311"/><text x="44.5656%" y="543.50">&lt;alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (311 samples, 13.87%)</title><rect x="44.3156%" y="517" width="13.8654%" height="15" fill="rgb(238,48,32)" fg:x="994" fg:w="311"/><text x="44.5656%" y="527.50">alloc::slice::&lt;impl [..</text></g><g><title>alloc::slice::hack::to_vec (311 samples, 13.87%)</title><rect x="44.3156%" y="501" width="13.8654%" height="15" fill="rgb(235,113,49)" fg:x="994" fg:w="311"/><text x="44.5656%" y="511.50">alloc::slice::hack::t..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (311 samples, 13.87%)</title><rect x="44.3156%" y="485" width="13.8654%" height="15" fill="rgb(205,127,43)" fg:x="994" fg:w="311"/><text x="44.5656%" y="495.50">&lt;T as alloc::slice::h..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (25 samples, 1.11%)</title><rect x="57.0664%" y="469" width="1.1146%" height="15" fill="rgb(250,162,2)" fg:x="1280" fg:w="25"/><text x="57.3164%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.09%)</title><rect x="58.1810%" y="533" width="0.0892%" height="15" fill="rgb(220,13,41)" fg:x="1305" fg:w="2"/><text x="58.4310%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2 samples, 0.09%)</title><rect x="58.1810%" y="517" width="0.0892%" height="15" fill="rgb(249,221,25)" fg:x="1305" fg:w="2"/><text x="58.4310%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.09%)</title><rect x="58.1810%" y="501" width="0.0892%" height="15" fill="rgb(215,208,19)" fg:x="1305" fg:w="2"/><text x="58.4310%" y="511.50"></text></g><g><title>_int_malloc (4 samples, 0.18%)</title><rect x="58.7160%" y="389" width="0.1783%" height="15" fill="rgb(236,175,2)" fg:x="1317" fg:w="4"/><text x="58.9660%" y="399.50"></text></g><g><title>tcache_put (1 samples, 0.04%)</title><rect x="58.8498%" y="373" width="0.0446%" height="15" fill="rgb(241,52,2)" fg:x="1320" fg:w="1"/><text x="59.0998%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (15 samples, 0.67%)</title><rect x="58.2702%" y="533" width="0.6687%" height="15" fill="rgb(248,140,14)" fg:x="1307" fg:w="15"/><text x="58.5202%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (15 samples, 0.67%)</title><rect x="58.2702%" y="517" width="0.6687%" height="15" fill="rgb(253,22,42)" fg:x="1307" fg:w="15"/><text x="58.5202%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (8 samples, 0.36%)</title><rect x="58.5823%" y="501" width="0.3567%" height="15" fill="rgb(234,61,47)" fg:x="1314" fg:w="8"/><text x="58.8323%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.36%)</title><rect x="58.5823%" y="485" width="0.3567%" height="15" fill="rgb(208,226,15)" fg:x="1314" fg:w="8"/><text x="58.8323%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.36%)</title><rect x="58.5823%" y="469" width="0.3567%" height="15" fill="rgb(217,221,4)" fg:x="1314" fg:w="8"/><text x="58.8323%" y="479.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.36%)</title><rect x="58.5823%" y="453" width="0.3567%" height="15" fill="rgb(212,174,34)" fg:x="1314" fg:w="8"/><text x="58.8323%" y="463.50"></text></g><g><title>__rdl_alloc (8 samples, 0.36%)</title><rect x="58.5823%" y="437" width="0.3567%" height="15" fill="rgb(253,83,4)" fg:x="1314" fg:w="8"/><text x="58.8323%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.36%)</title><rect x="58.5823%" y="421" width="0.3567%" height="15" fill="rgb(250,195,49)" fg:x="1314" fg:w="8"/><text x="58.8323%" y="431.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.36%)</title><rect x="58.5823%" y="405" width="0.3567%" height="15" fill="rgb(241,192,25)" fg:x="1314" fg:w="8"/><text x="58.8323%" y="415.50"></text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="58.8943%" y="389" width="0.0446%" height="15" fill="rgb(208,124,10)" fg:x="1321" fg:w="1"/><text x="59.1443%" y="399.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (1 samples, 0.04%)</title><rect x="58.9389%" y="485" width="0.0446%" height="15" fill="rgb(222,33,0)" fg:x="1322" fg:w="1"/><text x="59.1889%" y="495.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (1 samples, 0.04%)</title><rect x="58.9389%" y="469" width="0.0446%" height="15" fill="rgb(234,209,28)" fg:x="1322" fg:w="1"/><text x="59.1889%" y="479.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (1 samples, 0.04%)</title><rect x="58.9389%" y="453" width="0.0446%" height="15" fill="rgb(224,11,23)" fg:x="1322" fg:w="1"/><text x="59.1889%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.04%)</title><rect x="58.9389%" y="437" width="0.0446%" height="15" fill="rgb(232,99,1)" fg:x="1322" fg:w="1"/><text x="59.1889%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (1 samples, 0.04%)</title><rect x="58.9389%" y="421" width="0.0446%" height="15" fill="rgb(237,95,45)" fg:x="1322" fg:w="1"/><text x="59.1889%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;alloc::string::String&gt;,alloc::vec::into_iter::IntoIter&lt;rlox::interpreter::LoxValue&gt;&gt;&gt; (13 samples, 0.58%)</title><rect x="58.9389%" y="533" width="0.5796%" height="15" fill="rgb(208,109,11)" fg:x="1322" fg:w="13"/><text x="59.1889%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;rlox::interpreter::LoxValue&gt;&gt; (13 samples, 0.58%)</title><rect x="58.9389%" y="517" width="0.5796%" height="15" fill="rgb(216,190,48)" fg:x="1322" fg:w="13"/><text x="59.1889%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.58%)</title><rect x="58.9389%" y="501" width="0.5796%" height="15" fill="rgb(251,171,36)" fg:x="1322" fg:w="13"/><text x="59.1889%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::interpreter::LoxValue,alloc::alloc::Global&gt;&gt; (12 samples, 0.53%)</title><rect x="58.9835%" y="485" width="0.5350%" height="15" fill="rgb(230,62,22)" fg:x="1323" fg:w="12"/><text x="59.2335%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.53%)</title><rect x="58.9835%" y="469" width="0.5350%" height="15" fill="rgb(225,114,35)" fg:x="1323" fg:w="12"/><text x="59.2335%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rlox::interpreter::LoxValue&gt;&gt; (12 samples, 0.53%)</title><rect x="58.9835%" y="453" width="0.5350%" height="15" fill="rgb(215,118,42)" fg:x="1323" fg:w="12"/><text x="59.2335%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.53%)</title><rect x="58.9835%" y="437" width="0.5350%" height="15" fill="rgb(243,119,21)" fg:x="1323" fg:w="12"/><text x="59.2335%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.53%)</title><rect x="58.9835%" y="421" width="0.5350%" height="15" fill="rgb(252,177,53)" fg:x="1323" fg:w="12"/><text x="59.2335%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.53%)</title><rect x="58.9835%" y="405" width="0.5350%" height="15" fill="rgb(237,209,29)" fg:x="1323" fg:w="12"/><text x="59.2335%" y="415.50"></text></g><g><title>__rdl_dealloc (12 samples, 0.53%)</title><rect x="58.9835%" y="389" width="0.5350%" height="15" fill="rgb(212,65,23)" fg:x="1323" fg:w="12"/><text x="59.2335%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12 samples, 0.53%)</title><rect x="58.9835%" y="373" width="0.5350%" height="15" fill="rgb(230,222,46)" fg:x="1323" fg:w="12"/><text x="59.2335%" y="383.50"></text></g><g><title>__GI___libc_free (12 samples, 0.53%)</title><rect x="58.9835%" y="357" width="0.5350%" height="15" fill="rgb(215,135,32)" fg:x="1323" fg:w="12"/><text x="59.2335%" y="367.50"></text></g><g><title>_int_free (10 samples, 0.45%)</title><rect x="59.0727%" y="341" width="0.4458%" height="15" fill="rgb(246,101,22)" fg:x="1325" fg:w="10"/><text x="59.3227%" y="351.50"></text></g><g><title>tcache_put (2 samples, 0.09%)</title><rect x="59.4293%" y="325" width="0.0892%" height="15" fill="rgb(206,107,13)" fg:x="1333" fg:w="2"/><text x="59.6793%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="59.8306%" y="389" width="0.0446%" height="15" fill="rgb(250,100,44)" fg:x="1342" fg:w="1"/><text x="60.0806%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.09%)</title><rect x="59.8306%" y="405" width="0.0892%" height="15" fill="rgb(231,147,38)" fg:x="1342" fg:w="2"/><text x="60.0806%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="59.8752%" y="389" width="0.0446%" height="15" fill="rgb(229,8,40)" fg:x="1343" fg:w="1"/><text x="60.1252%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="59.9198%" y="389" width="0.0892%" height="15" fill="rgb(221,135,30)" fg:x="1344" fg:w="2"/><text x="60.1698%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.31%)</title><rect x="59.7860%" y="453" width="0.3121%" height="15" fill="rgb(249,193,18)" fg:x="1341" fg:w="7"/><text x="60.0360%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.31%)</title><rect x="59.7860%" y="437" width="0.3121%" height="15" fill="rgb(209,133,39)" fg:x="1341" fg:w="7"/><text x="60.0360%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.31%)</title><rect x="59.7860%" y="421" width="0.3121%" height="15" fill="rgb(232,100,14)" fg:x="1341" fg:w="7"/><text x="60.0360%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.18%)</title><rect x="59.9198%" y="405" width="0.1783%" height="15" fill="rgb(224,185,1)" fg:x="1344" fg:w="4"/><text x="60.1698%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.09%)</title><rect x="60.0089%" y="389" width="0.0892%" height="15" fill="rgb(223,139,8)" fg:x="1346" fg:w="2"/><text x="60.2589%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="60.0981%" y="453" width="0.0446%" height="15" fill="rgb(232,213,38)" fg:x="1348" fg:w="1"/><text x="60.3481%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.31%)</title><rect x="60.1872%" y="357" width="0.3121%" height="15" fill="rgb(207,94,22)" fg:x="1350" fg:w="7"/><text x="60.4372%" y="367.50"></text></g><g><title>core::hash::sip::u8to64_le (5 samples, 0.22%)</title><rect x="60.2764%" y="341" width="0.2229%" height="15" fill="rgb(219,183,54)" fg:x="1352" fg:w="5"/><text x="60.5264%" y="351.50"></text></g><g><title>hashbrown::map::make_insert_hash (19 samples, 0.85%)</title><rect x="59.7414%" y="485" width="0.8471%" height="15" fill="rgb(216,185,54)" fg:x="1340" fg:w="19"/><text x="59.9914%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (18 samples, 0.80%)</title><rect x="59.7860%" y="469" width="0.8025%" height="15" fill="rgb(254,217,39)" fg:x="1341" fg:w="18"/><text x="60.0360%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.45%)</title><rect x="60.1427%" y="453" width="0.4458%" height="15" fill="rgb(240,178,23)" fg:x="1349" fg:w="10"/><text x="60.3927%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (10 samples, 0.45%)</title><rect x="60.1427%" y="437" width="0.4458%" height="15" fill="rgb(218,11,47)" fg:x="1349" fg:w="10"/><text x="60.3927%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (10 samples, 0.45%)</title><rect x="60.1427%" y="421" width="0.4458%" height="15" fill="rgb(218,51,51)" fg:x="1349" fg:w="10"/><text x="60.3927%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (10 samples, 0.45%)</title><rect x="60.1427%" y="405" width="0.4458%" height="15" fill="rgb(238,126,27)" fg:x="1349" fg:w="10"/><text x="60.3927%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (10 samples, 0.45%)</title><rect x="60.1427%" y="389" width="0.4458%" height="15" fill="rgb(249,202,22)" fg:x="1349" fg:w="10"/><text x="60.3927%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (10 samples, 0.45%)</title><rect x="60.1427%" y="373" width="0.4458%" height="15" fill="rgb(254,195,49)" fg:x="1349" fg:w="10"/><text x="60.3927%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u8 (2 samples, 0.09%)</title><rect x="60.4993%" y="357" width="0.0892%" height="15" fill="rgb(208,123,14)" fg:x="1357" fg:w="2"/><text x="60.7493%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="60.5439%" y="341" width="0.0446%" height="15" fill="rgb(224,200,8)" fg:x="1358" fg:w="1"/><text x="60.7939%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.04%)</title><rect x="60.6777%" y="437" width="0.0446%" height="15" fill="rgb(217,61,36)" fg:x="1361" fg:w="1"/><text x="60.9277%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.04%)</title><rect x="60.6777%" y="421" width="0.0446%" height="15" fill="rgb(206,35,45)" fg:x="1361" fg:w="1"/><text x="60.9277%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="60.6777%" y="405" width="0.0446%" height="15" fill="rgb(217,65,33)" fg:x="1361" fg:w="1"/><text x="60.9277%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="60.7222%" y="437" width="0.0446%" height="15" fill="rgb(222,158,48)" fg:x="1362" fg:w="1"/><text x="60.9722%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="60.7222%" y="421" width="0.0446%" height="15" fill="rgb(254,2,54)" fg:x="1362" fg:w="1"/><text x="60.9722%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (5 samples, 0.22%)</title><rect x="60.5885%" y="485" width="0.2229%" height="15" fill="rgb(250,143,38)" fg:x="1359" fg:w="5"/><text x="60.8385%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.22%)</title><rect x="60.5885%" y="469" width="0.2229%" height="15" fill="rgb(248,25,0)" fg:x="1359" fg:w="5"/><text x="60.8385%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (5 samples, 0.22%)</title><rect x="60.5885%" y="453" width="0.2229%" height="15" fill="rgb(206,152,27)" fg:x="1359" fg:w="5"/><text x="60.8385%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.04%)</title><rect x="60.7668%" y="437" width="0.0446%" height="15" fill="rgb(240,77,30)" fg:x="1363" fg:w="1"/><text x="61.0168%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="60.7668%" y="421" width="0.0446%" height="15" fill="rgb(231,5,3)" fg:x="1363" fg:w="1"/><text x="61.0168%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="60.7668%" y="405" width="0.0446%" height="15" fill="rgb(207,226,32)" fg:x="1363" fg:w="1"/><text x="61.0168%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.09%)</title><rect x="60.8560%" y="469" width="0.0892%" height="15" fill="rgb(222,207,47)" fg:x="1365" fg:w="2"/><text x="61.1060%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.09%)</title><rect x="60.8560%" y="453" width="0.0892%" height="15" fill="rgb(229,115,45)" fg:x="1365" fg:w="2"/><text x="61.1060%" y="463.50"></text></g><g><title>core::ptr::write (2 samples, 0.09%)</title><rect x="60.8560%" y="437" width="0.0892%" height="15" fill="rgb(224,191,6)" fg:x="1365" fg:w="2"/><text x="61.1060%" y="447.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.09%)</title><rect x="60.9452%" y="421" width="0.0892%" height="15" fill="rgb(230,227,24)" fg:x="1367" fg:w="2"/><text x="61.1952%" y="431.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.09%)</title><rect x="60.9452%" y="405" width="0.0892%" height="15" fill="rgb(228,80,19)" fg:x="1367" fg:w="2"/><text x="61.1952%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_bucket_full (1 samples, 0.04%)</title><rect x="61.2127%" y="405" width="0.0446%" height="15" fill="rgb(247,229,0)" fg:x="1373" fg:w="1"/><text x="61.4627%" y="415.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.04%)</title><rect x="61.2127%" y="389" width="0.0446%" height="15" fill="rgb(237,194,15)" fg:x="1373" fg:w="1"/><text x="61.4627%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (3 samples, 0.13%)</title><rect x="61.3018%" y="373" width="0.1337%" height="15" fill="rgb(219,203,20)" fg:x="1375" fg:w="3"/><text x="61.5518%" y="383.50"></text></g><g><title>core::intrinsics::write_bytes (3 samples, 0.13%)</title><rect x="61.3018%" y="357" width="0.1337%" height="15" fill="rgb(234,128,8)" fg:x="1375" fg:w="3"/><text x="61.5518%" y="367.50"></text></g><g><title>__memset_evex_unaligned_erms (3 samples, 0.13%)</title><rect x="61.3018%" y="341" width="0.1337%" height="15" fill="rgb(248,202,8)" fg:x="1375" fg:w="3"/><text x="61.5518%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="61.4356%" y="357" width="0.0446%" height="15" fill="rgb(206,104,37)" fg:x="1378" fg:w="1"/><text x="61.6856%" y="367.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.04%)</title><rect x="61.4802%" y="357" width="0.0446%" height="15" fill="rgb(223,8,27)" fg:x="1379" fg:w="1"/><text x="61.7302%" y="367.50"></text></g><g><title>_int_malloc (3 samples, 0.13%)</title><rect x="61.6139%" y="245" width="0.1337%" height="15" fill="rgb(216,217,28)" fg:x="1382" fg:w="3"/><text x="61.8639%" y="255.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="61.7477%" y="245" width="0.0446%" height="15" fill="rgb(249,199,1)" fg:x="1385" fg:w="1"/><text x="61.9977%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (18 samples, 0.80%)</title><rect x="61.0343%" y="421" width="0.8025%" height="15" fill="rgb(240,85,17)" fg:x="1369" fg:w="18"/><text x="61.2843%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (13 samples, 0.58%)</title><rect x="61.2572%" y="405" width="0.5796%" height="15" fill="rgb(206,108,45)" fg:x="1374" fg:w="13"/><text x="61.5072%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (12 samples, 0.53%)</title><rect x="61.3018%" y="389" width="0.5350%" height="15" fill="rgb(245,210,41)" fg:x="1375" fg:w="12"/><text x="61.5518%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (9 samples, 0.40%)</title><rect x="61.4356%" y="373" width="0.4012%" height="15" fill="rgb(206,13,37)" fg:x="1378" fg:w="9"/><text x="61.6856%" y="383.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (7 samples, 0.31%)</title><rect x="61.5247%" y="357" width="0.3121%" height="15" fill="rgb(250,61,18)" fg:x="1380" fg:w="7"/><text x="61.7747%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.31%)</title><rect x="61.5247%" y="341" width="0.3121%" height="15" fill="rgb(235,172,48)" fg:x="1380" fg:w="7"/><text x="61.7747%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.31%)</title><rect x="61.5247%" y="325" width="0.3121%" height="15" fill="rgb(249,201,17)" fg:x="1380" fg:w="7"/><text x="61.7747%" y="335.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.31%)</title><rect x="61.5247%" y="309" width="0.3121%" height="15" fill="rgb(219,208,6)" fg:x="1380" fg:w="7"/><text x="61.7747%" y="319.50"></text></g><g><title>__rdl_alloc (7 samples, 0.31%)</title><rect x="61.5247%" y="293" width="0.3121%" height="15" fill="rgb(248,31,23)" fg:x="1380" fg:w="7"/><text x="61.7747%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.31%)</title><rect x="61.5247%" y="277" width="0.3121%" height="15" fill="rgb(245,15,42)" fg:x="1380" fg:w="7"/><text x="61.7747%" y="287.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.27%)</title><rect x="61.5693%" y="261" width="0.2675%" height="15" fill="rgb(222,217,39)" fg:x="1381" fg:w="6"/><text x="61.8193%" y="271.50"></text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="61.7922%" y="245" width="0.0446%" height="15" fill="rgb(210,219,27)" fg:x="1386" fg:w="1"/><text x="62.0422%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (21 samples, 0.94%)</title><rect x="60.9452%" y="469" width="0.9362%" height="15" fill="rgb(252,166,36)" fg:x="1367" fg:w="21"/><text x="61.1952%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (21 samples, 0.94%)</title><rect x="60.9452%" y="453" width="0.9362%" height="15" fill="rgb(245,132,34)" fg:x="1367" fg:w="21"/><text x="61.1952%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (21 samples, 0.94%)</title><rect x="60.9452%" y="437" width="0.9362%" height="15" fill="rgb(236,54,3)" fg:x="1367" fg:w="21"/><text x="61.1952%" y="447.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.04%)</title><rect x="61.8368%" y="421" width="0.0446%" height="15" fill="rgb(241,173,43)" fg:x="1387" fg:w="1"/><text x="62.0868%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_bucket_full (4 samples, 0.18%)</title><rect x="62.0152%" y="453" width="0.1783%" height="15" fill="rgb(215,190,9)" fg:x="1391" fg:w="4"/><text x="62.2652%" y="463.50"></text></g><g><title>hashbrown::raw::is_full (3 samples, 0.13%)</title><rect x="62.0597%" y="437" width="0.1337%" height="15" fill="rgb(242,101,16)" fg:x="1392" fg:w="3"/><text x="62.3097%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.13%)</title><rect x="62.1935%" y="453" width="0.1337%" height="15" fill="rgb(223,190,21)" fg:x="1395" fg:w="3"/><text x="62.4435%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (13 samples, 0.58%)</title><rect x="61.8814%" y="469" width="0.5796%" height="15" fill="rgb(215,228,25)" fg:x="1388" fg:w="13"/><text x="62.1314%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3 samples, 0.13%)</title><rect x="62.3272%" y="453" width="0.1337%" height="15" fill="rgb(225,36,22)" fg:x="1398" fg:w="3"/><text x="62.5772%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3 samples, 0.13%)</title><rect x="62.3272%" y="437" width="0.1337%" height="15" fill="rgb(251,106,46)" fg:x="1398" fg:w="3"/><text x="62.5772%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.13%)</title><rect x="62.3272%" y="421" width="0.1337%" height="15" fill="rgb(208,90,1)" fg:x="1398" fg:w="3"/><text x="62.5772%" y="431.50"></text></g><g><title>rlox::environ::Environ::define (68 samples, 3.03%)</title><rect x="59.5185%" y="533" width="3.0317%" height="15" fill="rgb(243,10,4)" fg:x="1335" fg:w="68"/><text x="59.7685%" y="543.50">rlo..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (68 samples, 3.03%)</title><rect x="59.5185%" y="517" width="3.0317%" height="15" fill="rgb(212,137,27)" fg:x="1335" fg:w="68"/><text x="59.7685%" y="527.50">std..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (68 samples, 3.03%)</title><rect x="59.5185%" y="501" width="3.0317%" height="15" fill="rgb(231,220,49)" fg:x="1335" fg:w="68"/><text x="59.7685%" y="511.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (39 samples, 1.74%)</title><rect x="60.8114%" y="485" width="1.7387%" height="15" fill="rgb(237,96,20)" fg:x="1364" fg:w="39"/><text x="61.0614%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (2 samples, 0.09%)</title><rect x="62.4610%" y="469" width="0.0892%" height="15" fill="rgb(239,229,30)" fg:x="1401" fg:w="2"/><text x="62.7110%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (2 samples, 0.09%)</title><rect x="62.4610%" y="453" width="0.0892%" height="15" fill="rgb(219,65,33)" fg:x="1401" fg:w="2"/><text x="62.7110%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (2 samples, 0.09%)</title><rect x="62.4610%" y="437" width="0.0892%" height="15" fill="rgb(243,134,7)" fg:x="1401" fg:w="2"/><text x="62.7110%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.04%)</title><rect x="62.5056%" y="421" width="0.0446%" height="15" fill="rgb(216,177,54)" fg:x="1402" fg:w="1"/><text x="62.7556%" y="431.50"></text></g><g><title>rlox::environ::Environ::new (2 samples, 0.09%)</title><rect x="62.5502%" y="533" width="0.0892%" height="15" fill="rgb(211,160,20)" fg:x="1403" fg:w="2"/><text x="62.8002%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.40%)</title><rect x="62.7731%" y="517" width="0.4012%" height="15" fill="rgb(239,85,39)" fg:x="1408" fg:w="9"/><text x="63.0231%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (9 samples, 0.40%)</title><rect x="62.7731%" y="501" width="0.4012%" height="15" fill="rgb(232,125,22)" fg:x="1408" fg:w="9"/><text x="63.0231%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_add (9 samples, 0.40%)</title><rect x="62.7731%" y="485" width="0.4012%" height="15" fill="rgb(244,57,34)" fg:x="1408" fg:w="9"/><text x="63.0231%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="63.1743%" y="517" width="0.0446%" height="15" fill="rgb(214,203,32)" fg:x="1417" fg:w="1"/><text x="63.4243%" y="527.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="63.1743%" y="501" width="0.0446%" height="15" fill="rgb(207,58,43)" fg:x="1417" fg:w="1"/><text x="63.4243%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;rlox::environ::Environ&gt;&gt;&gt; (14 samples, 0.62%)</title><rect x="63.2189%" y="517" width="0.6242%" height="15" fill="rgb(215,193,15)" fg:x="1418" fg:w="14"/><text x="63.4689%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.62%)</title><rect x="63.2189%" y="501" width="0.6242%" height="15" fill="rgb(232,15,44)" fg:x="1418" fg:w="14"/><text x="63.4689%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (12 samples, 0.53%)</title><rect x="63.3081%" y="485" width="0.5350%" height="15" fill="rgb(212,3,48)" fg:x="1420" fg:w="12"/><text x="63.5581%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_sub (12 samples, 0.53%)</title><rect x="63.3081%" y="469" width="0.5350%" height="15" fill="rgb(218,128,7)" fg:x="1420" fg:w="12"/><text x="63.5581%" y="479.50"></text></g><g><title>free_perturb (1 samples, 0.04%)</title><rect x="64.1997%" y="325" width="0.0446%" height="15" fill="rgb(226,216,39)" fg:x="1440" fg:w="1"/><text x="64.4497%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::parser::Stmt,alloc::alloc::Global&gt;&gt; (11 samples, 0.49%)</title><rect x="63.8431%" y="485" width="0.4904%" height="15" fill="rgb(243,47,51)" fg:x="1432" fg:w="11"/><text x="64.0931%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.49%)</title><rect x="63.8431%" y="469" width="0.4904%" height="15" fill="rgb(241,183,40)" fg:x="1432" fg:w="11"/><text x="64.0931%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rlox::parser::Stmt&gt;&gt; (11 samples, 0.49%)</title><rect x="63.8431%" y="453" width="0.4904%" height="15" fill="rgb(231,217,32)" fg:x="1432" fg:w="11"/><text x="64.0931%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.49%)</title><rect x="63.8431%" y="437" width="0.4904%" height="15" fill="rgb(229,61,38)" fg:x="1432" fg:w="11"/><text x="64.0931%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.49%)</title><rect x="63.8431%" y="421" width="0.4904%" height="15" fill="rgb(225,210,5)" fg:x="1432" fg:w="11"/><text x="64.0931%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.49%)</title><rect x="63.8431%" y="405" width="0.4904%" height="15" fill="rgb(231,79,45)" fg:x="1432" fg:w="11"/><text x="64.0931%" y="415.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.49%)</title><rect x="63.8431%" y="389" width="0.4904%" height="15" fill="rgb(224,100,7)" fg:x="1432" fg:w="11"/><text x="64.0931%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11 samples, 0.49%)</title><rect x="63.8431%" y="373" width="0.4904%" height="15" fill="rgb(241,198,18)" fg:x="1432" fg:w="11"/><text x="64.0931%" y="383.50"></text></g><g><title>__GI___libc_free (11 samples, 0.49%)</title><rect x="63.8431%" y="357" width="0.4904%" height="15" fill="rgb(252,97,53)" fg:x="1432" fg:w="11"/><text x="64.0931%" y="367.50"></text></g><g><title>_int_free (11 samples, 0.49%)</title><rect x="63.8431%" y="341" width="0.4904%" height="15" fill="rgb(220,88,7)" fg:x="1432" fg:w="11"/><text x="64.0931%" y="351.50"></text></g><g><title>tcache_put (2 samples, 0.09%)</title><rect x="64.2443%" y="325" width="0.0892%" height="15" fill="rgb(213,176,14)" fg:x="1441" fg:w="2"/><text x="64.4943%" y="335.50"></text></g><g><title>_int_free (4 samples, 0.18%)</title><rect x="64.3335%" y="453" width="0.1783%" height="15" fill="rgb(246,73,7)" fg:x="1443" fg:w="4"/><text x="64.5835%" y="463.50"></text></g><g><title>__GI___libc_free (5 samples, 0.22%)</title><rect x="64.3335%" y="469" width="0.2229%" height="15" fill="rgb(245,64,36)" fg:x="1443" fg:w="5"/><text x="64.5835%" y="479.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="64.5118%" y="453" width="0.0446%" height="15" fill="rgb(245,80,10)" fg:x="1447" fg:w="1"/><text x="64.7618%" y="463.50"></text></g><g><title>__GI___libc_free (10 samples, 0.45%)</title><rect x="64.6010%" y="453" width="0.4458%" height="15" fill="rgb(232,107,50)" fg:x="1449" fg:w="10"/><text x="64.8510%" y="463.50"></text></g><g><title>_int_free (8 samples, 0.36%)</title><rect x="64.6901%" y="437" width="0.3567%" height="15" fill="rgb(253,3,0)" fg:x="1451" fg:w="8"/><text x="64.9401%" y="447.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="65.1360%" y="405" width="0.0446%" height="15" fill="rgb(212,99,53)" fg:x="1461" fg:w="1"/><text x="65.3860%" y="415.50"></text></g><g><title>__GI___libc_free (2 samples, 0.09%)</title><rect x="65.1360%" y="421" width="0.0892%" height="15" fill="rgb(249,111,54)" fg:x="1461" fg:w="2"/><text x="65.3860%" y="431.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="65.1806%" y="405" width="0.0446%" height="15" fill="rgb(249,55,30)" fg:x="1462" fg:w="1"/><text x="65.4306%" y="415.50"></text></g><g><title>alloc::alloc::box_free (6 samples, 0.27%)</title><rect x="65.2251%" y="421" width="0.2675%" height="15" fill="rgb(237,47,42)" fg:x="1463" fg:w="6"/><text x="65.4751%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.27%)</title><rect x="65.2251%" y="405" width="0.2675%" height="15" fill="rgb(211,20,18)" fg:x="1463" fg:w="6"/><text x="65.4751%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.27%)</title><rect x="65.2251%" y="389" width="0.2675%" height="15" fill="rgb(231,203,46)" fg:x="1463" fg:w="6"/><text x="65.4751%" y="399.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.27%)</title><rect x="65.2251%" y="373" width="0.2675%" height="15" fill="rgb(237,142,3)" fg:x="1463" fg:w="6"/><text x="65.4751%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.27%)</title><rect x="65.2251%" y="357" width="0.2675%" height="15" fill="rgb(241,107,1)" fg:x="1463" fg:w="6"/><text x="65.4751%" y="367.50"></text></g><g><title>__GI___libc_free (6 samples, 0.27%)</title><rect x="65.2251%" y="341" width="0.2675%" height="15" fill="rgb(229,83,13)" fg:x="1463" fg:w="6"/><text x="65.4751%" y="351.50"></text></g><g><title>_int_free (6 samples, 0.27%)</title><rect x="65.2251%" y="325" width="0.2675%" height="15" fill="rgb(241,91,40)" fg:x="1463" fg:w="6"/><text x="65.4751%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;rlox::parser::Expression&gt;&gt; (9 samples, 0.40%)</title><rect x="65.1360%" y="437" width="0.4012%" height="15" fill="rgb(225,3,45)" fg:x="1461" fg:w="9"/><text x="65.3860%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (1 samples, 0.04%)</title><rect x="65.4926%" y="421" width="0.0446%" height="15" fill="rgb(244,223,14)" fg:x="1469" fg:w="1"/><text x="65.7426%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Literal&gt; (1 samples, 0.04%)</title><rect x="65.4926%" y="405" width="0.0446%" height="15" fill="rgb(224,124,37)" fg:x="1469" fg:w="1"/><text x="65.7426%" y="415.50"></text></g><g><title>__GI___libc_free (2 samples, 0.09%)</title><rect x="65.5372%" y="389" width="0.0892%" height="15" fill="rgb(251,171,30)" fg:x="1470" fg:w="2"/><text x="65.7872%" y="399.50"></text></g><g><title>_int_free (2 samples, 0.09%)</title><rect x="65.5372%" y="373" width="0.0892%" height="15" fill="rgb(236,46,54)" fg:x="1470" fg:w="2"/><text x="65.7872%" y="383.50"></text></g><g><title>_int_free (9 samples, 0.40%)</title><rect x="65.8939%" y="357" width="0.4012%" height="15" fill="rgb(245,213,5)" fg:x="1478" fg:w="9"/><text x="66.1439%" y="367.50"></text></g><g><title>tcache_put (1 samples, 0.04%)</title><rect x="66.2506%" y="341" width="0.0446%" height="15" fill="rgb(230,144,27)" fg:x="1486" fg:w="1"/><text x="66.5006%" y="351.50"></text></g><g><title>__GI___libc_free (14 samples, 0.62%)</title><rect x="65.7156%" y="373" width="0.6242%" height="15" fill="rgb(220,86,6)" fg:x="1474" fg:w="14"/><text x="65.9656%" y="383.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="66.2951%" y="357" width="0.0446%" height="15" fill="rgb(240,20,13)" fg:x="1487" fg:w="1"/><text x="66.5451%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (42 samples, 1.87%)</title><rect x="64.5564%" y="469" width="1.8725%" height="15" fill="rgb(217,89,34)" fg:x="1448" fg:w="42"/><text x="64.8064%" y="479.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (31 samples, 1.38%)</title><rect x="65.0468%" y="453" width="1.3821%" height="15" fill="rgb(229,13,5)" fg:x="1459" fg:w="31"/><text x="65.2968%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rlox::parser::Expression&gt;&gt; (20 samples, 0.89%)</title><rect x="65.5372%" y="437" width="0.8917%" height="15" fill="rgb(244,67,35)" fg:x="1470" fg:w="20"/><text x="65.7872%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.89%)</title><rect x="65.5372%" y="421" width="0.8917%" height="15" fill="rgb(221,40,2)" fg:x="1470" fg:w="20"/><text x="65.7872%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[rlox::parser::Expression]&gt; (20 samples, 0.89%)</title><rect x="65.5372%" y="405" width="0.8917%" height="15" fill="rgb(237,157,21)" fg:x="1470" fg:w="20"/><text x="65.7872%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (18 samples, 0.80%)</title><rect x="65.6264%" y="389" width="0.8025%" height="15" fill="rgb(222,94,11)" fg:x="1472" fg:w="18"/><text x="65.8764%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Expression&gt; (2 samples, 0.09%)</title><rect x="66.3397%" y="373" width="0.0892%" height="15" fill="rgb(249,113,6)" fg:x="1488" fg:w="2"/><text x="66.5897%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Literal&gt; (1 samples, 0.04%)</title><rect x="66.3843%" y="357" width="0.0446%" height="15" fill="rgb(238,137,36)" fg:x="1489" fg:w="1"/><text x="66.6343%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;rlox::parser::Stmt&gt;&gt; (59 samples, 2.63%)</title><rect x="63.8431%" y="517" width="2.6304%" height="15" fill="rgb(210,102,26)" fg:x="1432" fg:w="59"/><text x="64.0931%" y="527.50">co..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 2.63%)</title><rect x="63.8431%" y="501" width="2.6304%" height="15" fill="rgb(218,30,30)" fg:x="1432" fg:w="59"/><text x="64.0931%" y="511.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;[rlox::parser::Stmt]&gt; (48 samples, 2.14%)</title><rect x="64.3335%" y="485" width="2.1400%" height="15" fill="rgb(214,67,26)" fg:x="1443" fg:w="48"/><text x="64.5835%" y="495.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::parser::Stmt&gt; (1 samples, 0.04%)</title><rect x="66.4289%" y="469" width="0.0446%" height="15" fill="rgb(251,9,53)" fg:x="1490" fg:w="1"/><text x="66.6789%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;rlox::parser::Expression&gt;&gt; (1 samples, 0.04%)</title><rect x="66.4289%" y="453" width="0.0446%" height="15" fill="rgb(228,204,25)" fg:x="1490" fg:w="1"/><text x="66.6789%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::interpreter::LoxValue&gt; (1 samples, 0.04%)</title><rect x="66.4735%" y="517" width="0.0446%" height="15" fill="rgb(207,153,8)" fg:x="1491" fg:w="1"/><text x="66.7235%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.58%)</title><rect x="67.1422%" y="485" width="0.5796%" height="15" fill="rgb(242,9,16)" fg:x="1506" fg:w="13"/><text x="67.3922%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (13 samples, 0.58%)</title><rect x="67.1422%" y="469" width="0.5796%" height="15" fill="rgb(217,211,10)" fg:x="1506" fg:w="13"/><text x="67.3922%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_add (13 samples, 0.58%)</title><rect x="67.1422%" y="453" width="0.5796%" height="15" fill="rgb(219,228,52)" fg:x="1506" fg:w="13"/><text x="67.3922%" y="463.50"></text></g><g><title>_int_free (5 samples, 0.22%)</title><rect x="67.9447%" y="437" width="0.2229%" height="15" fill="rgb(231,92,29)" fg:x="1524" fg:w="5"/><text x="68.1947%" y="447.50"></text></g><g><title>__GI___libc_free (10 samples, 0.45%)</title><rect x="67.7664%" y="453" width="0.4458%" height="15" fill="rgb(232,8,23)" fg:x="1520" fg:w="10"/><text x="68.0164%" y="463.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="68.1676%" y="437" width="0.0446%" height="15" fill="rgb(216,211,34)" fg:x="1529" fg:w="1"/><text x="68.4176%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="68.2568%" y="389" width="0.0446%" height="15" fill="rgb(236,151,0)" fg:x="1531" fg:w="1"/><text x="68.5068%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="68.2568%" y="373" width="0.0446%" height="15" fill="rgb(209,168,3)" fg:x="1531" fg:w="1"/><text x="68.5068%" y="383.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="68.2568%" y="357" width="0.0446%" height="15" fill="rgb(208,129,28)" fg:x="1531" fg:w="1"/><text x="68.5068%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="68.2568%" y="341" width="0.0446%" height="15" fill="rgb(229,78,22)" fg:x="1531" fg:w="1"/><text x="68.5068%" y="351.50"></text></g><g><title>core::mem::drop (13 samples, 0.58%)</title><rect x="68.2122%" y="437" width="0.5796%" height="15" fill="rgb(228,187,13)" fg:x="1530" fg:w="13"/><text x="68.4622%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;std::sync::mutex::Mutex&lt;rlox::environ::Environ&gt;&gt;&gt; (13 samples, 0.58%)</title><rect x="68.2122%" y="421" width="0.5796%" height="15" fill="rgb(240,119,24)" fg:x="1530" fg:w="13"/><text x="68.4622%" y="431.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.58%)</title><rect x="68.2122%" y="405" width="0.5796%" height="15" fill="rgb(209,194,42)" fg:x="1530" fg:w="13"/><text x="68.4622%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (11 samples, 0.49%)</title><rect x="68.3014%" y="389" width="0.4904%" height="15" fill="rgb(247,200,46)" fg:x="1532" fg:w="11"/><text x="68.5514%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (11 samples, 0.49%)</title><rect x="68.3014%" y="373" width="0.4904%" height="15" fill="rgb(218,76,16)" fg:x="1532" fg:w="11"/><text x="68.5514%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;rlox::environ::Environ&gt;&gt;&gt;&gt; (6 samples, 0.27%)</title><rect x="68.7918%" y="389" width="0.2675%" height="15" fill="rgb(225,21,48)" fg:x="1543" fg:w="6"/><text x="69.0418%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;rlox::environ::Environ&gt;&gt;&gt; (6 samples, 0.27%)</title><rect x="68.7918%" y="373" width="0.2675%" height="15" fill="rgb(239,223,50)" fg:x="1543" fg:w="6"/><text x="69.0418%" y="383.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.27%)</title><rect x="68.7918%" y="357" width="0.2675%" height="15" fill="rgb(244,45,21)" fg:x="1543" fg:w="6"/><text x="69.0418%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.27%)</title><rect x="68.7918%" y="341" width="0.2675%" height="15" fill="rgb(232,33,43)" fg:x="1543" fg:w="6"/><text x="69.0418%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.27%)</title><rect x="68.7918%" y="325" width="0.2675%" height="15" fill="rgb(209,8,3)" fg:x="1543" fg:w="6"/><text x="69.0418%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.13%)</title><rect x="69.0593%" y="309" width="0.1337%" height="15" fill="rgb(214,25,53)" fg:x="1549" fg:w="3"/><text x="69.3093%" y="319.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.04%)</title><rect x="69.1485%" y="293" width="0.0446%" height="15" fill="rgb(254,186,54)" fg:x="1551" fg:w="1"/><text x="69.3985%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.04%)</title><rect x="69.1485%" y="277" width="0.0446%" height="15" fill="rgb(208,174,49)" fg:x="1551" fg:w="1"/><text x="69.3985%" y="287.50"></text></g><g><title>_int_free (10 samples, 0.45%)</title><rect x="69.3714%" y="117" width="0.4458%" height="15" fill="rgb(233,191,51)" fg:x="1556" fg:w="10"/><text x="69.6214%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.71%)</title><rect x="69.1930%" y="197" width="0.7133%" height="15" fill="rgb(222,134,10)" fg:x="1552" fg:w="16"/><text x="69.4430%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.71%)</title><rect x="69.1930%" y="181" width="0.7133%" height="15" fill="rgb(230,226,20)" fg:x="1552" fg:w="16"/><text x="69.4430%" y="191.50"></text></g><g><title>__rdl_dealloc (16 samples, 0.71%)</title><rect x="69.1930%" y="165" width="0.7133%" height="15" fill="rgb(251,111,25)" fg:x="1552" fg:w="16"/><text x="69.4430%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (16 samples, 0.71%)</title><rect x="69.1930%" y="149" width="0.7133%" height="15" fill="rgb(224,40,46)" fg:x="1552" fg:w="16"/><text x="69.4430%" y="159.50"></text></g><g><title>__GI___libc_free (16 samples, 0.71%)</title><rect x="69.1930%" y="133" width="0.7133%" height="15" fill="rgb(236,108,47)" fg:x="1552" fg:w="16"/><text x="69.4430%" y="143.50"></text></g><g><title>arena_for_chunk (2 samples, 0.09%)</title><rect x="69.8172%" y="117" width="0.0892%" height="15" fill="rgb(234,93,0)" fg:x="1566" fg:w="2"/><text x="70.0672%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (17 samples, 0.76%)</title><rect x="69.1930%" y="261" width="0.7579%" height="15" fill="rgb(224,213,32)" fg:x="1552" fg:w="17"/><text x="69.4430%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (17 samples, 0.76%)</title><rect x="69.1930%" y="245" width="0.7579%" height="15" fill="rgb(251,11,48)" fg:x="1552" fg:w="17"/><text x="69.4430%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (17 samples, 0.76%)</title><rect x="69.1930%" y="229" width="0.7579%" height="15" fill="rgb(236,173,5)" fg:x="1552" fg:w="17"/><text x="69.4430%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.76%)</title><rect x="69.1930%" y="213" width="0.7579%" height="15" fill="rgb(230,95,12)" fg:x="1552" fg:w="17"/><text x="69.4430%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="69.9064%" y="197" width="0.0446%" height="15" fill="rgb(232,209,1)" fg:x="1568" fg:w="1"/><text x="70.1564%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (18 samples, 0.80%)</title><rect x="69.1930%" y="309" width="0.8025%" height="15" fill="rgb(232,6,1)" fg:x="1552" fg:w="18"/><text x="69.4430%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (18 samples, 0.80%)</title><rect x="69.1930%" y="293" width="0.8025%" height="15" fill="rgb(210,224,50)" fg:x="1552" fg:w="18"/><text x="69.4430%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,rlox::interpreter::LoxValue)&gt; (18 samples, 0.80%)</title><rect x="69.1930%" y="277" width="0.8025%" height="15" fill="rgb(228,127,35)" fg:x="1552" fg:w="18"/><text x="69.4430%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::interpreter::LoxValue&gt; (1 samples, 0.04%)</title><rect x="69.9510%" y="261" width="0.0446%" height="15" fill="rgb(245,102,45)" fg:x="1569" fg:w="1"/><text x="70.2010%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (22 samples, 0.98%)</title><rect x="69.0593%" y="325" width="0.9808%" height="15" fill="rgb(214,1,49)" fg:x="1549" fg:w="22"/><text x="69.3093%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1 samples, 0.04%)</title><rect x="69.9955%" y="309" width="0.0446%" height="15" fill="rgb(226,163,40)" fg:x="1570" fg:w="1"/><text x="70.2455%" y="319.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="69.9955%" y="293" width="0.0446%" height="15" fill="rgb(239,212,28)" fg:x="1570" fg:w="1"/><text x="70.2455%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.04%)</title><rect x="69.9955%" y="277" width="0.0446%" height="15" fill="rgb(220,20,13)" fg:x="1570" fg:w="1"/><text x="70.2455%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.62%)</title><rect x="70.0401%" y="293" width="0.6242%" height="15" fill="rgb(210,164,35)" fg:x="1571" fg:w="14"/><text x="70.2901%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.62%)</title><rect x="70.0401%" y="277" width="0.6242%" height="15" fill="rgb(248,109,41)" fg:x="1571" fg:w="14"/><text x="70.2901%" y="287.50"></text></g><g><title>__rdl_dealloc (14 samples, 0.62%)</title><rect x="70.0401%" y="261" width="0.6242%" height="15" fill="rgb(238,23,50)" fg:x="1571" fg:w="14"/><text x="70.2901%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (14 samples, 0.62%)</title><rect x="70.0401%" y="245" width="0.6242%" height="15" fill="rgb(211,48,49)" fg:x="1571" fg:w="14"/><text x="70.2901%" y="255.50"></text></g><g><title>__GI___libc_free (14 samples, 0.62%)</title><rect x="70.0401%" y="229" width="0.6242%" height="15" fill="rgb(223,36,21)" fg:x="1571" fg:w="14"/><text x="70.2901%" y="239.50"></text></g><g><title>_int_free (8 samples, 0.36%)</title><rect x="70.3076%" y="213" width="0.3567%" height="15" fill="rgb(207,123,46)" fg:x="1577" fg:w="8"/><text x="70.5576%" y="223.50"></text></g><g><title>tcache_put (2 samples, 0.09%)</title><rect x="70.5751%" y="197" width="0.0892%" height="15" fill="rgb(240,218,32)" fg:x="1583" fg:w="2"/><text x="70.8251%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (56 samples, 2.50%)</title><rect x="68.2122%" y="453" width="2.4967%" height="15" fill="rgb(252,5,43)" fg:x="1530" fg:w="56"/><text x="68.4622%" y="463.50">al..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;rlox::environ::Environ&gt;&gt; (43 samples, 1.92%)</title><rect x="68.7918%" y="437" width="1.9171%" height="15" fill="rgb(252,84,19)" fg:x="1543" fg:w="43"/><text x="69.0418%" y="447.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;rlox::environ::Environ&gt;&gt; (43 samples, 1.92%)</title><rect x="68.7918%" y="421" width="1.9171%" height="15" fill="rgb(243,152,39)" fg:x="1543" fg:w="43"/><text x="69.0418%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rlox::environ::Environ&gt; (43 samples, 1.92%)</title><rect x="68.7918%" y="405" width="1.9171%" height="15" fill="rgb(234,160,15)" fg:x="1543" fg:w="43"/><text x="69.0418%" y="415.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,rlox::interpreter::LoxValue&gt;&gt; (37 samples, 1.65%)</title><rect x="69.0593%" y="389" width="1.6496%" height="15" fill="rgb(237,34,20)" fg:x="1549" fg:w="37"/><text x="69.3093%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,rlox::interpreter::LoxValue,std::collections::hash::map::RandomState&gt;&gt; (37 samples, 1.65%)</title><rect x="69.0593%" y="373" width="1.6496%" height="15" fill="rgb(229,97,13)" fg:x="1549" fg:w="37"/><text x="69.3093%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,rlox::interpreter::LoxValue)&gt;&gt; (37 samples, 1.65%)</title><rect x="69.0593%" y="357" width="1.6496%" height="15" fill="rgb(234,71,50)" fg:x="1549" fg:w="37"/><text x="69.3093%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 1.65%)</title><rect x="69.0593%" y="341" width="1.6496%" height="15" fill="rgb(253,155,4)" fg:x="1549" fg:w="37"/><text x="69.3093%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (15 samples, 0.67%)</title><rect x="70.0401%" y="325" width="0.6687%" height="15" fill="rgb(222,185,37)" fg:x="1571" fg:w="15"/><text x="70.2901%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (15 samples, 0.67%)</title><rect x="70.0401%" y="309" width="0.6687%" height="15" fill="rgb(251,177,13)" fg:x="1571" fg:w="15"/><text x="70.2901%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::allocation_info (1 samples, 0.04%)</title><rect x="70.6643%" y="293" width="0.0446%" height="15" fill="rgb(250,179,40)" fg:x="1585" fg:w="1"/><text x="70.9143%" y="303.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.04%)</title><rect x="70.6643%" y="277" width="0.0446%" height="15" fill="rgb(242,44,2)" fg:x="1585" fg:w="1"/><text x="70.9143%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.04%)</title><rect x="70.6643%" y="261" width="0.0446%" height="15" fill="rgb(216,177,13)" fg:x="1585" fg:w="1"/><text x="70.9143%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.04%)</title><rect x="70.6643%" y="245" width="0.0446%" height="15" fill="rgb(216,106,43)" fg:x="1585" fg:w="1"/><text x="70.9143%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (102 samples, 4.55%)</title><rect x="66.5181%" y="517" width="4.5475%" height="15" fill="rgb(216,183,2)" fg:x="1492" fg:w="102"/><text x="66.7681%" y="527.50">core:..</text></g><g><title>rlox::interpreter::Interpreter::execute_block::{{closure}} (89 samples, 3.97%)</title><rect x="67.0976%" y="501" width="3.9679%" height="15" fill="rgb(249,75,3)" fg:x="1505" fg:w="89"/><text x="67.3476%" y="511.50">rlox..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;rlox::environ::Environ&gt;&gt;&gt; (75 samples, 3.34%)</title><rect x="67.7218%" y="485" width="3.3437%" height="15" fill="rgb(219,67,39)" fg:x="1519" fg:w="75"/><text x="67.9718%" y="495.50">cor..</text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 3.34%)</title><rect x="67.7218%" y="469" width="3.3437%" height="15" fill="rgb(253,228,2)" fg:x="1519" fg:w="75"/><text x="67.9718%" y="479.50">&lt;al..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (8 samples, 0.36%)</title><rect x="70.7089%" y="453" width="0.3567%" height="15" fill="rgb(235,138,27)" fg:x="1586" fg:w="8"/><text x="70.9589%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (8 samples, 0.36%)</title><rect x="70.7089%" y="437" width="0.3567%" height="15" fill="rgb(236,97,51)" fg:x="1586" fg:w="8"/><text x="70.9589%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.09%)</title><rect x="71.5560%" y="501" width="0.0892%" height="15" fill="rgb(240,80,30)" fg:x="1605" fg:w="2"/><text x="71.8060%" y="511.50"></text></g><g><title>__GI___libc_free (18 samples, 0.80%)</title><rect x="71.6451%" y="501" width="0.8025%" height="15" fill="rgb(230,178,19)" fg:x="1607" fg:w="18"/><text x="71.8951%" y="511.50"></text></g><g><title>_int_free (15 samples, 0.67%)</title><rect x="71.7789%" y="485" width="0.6687%" height="15" fill="rgb(210,190,27)" fg:x="1610" fg:w="15"/><text x="72.0289%" y="495.50"></text></g><g><title>tcache_put (4 samples, 0.18%)</title><rect x="72.2693%" y="469" width="0.1783%" height="15" fill="rgb(222,107,31)" fg:x="1621" fg:w="4"/><text x="72.5193%" y="479.50"></text></g><g><title>alloc::alloc::box_free (5 samples, 0.22%)</title><rect x="72.4476%" y="501" width="0.2229%" height="15" fill="rgb(216,127,34)" fg:x="1625" fg:w="5"/><text x="72.6976%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.22%)</title><rect x="72.4476%" y="485" width="0.2229%" height="15" fill="rgb(234,116,52)" fg:x="1625" fg:w="5"/><text x="72.6976%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.22%)</title><rect x="72.4476%" y="469" width="0.2229%" height="15" fill="rgb(222,124,15)" fg:x="1625" fg:w="5"/><text x="72.6976%" y="479.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.22%)</title><rect x="72.4476%" y="453" width="0.2229%" height="15" fill="rgb(231,179,28)" fg:x="1625" fg:w="5"/><text x="72.6976%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.22%)</title><rect x="72.4476%" y="437" width="0.2229%" height="15" fill="rgb(226,93,45)" fg:x="1625" fg:w="5"/><text x="72.6976%" y="447.50"></text></g><g><title>__GI___libc_free (4 samples, 0.18%)</title><rect x="72.4922%" y="421" width="0.1783%" height="15" fill="rgb(215,8,51)" fg:x="1626" fg:w="4"/><text x="72.7422%" y="431.50"></text></g><g><title>_int_free (4 samples, 0.18%)</title><rect x="72.4922%" y="405" width="0.1783%" height="15" fill="rgb(223,106,5)" fg:x="1626" fg:w="4"/><text x="72.7422%" y="415.50"></text></g><g><title>tcache_put (1 samples, 0.04%)</title><rect x="72.6259%" y="389" width="0.0446%" height="15" fill="rgb(250,191,5)" fg:x="1629" fg:w="1"/><text x="72.8759%" y="399.50"></text></g><g><title>_int_free (7 samples, 0.31%)</title><rect x="72.8934%" y="453" width="0.3121%" height="15" fill="rgb(242,132,44)" fg:x="1635" fg:w="7"/><text x="73.1434%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (959 samples, 42.76%)</title><rect x="30.5395%" y="613" width="42.7552%" height="15" fill="rgb(251,152,29)" fg:x="685" fg:w="959"/><text x="30.7895%" y="623.50">core::option::Option&lt;T&gt;::map</text></g><g><title>rlox::interpreter::Interpreter::execute::{{closure}} (959 samples, 42.76%)</title><rect x="30.5395%" y="597" width="42.7552%" height="15" fill="rgb(218,179,5)" fg:x="685" fg:w="959"/><text x="30.7895%" y="607.50">rlox::interpreter::Interpreter::execute::{{closure}}</text></g><g><title>rlox::interpreter::Interpreter::evaluate (959 samples, 42.76%)</title><rect x="30.5395%" y="581" width="42.7552%" height="15" fill="rgb(227,67,19)" fg:x="685" fg:w="959"/><text x="30.7895%" y="591.50">rlox::interpreter::Interpreter::evaluate</text></g><g><title>rlox::interpreter::Interpreter::evaluate (959 samples, 42.76%)</title><rect x="30.5395%" y="565" width="42.7552%" height="15" fill="rgb(233,119,31)" fg:x="685" fg:w="959"/><text x="30.7895%" y="575.50">rlox::interpreter::Interpreter::evaluate</text></g><g><title>rlox::interpreter::LoxCallable::call (667 samples, 29.74%)</title><rect x="43.5577%" y="549" width="29.7370%" height="15" fill="rgb(241,120,22)" fg:x="977" fg:w="667"/><text x="43.8077%" y="559.50">rlox::interpreter::LoxCallable::call</text></g><g><title>rlox::interpreter::Interpreter::execute_block (239 samples, 10.66%)</title><rect x="62.6393%" y="533" width="10.6554%" height="15" fill="rgb(224,102,30)" fg:x="1405" fg:w="239"/><text x="62.8893%" y="543.50">rlox::interprete..</text></g><g><title>rlox::interpreter::Interpreter::execute (50 samples, 2.23%)</title><rect x="71.0655%" y="517" width="2.2292%" height="15" fill="rgb(210,164,37)" fg:x="1594" fg:w="50"/><text x="71.3155%" y="527.50">r..</text></g><g><title>core::option::Option&lt;T&gt;::map (14 samples, 0.62%)</title><rect x="72.6705%" y="501" width="0.6242%" height="15" fill="rgb(226,191,16)" fg:x="1630" fg:w="14"/><text x="72.9205%" y="511.50"></text></g><g><title>rlox::interpreter::Interpreter::execute::{{closure}} (10 samples, 0.45%)</title><rect x="72.8489%" y="485" width="0.4458%" height="15" fill="rgb(214,40,45)" fg:x="1634" fg:w="10"/><text x="73.0989%" y="495.50"></text></g><g><title>__GI___libc_free (10 samples, 0.45%)</title><rect x="72.8489%" y="469" width="0.4458%" height="15" fill="rgb(244,29,26)" fg:x="1634" fg:w="10"/><text x="73.0989%" y="479.50"></text></g><g><title>arena_for_chunk (2 samples, 0.09%)</title><rect x="73.2055%" y="453" width="0.0892%" height="15" fill="rgb(216,16,5)" fg:x="1642" fg:w="2"/><text x="73.4555%" y="463.50"></text></g><g><title>_int_free (7 samples, 0.31%)</title><rect x="73.6959%" y="549" width="0.3121%" height="15" fill="rgb(249,76,35)" fg:x="1653" fg:w="7"/><text x="73.9459%" y="559.50"></text></g><g><title>__GI___libc_free (9 samples, 0.40%)</title><rect x="73.6514%" y="565" width="0.4012%" height="15" fill="rgb(207,11,44)" fg:x="1652" fg:w="9"/><text x="73.9014%" y="575.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="74.0080%" y="549" width="0.0446%" height="15" fill="rgb(228,190,49)" fg:x="1660" fg:w="1"/><text x="74.2580%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;rlox::environ::Environ&gt;&gt; (9 samples, 0.40%)</title><rect x="74.0526%" y="565" width="0.4012%" height="15" fill="rgb(214,173,12)" fg:x="1661" fg:w="9"/><text x="74.3026%" y="575.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.40%)</title><rect x="74.0526%" y="549" width="0.4012%" height="15" fill="rgb(218,26,35)" fg:x="1661" fg:w="9"/><text x="74.3026%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (9 samples, 0.40%)</title><rect x="74.0526%" y="533" width="0.4012%" height="15" fill="rgb(220,200,19)" fg:x="1661" fg:w="9"/><text x="74.3026%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (9 samples, 0.40%)</title><rect x="74.0526%" y="517" width="0.4012%" height="15" fill="rgb(239,95,49)" fg:x="1661" fg:w="9"/><text x="74.3026%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_swap (9 samples, 0.40%)</title><rect x="74.0526%" y="501" width="0.4012%" height="15" fill="rgb(235,85,53)" fg:x="1661" fg:w="9"/><text x="74.3026%" y="511.50"></text></g><g><title>&lt;rlox::interpreter::LoxValue as core::clone::Clone&gt;::clone (2 samples, 0.09%)</title><rect x="74.4539%" y="549" width="0.0892%" height="15" fill="rgb(233,133,31)" fg:x="1670" fg:w="2"/><text x="74.7039%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="74.5430%" y="485" width="0.0446%" height="15" fill="rgb(218,25,20)" fg:x="1672" fg:w="1"/><text x="74.7930%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="74.5430%" y="469" width="0.0446%" height="15" fill="rgb(252,210,38)" fg:x="1672" fg:w="1"/><text x="74.7930%" y="479.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="74.5430%" y="453" width="0.0446%" height="15" fill="rgb(242,134,21)" fg:x="1672" fg:w="1"/><text x="74.7930%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="74.5430%" y="437" width="0.0446%" height="15" fill="rgb(213,28,48)" fg:x="1672" fg:w="1"/><text x="74.7930%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.13%)</title><rect x="74.5430%" y="549" width="0.1337%" height="15" fill="rgb(250,196,2)" fg:x="1672" fg:w="3"/><text x="74.7930%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.13%)</title><rect x="74.5430%" y="533" width="0.1337%" height="15" fill="rgb(227,5,17)" fg:x="1672" fg:w="3"/><text x="74.7930%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.13%)</title><rect x="74.5430%" y="517" width="0.1337%" height="15" fill="rgb(221,226,24)" fg:x="1672" fg:w="3"/><text x="74.7930%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.13%)</title><rect x="74.5430%" y="501" width="0.1337%" height="15" fill="rgb(211,5,48)" fg:x="1672" fg:w="3"/><text x="74.7930%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.09%)</title><rect x="74.5876%" y="485" width="0.0892%" height="15" fill="rgb(219,150,6)" fg:x="1673" fg:w="2"/><text x="74.8376%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="74.8105%" y="421" width="0.0446%" height="15" fill="rgb(251,46,16)" fg:x="1678" fg:w="1"/><text x="75.0605%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="74.8105%" y="405" width="0.0446%" height="15" fill="rgb(220,204,40)" fg:x="1678" fg:w="1"/><text x="75.0605%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.13%)</title><rect x="74.8551%" y="405" width="0.1337%" height="15" fill="rgb(211,85,2)" fg:x="1679" fg:w="3"/><text x="75.1051%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.36%)</title><rect x="74.7214%" y="469" width="0.3567%" height="15" fill="rgb(229,17,7)" fg:x="1676" fg:w="8"/><text x="74.9714%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8 samples, 0.36%)</title><rect x="74.7214%" y="453" width="0.3567%" height="15" fill="rgb(239,72,28)" fg:x="1676" fg:w="8"/><text x="74.9714%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8 samples, 0.36%)</title><rect x="74.7214%" y="437" width="0.3567%" height="15" fill="rgb(230,47,54)" fg:x="1676" fg:w="8"/><text x="74.9714%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.22%)</title><rect x="74.8551%" y="421" width="0.2229%" height="15" fill="rgb(214,50,8)" fg:x="1679" fg:w="5"/><text x="75.1051%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.09%)</title><rect x="74.9889%" y="405" width="0.0892%" height="15" fill="rgb(216,198,43)" fg:x="1682" fg:w="2"/><text x="75.2389%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (6 samples, 0.27%)</title><rect x="75.0780%" y="469" width="0.2675%" height="15" fill="rgb(234,20,35)" fg:x="1684" fg:w="6"/><text x="75.3280%" y="479.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.13%)</title><rect x="75.2118%" y="453" width="0.1337%" height="15" fill="rgb(254,45,19)" fg:x="1687" fg:w="3"/><text x="75.4618%" y="463.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.13%)</title><rect x="75.2118%" y="437" width="0.1337%" height="15" fill="rgb(219,14,44)" fg:x="1687" fg:w="3"/><text x="75.4618%" y="447.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.13%)</title><rect x="75.2118%" y="421" width="0.1337%" height="15" fill="rgb(217,220,26)" fg:x="1687" fg:w="3"/><text x="75.4618%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.40%)</title><rect x="75.3455%" y="373" width="0.4012%" height="15" fill="rgb(213,158,28)" fg:x="1690" fg:w="9"/><text x="75.5955%" y="383.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.18%)</title><rect x="75.5684%" y="357" width="0.1783%" height="15" fill="rgb(252,51,52)" fg:x="1695" fg:w="4"/><text x="75.8184%" y="367.50"></text></g><g><title>core::cmp::min (1 samples, 0.04%)</title><rect x="75.8805%" y="341" width="0.0446%" height="15" fill="rgb(246,89,16)" fg:x="1702" fg:w="1"/><text x="76.1305%" y="351.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.04%)</title><rect x="75.8805%" y="325" width="0.0446%" height="15" fill="rgb(216,158,49)" fg:x="1702" fg:w="1"/><text x="76.1305%" y="335.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.04%)</title><rect x="75.8805%" y="309" width="0.0446%" height="15" fill="rgb(236,107,19)" fg:x="1702" fg:w="1"/><text x="76.1305%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (29 samples, 1.29%)</title><rect x="74.7214%" y="501" width="1.2929%" height="15" fill="rgb(228,185,30)" fg:x="1676" fg:w="29"/><text x="74.9714%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (29 samples, 1.29%)</title><rect x="74.7214%" y="485" width="1.2929%" height="15" fill="rgb(246,134,8)" fg:x="1676" fg:w="29"/><text x="74.9714%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (15 samples, 0.67%)</title><rect x="75.3455%" y="469" width="0.6687%" height="15" fill="rgb(214,143,50)" fg:x="1690" fg:w="15"/><text x="75.5955%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (15 samples, 0.67%)</title><rect x="75.3455%" y="453" width="0.6687%" height="15" fill="rgb(228,75,8)" fg:x="1690" fg:w="15"/><text x="75.5955%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (15 samples, 0.67%)</title><rect x="75.3455%" y="437" width="0.6687%" height="15" fill="rgb(207,175,4)" fg:x="1690" fg:w="15"/><text x="75.5955%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (15 samples, 0.67%)</title><rect x="75.3455%" y="421" width="0.6687%" height="15" fill="rgb(205,108,24)" fg:x="1690" fg:w="15"/><text x="75.5955%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (15 samples, 0.67%)</title><rect x="75.3455%" y="405" width="0.6687%" height="15" fill="rgb(244,120,49)" fg:x="1690" fg:w="15"/><text x="75.5955%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (15 samples, 0.67%)</title><rect x="75.3455%" y="389" width="0.6687%" height="15" fill="rgb(223,47,38)" fg:x="1690" fg:w="15"/><text x="75.5955%" y="399.50"></text></g><g><title>core::hash::Hasher::write_u8 (6 samples, 0.27%)</title><rect x="75.7468%" y="373" width="0.2675%" height="15" fill="rgb(229,179,11)" fg:x="1699" fg:w="6"/><text x="75.9968%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.27%)</title><rect x="75.7468%" y="357" width="0.2675%" height="15" fill="rgb(231,122,1)" fg:x="1699" fg:w="6"/><text x="75.9968%" y="367.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.09%)</title><rect x="75.9251%" y="341" width="0.0892%" height="15" fill="rgb(245,119,9)" fg:x="1703" fg:w="2"/><text x="76.1751%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.09%)</title><rect x="76.0588%" y="453" width="0.0892%" height="15" fill="rgb(241,163,25)" fg:x="1706" fg:w="2"/><text x="76.3088%" y="463.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (4 samples, 0.18%)</title><rect x="76.1480%" y="437" width="0.1783%" height="15" fill="rgb(217,214,3)" fg:x="1708" fg:w="4"/><text x="76.3980%" y="447.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4 samples, 0.18%)</title><rect x="76.1480%" y="421" width="0.1783%" height="15" fill="rgb(240,86,28)" fg:x="1708" fg:w="4"/><text x="76.3980%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.18%)</title><rect x="76.1480%" y="405" width="0.1783%" height="15" fill="rgb(215,47,9)" fg:x="1708" fg:w="4"/><text x="76.3980%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (4 samples, 0.18%)</title><rect x="76.1480%" y="389" width="0.1783%" height="15" fill="rgb(252,25,45)" fg:x="1708" fg:w="4"/><text x="76.3980%" y="399.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (4 samples, 0.18%)</title><rect x="76.1480%" y="373" width="0.1783%" height="15" fill="rgb(251,164,9)" fg:x="1708" fg:w="4"/><text x="76.3980%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.18%)</title><rect x="76.1480%" y="357" width="0.1783%" height="15" fill="rgb(233,194,0)" fg:x="1708" fg:w="4"/><text x="76.3980%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.18%)</title><rect x="76.1480%" y="341" width="0.1783%" height="15" fill="rgb(249,111,24)" fg:x="1708" fg:w="4"/><text x="76.3980%" y="351.50"></text></g><g><title>__memcmp_evex_movbe (4 samples, 0.18%)</title><rect x="76.1480%" y="325" width="0.1783%" height="15" fill="rgb(250,223,3)" fg:x="1708" fg:w="4"/><text x="76.3980%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (5 samples, 0.22%)</title><rect x="76.1480%" y="453" width="0.2229%" height="15" fill="rgb(236,178,37)" fg:x="1708" fg:w="5"/><text x="76.3980%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.04%)</title><rect x="76.3263%" y="437" width="0.0446%" height="15" fill="rgb(241,158,50)" fg:x="1712" fg:w="1"/><text x="76.5763%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.04%)</title><rect x="76.3263%" y="421" width="0.0446%" height="15" fill="rgb(213,121,41)" fg:x="1712" fg:w="1"/><text x="76.5763%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="76.3263%" y="405" width="0.0446%" height="15" fill="rgb(240,92,3)" fg:x="1712" fg:w="1"/><text x="76.5763%" y="415.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (1 samples, 0.04%)</title><rect x="76.3263%" y="389" width="0.0446%" height="15" fill="rgb(205,123,3)" fg:x="1712" fg:w="1"/><text x="76.5763%" y="399.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (1 samples, 0.04%)</title><rect x="76.3263%" y="373" width="0.0446%" height="15" fill="rgb(205,97,47)" fg:x="1712" fg:w="1"/><text x="76.5763%" y="383.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.09%)</title><rect x="76.3709%" y="453" width="0.0892%" height="15" fill="rgb(247,152,14)" fg:x="1713" fg:w="2"/><text x="76.6209%" y="463.50"></text></g><g><title>rlox::environ::Environ::get (46 samples, 2.05%)</title><rect x="74.4539%" y="565" width="2.0508%" height="15" fill="rgb(248,195,53)" fg:x="1670" fg:w="46"/><text x="74.7039%" y="575.50">r..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (41 samples, 1.83%)</title><rect x="74.6768%" y="549" width="1.8279%" height="15" fill="rgb(226,201,16)" fg:x="1675" fg:w="41"/><text x="74.9268%" y="559.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (41 samples, 1.83%)</title><rect x="74.6768%" y="533" width="1.8279%" height="15" fill="rgb(205,98,0)" fg:x="1675" fg:w="41"/><text x="74.9268%" y="543.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (40 samples, 1.78%)</title><rect x="74.7214%" y="517" width="1.7833%" height="15" fill="rgb(214,191,48)" fg:x="1676" fg:w="40"/><text x="74.9714%" y="527.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (11 samples, 0.49%)</title><rect x="76.0143%" y="501" width="0.4904%" height="15" fill="rgb(237,112,39)" fg:x="1705" fg:w="11"/><text x="76.2643%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11 samples, 0.49%)</title><rect x="76.0143%" y="485" width="0.4904%" height="15" fill="rgb(247,203,27)" fg:x="1705" fg:w="11"/><text x="76.2643%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (11 samples, 0.49%)</title><rect x="76.0143%" y="469" width="0.4904%" height="15" fill="rgb(235,124,28)" fg:x="1705" fg:w="11"/><text x="76.2643%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="76.4601%" y="453" width="0.0446%" height="15" fill="rgb(208,207,46)" fg:x="1715" fg:w="1"/><text x="76.7101%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="76.4601%" y="437" width="0.0446%" height="15" fill="rgb(234,176,4)" fg:x="1715" fg:w="1"/><text x="76.7101%" y="447.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (2 samples, 0.09%)</title><rect x="76.5047%" y="549" width="0.0892%" height="15" fill="rgb(230,133,28)" fg:x="1716" fg:w="2"/><text x="76.7547%" y="559.50"></text></g><g><title>std::sync::poison::Flag::guard (2 samples, 0.09%)</title><rect x="76.5047%" y="533" width="0.0892%" height="15" fill="rgb(211,137,40)" fg:x="1716" fg:w="2"/><text x="76.7547%" y="543.50"></text></g><g><title>rlox::interpreter::Interpreter::evaluate (81 samples, 3.61%)</title><rect x="73.2947%" y="613" width="3.6112%" height="15" fill="rgb(254,35,13)" fg:x="1644" fg:w="81"/><text x="73.5447%" y="623.50">rlox..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (81 samples, 3.61%)</title><rect x="73.2947%" y="597" width="3.6112%" height="15" fill="rgb(225,49,51)" fg:x="1644" fg:w="81"/><text x="73.5447%" y="607.50">rlox..</text></g><g><title>rlox::interpreter::Interpreter::val_from_lit (77 samples, 3.43%)</title><rect x="73.4730%" y="581" width="3.4329%" height="15" fill="rgb(251,10,15)" fg:x="1648" fg:w="77"/><text x="73.7230%" y="591.50">rlo..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (9 samples, 0.40%)</title><rect x="76.5047%" y="565" width="0.4012%" height="15" fill="rgb(228,207,15)" fg:x="1716" fg:w="9"/><text x="76.7547%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (7 samples, 0.31%)</title><rect x="76.5938%" y="549" width="0.3121%" height="15" fill="rgb(241,99,19)" fg:x="1718" fg:w="7"/><text x="76.8438%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (7 samples, 0.31%)</title><rect x="76.5938%" y="533" width="0.3121%" height="15" fill="rgb(207,104,49)" fg:x="1718" fg:w="7"/><text x="76.8438%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (7 samples, 0.31%)</title><rect x="76.5938%" y="517" width="0.3121%" height="15" fill="rgb(234,99,18)" fg:x="1718" fg:w="7"/><text x="76.8438%" y="527.50"></text></g><g><title>rlox::interpreter::Interpreter::evaluate (1,260 samples, 56.17%)</title><rect x="20.8649%" y="901" width="56.1748%" height="15" fill="rgb(213,191,49)" fg:x="468" fg:w="1260"/><text x="21.1149%" y="911.50">rlox::interpreter::Interpreter::evaluate</text></g><g><title>rlox::interpreter::LoxCallable::call (1,043 samples, 46.50%)</title><rect x="30.5395%" y="885" width="46.5002%" height="15" fill="rgb(210,226,19)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="895.50">rlox::interpreter::LoxCallable::call</text></g><g><title>rlox::interpreter::Interpreter::execute_block (1,043 samples, 46.50%)</title><rect x="30.5395%" y="869" width="46.5002%" height="15" fill="rgb(229,97,18)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="879.50">rlox::interpreter::Interpreter::execute_block</text></g><g><title>rlox::interpreter::Interpreter::execute (1,043 samples, 46.50%)</title><rect x="30.5395%" y="853" width="46.5002%" height="15" fill="rgb(211,167,15)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="863.50">rlox::interpreter::Interpreter::execute</text></g><g><title>core::option::Option&lt;T&gt;::map (1,043 samples, 46.50%)</title><rect x="30.5395%" y="837" width="46.5002%" height="15" fill="rgb(210,169,34)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="847.50">core::option::Option&lt;T&gt;::map</text></g><g><title>rlox::interpreter::Interpreter::execute::{{closure}} (1,043 samples, 46.50%)</title><rect x="30.5395%" y="821" width="46.5002%" height="15" fill="rgb(241,121,31)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="831.50">rlox::interpreter::Interpreter::execute::{{closure}}</text></g><g><title>rlox::interpreter::Interpreter::evaluate (1,043 samples, 46.50%)</title><rect x="30.5395%" y="805" width="46.5002%" height="15" fill="rgb(232,40,11)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="815.50">rlox::interpreter::Interpreter::evaluate</text></g><g><title>rlox::interpreter::Interpreter::evaluate (1,043 samples, 46.50%)</title><rect x="30.5395%" y="789" width="46.5002%" height="15" fill="rgb(205,86,26)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="799.50">rlox::interpreter::Interpreter::evaluate</text></g><g><title>rlox::interpreter::LoxCallable::call (1,043 samples, 46.50%)</title><rect x="30.5395%" y="773" width="46.5002%" height="15" fill="rgb(231,126,28)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="783.50">rlox::interpreter::LoxCallable::call</text></g><g><title>rlox::interpreter::Interpreter::execute_block (1,043 samples, 46.50%)</title><rect x="30.5395%" y="757" width="46.5002%" height="15" fill="rgb(219,221,18)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="767.50">rlox::interpreter::Interpreter::execute_block</text></g><g><title>rlox::interpreter::Interpreter::execute (1,043 samples, 46.50%)</title><rect x="30.5395%" y="741" width="46.5002%" height="15" fill="rgb(211,40,0)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="751.50">rlox::interpreter::Interpreter::execute</text></g><g><title>core::option::Option&lt;T&gt;::map (1,043 samples, 46.50%)</title><rect x="30.5395%" y="725" width="46.5002%" height="15" fill="rgb(239,85,43)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="735.50">core::option::Option&lt;T&gt;::map</text></g><g><title>rlox::interpreter::Interpreter::execute::{{closure}} (1,043 samples, 46.50%)</title><rect x="30.5395%" y="709" width="46.5002%" height="15" fill="rgb(231,55,21)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="719.50">rlox::interpreter::Interpreter::execute::{{closure}}</text></g><g><title>rlox::interpreter::Interpreter::evaluate (1,043 samples, 46.50%)</title><rect x="30.5395%" y="693" width="46.5002%" height="15" fill="rgb(225,184,43)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="703.50">rlox::interpreter::Interpreter::evaluate</text></g><g><title>rlox::interpreter::Interpreter::evaluate (1,043 samples, 46.50%)</title><rect x="30.5395%" y="677" width="46.5002%" height="15" fill="rgb(251,158,41)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="687.50">rlox::interpreter::Interpreter::evaluate</text></g><g><title>rlox::interpreter::LoxCallable::call (1,043 samples, 46.50%)</title><rect x="30.5395%" y="661" width="46.5002%" height="15" fill="rgb(234,159,37)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="671.50">rlox::interpreter::LoxCallable::call</text></g><g><title>rlox::interpreter::Interpreter::execute_block (1,043 samples, 46.50%)</title><rect x="30.5395%" y="645" width="46.5002%" height="15" fill="rgb(216,204,22)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="655.50">rlox::interpreter::Interpreter::execute_block</text></g><g><title>rlox::interpreter::Interpreter::execute (1,043 samples, 46.50%)</title><rect x="30.5395%" y="629" width="46.5002%" height="15" fill="rgb(214,17,3)" fg:x="685" fg:w="1043"/><text x="30.7895%" y="639.50">rlox::interpreter::Interpreter::execute</text></g><g><title>rlox::interpreter::Interpreter::execute (3 samples, 0.13%)</title><rect x="76.9059%" y="613" width="0.1337%" height="15" fill="rgb(212,111,17)" fg:x="1725" fg:w="3"/><text x="77.1559%" y="623.50"></text></g><g><title>rlox::interpreter::Interpreter::execute_block (3 samples, 0.13%)</title><rect x="76.9059%" y="597" width="0.1337%" height="15" fill="rgb(221,157,24)" fg:x="1725" fg:w="3"/><text x="77.1559%" y="607.50"></text></g><g><title>rlox::interpreter::Interpreter::execute (3 samples, 0.13%)</title><rect x="76.9059%" y="581" width="0.1337%" height="15" fill="rgb(252,16,13)" fg:x="1725" fg:w="3"/><text x="77.1559%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.13%)</title><rect x="76.9059%" y="565" width="0.1337%" height="15" fill="rgb(221,62,2)" fg:x="1725" fg:w="3"/><text x="77.1559%" y="575.50"></text></g><g><title>rlox::interpreter::Interpreter::execute::{{closure}} (3 samples, 0.13%)</title><rect x="76.9059%" y="549" width="0.1337%" height="15" fill="rgb(247,87,22)" fg:x="1725" fg:w="3"/><text x="77.1559%" y="559.50"></text></g><g><title>rlox::interpreter::Interpreter::evaluate (3 samples, 0.13%)</title><rect x="76.9059%" y="533" width="0.1337%" height="15" fill="rgb(215,73,9)" fg:x="1725" fg:w="3"/><text x="77.1559%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.40%)</title><rect x="77.1288%" y="405" width="0.4012%" height="15" fill="rgb(207,175,33)" fg:x="1730" fg:w="9"/><text x="77.3788%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.40%)</title><rect x="77.1288%" y="389" width="0.4012%" height="15" fill="rgb(243,129,54)" fg:x="1730" fg:w="9"/><text x="77.3788%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.40%)</title><rect x="77.1288%" y="373" width="0.4012%" height="15" fill="rgb(227,119,45)" fg:x="1730" fg:w="9"/><text x="77.3788%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.31%)</title><rect x="77.2180%" y="357" width="0.3121%" height="15" fill="rgb(205,109,36)" fg:x="1732" fg:w="7"/><text x="77.4680%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.31%)</title><rect x="77.2180%" y="341" width="0.3121%" height="15" fill="rgb(205,6,39)" fg:x="1732" fg:w="7"/><text x="77.4680%" y="351.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.31%)</title><rect x="77.2180%" y="325" width="0.3121%" height="15" fill="rgb(221,32,16)" fg:x="1732" fg:w="7"/><text x="77.4680%" y="335.50"></text></g><g><title>__rdl_alloc (7 samples, 0.31%)</title><rect x="77.2180%" y="309" width="0.3121%" height="15" fill="rgb(228,144,50)" fg:x="1732" fg:w="7"/><text x="77.4680%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.31%)</title><rect x="77.2180%" y="293" width="0.3121%" height="15" fill="rgb(229,201,53)" fg:x="1732" fg:w="7"/><text x="77.4680%" y="303.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.31%)</title><rect x="77.2180%" y="277" width="0.3121%" height="15" fill="rgb(249,153,27)" fg:x="1732" fg:w="7"/><text x="77.4680%" y="287.50"></text></g><g><title>tcache_get (3 samples, 0.13%)</title><rect x="77.3963%" y="261" width="0.1337%" height="15" fill="rgb(227,106,25)" fg:x="1736" fg:w="3"/><text x="77.6463%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (15 samples, 0.67%)</title><rect x="77.1288%" y="485" width="0.6687%" height="15" fill="rgb(230,65,29)" fg:x="1730" fg:w="15"/><text x="77.3788%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.67%)</title><rect x="77.1288%" y="469" width="0.6687%" height="15" fill="rgb(221,57,46)" fg:x="1730" fg:w="15"/><text x="77.3788%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.67%)</title><rect x="77.1288%" y="453" width="0.6687%" height="15" fill="rgb(229,161,17)" fg:x="1730" fg:w="15"/><text x="77.3788%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.67%)</title><rect x="77.1288%" y="437" width="0.6687%" height="15" fill="rgb(222,213,11)" fg:x="1730" fg:w="15"/><text x="77.3788%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.67%)</title><rect x="77.1288%" y="421" width="0.6687%" height="15" fill="rgb(235,35,13)" fg:x="1730" fg:w="15"/><text x="77.3788%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6 samples, 0.27%)</title><rect x="77.5301%" y="405" width="0.2675%" height="15" fill="rgb(233,158,34)" fg:x="1739" fg:w="6"/><text x="77.7801%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.27%)</title><rect x="77.5301%" y="389" width="0.2675%" height="15" fill="rgb(215,151,48)" fg:x="1739" fg:w="6"/><text x="77.7801%" y="399.50"></text></g><g><title>__memcpy_evex_unaligned_erms (4 samples, 0.18%)</title><rect x="77.6193%" y="373" width="0.1783%" height="15" fill="rgb(229,84,14)" fg:x="1741" fg:w="4"/><text x="77.8693%" y="383.50"></text></g><g><title>_int_malloc (14 samples, 0.62%)</title><rect x="78.1543%" y="197" width="0.6242%" height="15" fill="rgb(229,68,14)" fg:x="1753" fg:w="14"/><text x="78.4043%" y="207.50"></text></g><g><title>tcache_put (2 samples, 0.09%)</title><rect x="78.6893%" y="181" width="0.0892%" height="15" fill="rgb(243,106,26)" fg:x="1765" fg:w="2"/><text x="78.9393%" y="191.50"></text></g><g><title>arena_for_chunk (1 samples, 0.04%)</title><rect x="78.7784%" y="197" width="0.0446%" height="15" fill="rgb(206,45,38)" fg:x="1767" fg:w="1"/><text x="79.0284%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (24 samples, 1.07%)</title><rect x="77.8422%" y="341" width="1.0700%" height="15" fill="rgb(226,6,15)" fg:x="1746" fg:w="24"/><text x="78.0922%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (24 samples, 1.07%)</title><rect x="77.8422%" y="325" width="1.0700%" height="15" fill="rgb(232,22,54)" fg:x="1746" fg:w="24"/><text x="78.0922%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (24 samples, 1.07%)</title><rect x="77.8422%" y="309" width="1.0700%" height="15" fill="rgb(229,222,32)" fg:x="1746" fg:w="24"/><text x="78.0922%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (23 samples, 1.03%)</title><rect x="77.8868%" y="293" width="1.0254%" height="15" fill="rgb(228,62,29)" fg:x="1747" fg:w="23"/><text x="78.1368%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 1.03%)</title><rect x="77.8868%" y="277" width="1.0254%" height="15" fill="rgb(251,103,34)" fg:x="1747" fg:w="23"/><text x="78.1368%" y="287.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 1.03%)</title><rect x="77.8868%" y="261" width="1.0254%" height="15" fill="rgb(233,12,30)" fg:x="1747" fg:w="23"/><text x="78.1368%" y="271.50"></text></g><g><title>__rdl_alloc (23 samples, 1.03%)</title><rect x="77.8868%" y="245" width="1.0254%" height="15" fill="rgb(238,52,0)" fg:x="1747" fg:w="23"/><text x="78.1368%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (23 samples, 1.03%)</title><rect x="77.8868%" y="229" width="1.0254%" height="15" fill="rgb(223,98,5)" fg:x="1747" fg:w="23"/><text x="78.1368%" y="239.50"></text></g><g><title>__GI___libc_malloc (22 samples, 0.98%)</title><rect x="77.9313%" y="213" width="0.9808%" height="15" fill="rgb(228,75,37)" fg:x="1748" fg:w="22"/><text x="78.1813%" y="223.50"></text></g><g><title>tcache_get (2 samples, 0.09%)</title><rect x="78.8230%" y="197" width="0.0892%" height="15" fill="rgb(205,115,49)" fg:x="1768" fg:w="2"/><text x="79.0730%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (28 samples, 1.25%)</title><rect x="77.8422%" y="421" width="1.2483%" height="15" fill="rgb(250,154,43)" fg:x="1746" fg:w="28"/><text x="78.0922%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (28 samples, 1.25%)</title><rect x="77.8422%" y="405" width="1.2483%" height="15" fill="rgb(226,43,29)" fg:x="1746" fg:w="28"/><text x="78.0922%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (28 samples, 1.25%)</title><rect x="77.8422%" y="389" width="1.2483%" height="15" fill="rgb(249,228,39)" fg:x="1746" fg:w="28"/><text x="78.0922%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (28 samples, 1.25%)</title><rect x="77.8422%" y="373" width="1.2483%" height="15" fill="rgb(216,79,43)" fg:x="1746" fg:w="28"/><text x="78.0922%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (28 samples, 1.25%)</title><rect x="77.8422%" y="357" width="1.2483%" height="15" fill="rgb(228,95,12)" fg:x="1746" fg:w="28"/><text x="78.0922%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.18%)</title><rect x="78.9122%" y="341" width="0.1783%" height="15" fill="rgb(249,221,15)" fg:x="1770" fg:w="4"/><text x="79.1622%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.18%)</title><rect x="78.9122%" y="325" width="0.1783%" height="15" fill="rgb(233,34,13)" fg:x="1770" fg:w="4"/><text x="79.1622%" y="335.50"></text></g><g><title>__memcpy_evex_unaligned_erms (4 samples, 0.18%)</title><rect x="78.9122%" y="309" width="0.1783%" height="15" fill="rgb(214,103,39)" fg:x="1770" fg:w="4"/><text x="79.1622%" y="319.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="79.8930%" y="149" width="0.0446%" height="15" fill="rgb(251,126,39)" fg:x="1792" fg:w="1"/><text x="80.1430%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.22%)</title><rect x="79.8038%" y="293" width="0.2229%" height="15" fill="rgb(214,216,36)" fg:x="1790" fg:w="5"/><text x="80.0538%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.22%)</title><rect x="79.8038%" y="277" width="0.2229%" height="15" fill="rgb(220,221,8)" fg:x="1790" fg:w="5"/><text x="80.0538%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.22%)</title><rect x="79.8038%" y="261" width="0.2229%" height="15" fill="rgb(240,216,3)" fg:x="1790" fg:w="5"/><text x="80.0538%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.18%)</title><rect x="79.8484%" y="245" width="0.1783%" height="15" fill="rgb(232,218,17)" fg:x="1791" fg:w="4"/><text x="80.0984%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.18%)</title><rect x="79.8484%" y="229" width="0.1783%" height="15" fill="rgb(229,163,45)" fg:x="1791" fg:w="4"/><text x="80.0984%" y="239.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.18%)</title><rect x="79.8484%" y="213" width="0.1783%" height="15" fill="rgb(231,110,42)" fg:x="1791" fg:w="4"/><text x="80.0984%" y="223.50"></text></g><g><title>__rdl_alloc (4 samples, 0.18%)</title><rect x="79.8484%" y="197" width="0.1783%" height="15" fill="rgb(208,170,48)" fg:x="1791" fg:w="4"/><text x="80.0984%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.18%)</title><rect x="79.8484%" y="181" width="0.1783%" height="15" fill="rgb(239,116,25)" fg:x="1791" fg:w="4"/><text x="80.0984%" y="191.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.18%)</title><rect x="79.8484%" y="165" width="0.1783%" height="15" fill="rgb(219,200,50)" fg:x="1791" fg:w="4"/><text x="80.0984%" y="175.50"></text></g><g><title>tcache_get (2 samples, 0.09%)</title><rect x="79.9376%" y="149" width="0.0892%" height="15" fill="rgb(245,200,0)" fg:x="1793" fg:w="2"/><text x="80.1876%" y="159.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (13 samples, 0.58%)</title><rect x="79.7593%" y="389" width="0.5796%" height="15" fill="rgb(245,119,33)" fg:x="1789" fg:w="13"/><text x="80.0093%" y="399.50"></text></g><g><title>&lt;rlox::parser::Stmt as core::clone::Clone&gt;::clone (13 samples, 0.58%)</title><rect x="79.7593%" y="373" width="0.5796%" height="15" fill="rgb(231,125,12)" fg:x="1789" fg:w="13"/><text x="80.0093%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.53%)</title><rect x="79.8038%" y="357" width="0.5350%" height="15" fill="rgb(216,96,41)" fg:x="1790" fg:w="12"/><text x="80.0538%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.53%)</title><rect x="79.8038%" y="341" width="0.5350%" height="15" fill="rgb(248,43,45)" fg:x="1790" fg:w="12"/><text x="80.0538%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.53%)</title><rect x="79.8038%" y="325" width="0.5350%" height="15" fill="rgb(217,222,7)" fg:x="1790" fg:w="12"/><text x="80.0538%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.53%)</title><rect x="79.8038%" y="309" width="0.5350%" height="15" fill="rgb(233,28,6)" fg:x="1790" fg:w="12"/><text x="80.0538%" y="319.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (7 samples, 0.31%)</title><rect x="80.0267%" y="293" width="0.3121%" height="15" fill="rgb(231,218,15)" fg:x="1795" fg:w="7"/><text x="80.2767%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (14 samples, 0.62%)</title><rect x="79.7593%" y="405" width="0.6242%" height="15" fill="rgb(226,171,48)" fg:x="1789" fg:w="14"/><text x="80.0093%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.04%)</title><rect x="80.3388%" y="389" width="0.0446%" height="15" fill="rgb(235,201,9)" fg:x="1802" fg:w="1"/><text x="80.5888%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.04%)</title><rect x="80.3388%" y="373" width="0.0446%" height="15" fill="rgb(217,80,15)" fg:x="1802" fg:w="1"/><text x="80.5888%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="80.3388%" y="357" width="0.0446%" height="15" fill="rgb(219,152,8)" fg:x="1802" fg:w="1"/><text x="80.5888%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="80.3388%" y="341" width="0.0446%" height="15" fill="rgb(243,107,38)" fg:x="1802" fg:w="1"/><text x="80.5888%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="80.3388%" y="325" width="0.0446%" height="15" fill="rgb(231,17,5)" fg:x="1802" fg:w="1"/><text x="80.5888%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="80.3388%" y="309" width="0.0446%" height="15" fill="rgb(209,25,54)" fg:x="1802" fg:w="1"/><text x="80.5888%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="80.3388%" y="293" width="0.0446%" height="15" fill="rgb(219,0,2)" fg:x="1802" fg:w="1"/><text x="80.5888%" y="303.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="80.3388%" y="277" width="0.0446%" height="15" fill="rgb(246,9,5)" fg:x="1802" fg:w="1"/><text x="80.5888%" y="287.50"></text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="80.3388%" y="261" width="0.0446%" height="15" fill="rgb(226,159,4)" fg:x="1802" fg:w="1"/><text x="80.5888%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.09%)</title><rect x="81.7209%" y="261" width="0.0892%" height="15" fill="rgb(219,175,34)" fg:x="1833" fg:w="2"/><text x="81.9709%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.09%)</title><rect x="81.7209%" y="245" width="0.0892%" height="15" fill="rgb(236,10,46)" fg:x="1833" fg:w="2"/><text x="81.9709%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.09%)</title><rect x="81.7209%" y="229" width="0.0892%" height="15" fill="rgb(240,211,16)" fg:x="1833" fg:w="2"/><text x="81.9709%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.09%)</title><rect x="81.7209%" y="213" width="0.0892%" height="15" fill="rgb(205,3,43)" fg:x="1833" fg:w="2"/><text x="81.9709%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.09%)</title><rect x="81.7209%" y="197" width="0.0892%" height="15" fill="rgb(245,7,22)" fg:x="1833" fg:w="2"/><text x="81.9709%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.09%)</title><rect x="81.7209%" y="181" width="0.0892%" height="15" fill="rgb(239,132,32)" fg:x="1833" fg:w="2"/><text x="81.9709%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.09%)</title><rect x="81.7209%" y="165" width="0.0892%" height="15" fill="rgb(228,202,34)" fg:x="1833" fg:w="2"/><text x="81.9709%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.09%)</title><rect x="81.7209%" y="149" width="0.0892%" height="15" fill="rgb(254,200,22)" fg:x="1833" fg:w="2"/><text x="81.9709%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.09%)</title><rect x="81.7209%" y="133" width="0.0892%" height="15" fill="rgb(219,10,39)" fg:x="1833" fg:w="2"/><text x="81.9709%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.09%)</title><rect x="81.7209%" y="117" width="0.0892%" height="15" fill="rgb(226,210,39)" fg:x="1833" fg:w="2"/><text x="81.9709%" y="127.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="82.0330%" y="245" width="0.0446%" height="15" fill="rgb(208,219,16)" fg:x="1840" fg:w="1"/><text x="82.2830%" y="255.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.45%)</title><rect x="81.8101%" y="261" width="0.4458%" height="15" fill="rgb(216,158,51)" fg:x="1835" fg:w="10"/><text x="82.0601%" y="271.50"></text></g><g><title>tcache_get (4 samples, 0.18%)</title><rect x="82.0776%" y="245" width="0.1783%" height="15" fill="rgb(233,14,44)" fg:x="1841" fg:w="4"/><text x="82.3276%" y="255.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (23 samples, 1.03%)</title><rect x="81.4534%" y="309" width="1.0254%" height="15" fill="rgb(237,97,39)" fg:x="1827" fg:w="23"/><text x="81.7034%" y="319.50"></text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (20 samples, 0.89%)</title><rect x="81.5872%" y="293" width="0.8917%" height="15" fill="rgb(218,198,43)" fg:x="1830" fg:w="20"/><text x="81.8372%" y="303.50"></text></g><g><title>&lt;rlox::parser::Literal as core::clone::Clone&gt;::clone (18 samples, 0.80%)</title><rect x="81.6763%" y="277" width="0.8025%" height="15" fill="rgb(231,104,20)" fg:x="1832" fg:w="18"/><text x="81.9263%" y="287.50"></text></g><g><title>__memcpy_evex_unaligned_erms (5 samples, 0.22%)</title><rect x="82.2559%" y="261" width="0.2229%" height="15" fill="rgb(254,36,13)" fg:x="1845" fg:w="5"/><text x="82.5059%" y="271.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="82.6572%" y="181" width="0.0446%" height="15" fill="rgb(248,14,50)" fg:x="1854" fg:w="1"/><text x="82.9072%" y="191.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (32 samples, 1.43%)</title><rect x="81.4534%" y="325" width="1.4267%" height="15" fill="rgb(217,107,29)" fg:x="1827" fg:w="32"/><text x="81.7034%" y="335.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (9 samples, 0.40%)</title><rect x="82.4788%" y="309" width="0.4012%" height="15" fill="rgb(251,169,33)" fg:x="1850" fg:w="9"/><text x="82.7288%" y="319.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (9 samples, 0.40%)</title><rect x="82.4788%" y="293" width="0.4012%" height="15" fill="rgb(217,108,32)" fg:x="1850" fg:w="9"/><text x="82.7288%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.40%)</title><rect x="82.4788%" y="277" width="0.4012%" height="15" fill="rgb(219,66,42)" fg:x="1850" fg:w="9"/><text x="82.7288%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.40%)</title><rect x="82.4788%" y="261" width="0.4012%" height="15" fill="rgb(206,180,7)" fg:x="1850" fg:w="9"/><text x="82.7288%" y="271.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.40%)</title><rect x="82.4788%" y="245" width="0.4012%" height="15" fill="rgb(208,226,31)" fg:x="1850" fg:w="9"/><text x="82.7288%" y="255.50"></text></g><g><title>__rdl_alloc (9 samples, 0.40%)</title><rect x="82.4788%" y="229" width="0.4012%" height="15" fill="rgb(218,26,49)" fg:x="1850" fg:w="9"/><text x="82.7288%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.40%)</title><rect x="82.4788%" y="213" width="0.4012%" height="15" fill="rgb(233,197,48)" fg:x="1850" fg:w="9"/><text x="82.7288%" y="223.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.40%)</title><rect x="82.4788%" y="197" width="0.4012%" height="15" fill="rgb(252,181,51)" fg:x="1850" fg:w="9"/><text x="82.7288%" y="207.50"></text></g><g><title>tcache_get (4 samples, 0.18%)</title><rect x="82.7017%" y="181" width="0.1783%" height="15" fill="rgb(253,90,19)" fg:x="1855" fg:w="4"/><text x="82.9517%" y="191.50"></text></g><g><title>checked_request2size (2 samples, 0.09%)</title><rect x="83.5488%" y="101" width="0.0892%" height="15" fill="rgb(215,171,30)" fg:x="1874" fg:w="2"/><text x="83.7988%" y="111.50"></text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (20 samples, 0.89%)</title><rect x="82.9692%" y="261" width="0.8917%" height="15" fill="rgb(214,222,9)" fg:x="1861" fg:w="20"/><text x="83.2192%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.71%)</title><rect x="83.1476%" y="245" width="0.7133%" height="15" fill="rgb(223,3,22)" fg:x="1865" fg:w="16"/><text x="83.3976%" y="255.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (16 samples, 0.71%)</title><rect x="83.1476%" y="229" width="0.7133%" height="15" fill="rgb(225,196,46)" fg:x="1865" fg:w="16"/><text x="83.3976%" y="239.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (16 samples, 0.71%)</title><rect x="83.1476%" y="213" width="0.7133%" height="15" fill="rgb(209,110,37)" fg:x="1865" fg:w="16"/><text x="83.3976%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.71%)</title><rect x="83.1476%" y="197" width="0.7133%" height="15" fill="rgb(249,89,12)" fg:x="1865" fg:w="16"/><text x="83.3976%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.71%)</title><rect x="83.1476%" y="181" width="0.7133%" height="15" fill="rgb(226,27,33)" fg:x="1865" fg:w="16"/><text x="83.3976%" y="191.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.71%)</title><rect x="83.1476%" y="165" width="0.7133%" height="15" fill="rgb(213,82,22)" fg:x="1865" fg:w="16"/><text x="83.3976%" y="175.50"></text></g><g><title>__rdl_alloc (16 samples, 0.71%)</title><rect x="83.1476%" y="149" width="0.7133%" height="15" fill="rgb(248,140,0)" fg:x="1865" fg:w="16"/><text x="83.3976%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (16 samples, 0.71%)</title><rect x="83.1476%" y="133" width="0.7133%" height="15" fill="rgb(228,106,3)" fg:x="1865" fg:w="16"/><text x="83.3976%" y="143.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.71%)</title><rect x="83.1476%" y="117" width="0.7133%" height="15" fill="rgb(209,23,37)" fg:x="1865" fg:w="16"/><text x="83.3976%" y="127.50"></text></g><g><title>tcache_get (5 samples, 0.22%)</title><rect x="83.6380%" y="101" width="0.2229%" height="15" fill="rgb(241,93,50)" fg:x="1876" fg:w="5"/><text x="83.8880%" y="111.50"></text></g><g><title>checked_request2size (2 samples, 0.09%)</title><rect x="84.1730%" y="117" width="0.0892%" height="15" fill="rgb(253,46,43)" fg:x="1888" fg:w="2"/><text x="84.4230%" y="127.50"></text></g><g><title>__rdl_alloc (9 samples, 0.40%)</title><rect x="83.9501%" y="165" width="0.4012%" height="15" fill="rgb(226,206,43)" fg:x="1883" fg:w="9"/><text x="84.2001%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.40%)</title><rect x="83.9501%" y="149" width="0.4012%" height="15" fill="rgb(217,54,7)" fg:x="1883" fg:w="9"/><text x="84.2001%" y="159.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.40%)</title><rect x="83.9501%" y="133" width="0.4012%" height="15" fill="rgb(223,5,52)" fg:x="1883" fg:w="9"/><text x="84.2001%" y="143.50"></text></g><g><title>tcache_get (2 samples, 0.09%)</title><rect x="84.2621%" y="117" width="0.0892%" height="15" fill="rgb(206,52,46)" fg:x="1890" fg:w="2"/><text x="84.5121%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.45%)</title><rect x="83.9501%" y="213" width="0.4458%" height="15" fill="rgb(253,136,11)" fg:x="1883" fg:w="10"/><text x="84.2001%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.45%)</title><rect x="83.9501%" y="197" width="0.4458%" height="15" fill="rgb(208,106,33)" fg:x="1883" fg:w="10"/><text x="84.2001%" y="207.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.45%)</title><rect x="83.9501%" y="181" width="0.4458%" height="15" fill="rgb(206,54,4)" fg:x="1883" fg:w="10"/><text x="84.2001%" y="191.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.04%)</title><rect x="84.3513%" y="165" width="0.0446%" height="15" fill="rgb(213,3,15)" fg:x="1892" fg:w="1"/><text x="84.6013%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.62%)</title><rect x="83.8609%" y="261" width="0.6242%" height="15" fill="rgb(252,211,39)" fg:x="1881" fg:w="14"/><text x="84.1109%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.62%)</title><rect x="83.8609%" y="245" width="0.6242%" height="15" fill="rgb(223,6,36)" fg:x="1881" fg:w="14"/><text x="84.1109%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.62%)</title><rect x="83.8609%" y="229" width="0.6242%" height="15" fill="rgb(252,169,45)" fg:x="1881" fg:w="14"/><text x="84.1109%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.09%)</title><rect x="84.3959%" y="213" width="0.0892%" height="15" fill="rgb(212,48,26)" fg:x="1893" fg:w="2"/><text x="84.6459%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.09%)</title><rect x="84.3959%" y="197" width="0.0892%" height="15" fill="rgb(251,102,48)" fg:x="1893" fg:w="2"/><text x="84.6459%" y="207.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (91 samples, 4.06%)</title><rect x="81.0967%" y="357" width="4.0571%" height="15" fill="rgb(243,208,16)" fg:x="1819" fg:w="91"/><text x="81.3467%" y="367.50">&lt;T a..</text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (91 samples, 4.06%)</title><rect x="81.0967%" y="341" width="4.0571%" height="15" fill="rgb(219,96,24)" fg:x="1819" fg:w="91"/><text x="81.3467%" y="351.50">&lt;rlo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (51 samples, 2.27%)</title><rect x="82.8801%" y="325" width="2.2737%" height="15" fill="rgb(219,33,29)" fg:x="1859" fg:w="51"/><text x="83.1301%" y="335.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (51 samples, 2.27%)</title><rect x="82.8801%" y="309" width="2.2737%" height="15" fill="rgb(223,176,5)" fg:x="1859" fg:w="51"/><text x="83.1301%" y="319.50">a..</text></g><g><title>alloc::slice::hack::to_vec (51 samples, 2.27%)</title><rect x="82.8801%" y="293" width="2.2737%" height="15" fill="rgb(228,140,14)" fg:x="1859" fg:w="51"/><text x="83.1301%" y="303.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (51 samples, 2.27%)</title><rect x="82.8801%" y="277" width="2.2737%" height="15" fill="rgb(217,179,31)" fg:x="1859" fg:w="51"/><text x="83.1301%" y="287.50">&lt;..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (15 samples, 0.67%)</title><rect x="84.4851%" y="261" width="0.6687%" height="15" fill="rgb(230,9,30)" fg:x="1895" fg:w="15"/><text x="84.7351%" y="271.50"></text></g><g><title>_int_malloc (16 samples, 0.71%)</title><rect x="85.1984%" y="229" width="0.7133%" height="15" fill="rgb(230,136,20)" fg:x="1911" fg:w="16"/><text x="85.4484%" y="239.50"></text></g><g><title>tcache_put (4 samples, 0.18%)</title><rect x="85.7334%" y="213" width="0.1783%" height="15" fill="rgb(215,210,22)" fg:x="1923" fg:w="4"/><text x="85.9834%" y="223.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (126 samples, 5.62%)</title><rect x="80.3834%" y="405" width="5.6175%" height="15" fill="rgb(218,43,5)" fg:x="1803" fg:w="126"/><text x="80.6334%" y="415.50">&lt;core::..</text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (111 samples, 4.95%)</title><rect x="81.0522%" y="389" width="4.9487%" height="15" fill="rgb(216,11,5)" fg:x="1818" fg:w="111"/><text x="81.3022%" y="399.50">&lt;rlox:..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (110 samples, 4.90%)</title><rect x="81.0967%" y="373" width="4.9041%" height="15" fill="rgb(209,82,29)" fg:x="1819" fg:w="110"/><text x="81.3467%" y="383.50">&lt;alloc..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (19 samples, 0.85%)</title><rect x="85.1538%" y="357" width="0.8471%" height="15" fill="rgb(244,115,12)" fg:x="1910" fg:w="19"/><text x="85.4038%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (19 samples, 0.85%)</title><rect x="85.1538%" y="341" width="0.8471%" height="15" fill="rgb(222,82,18)" fg:x="1910" fg:w="19"/><text x="85.4038%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.85%)</title><rect x="85.1538%" y="325" width="0.8471%" height="15" fill="rgb(249,227,8)" fg:x="1910" fg:w="19"/><text x="85.4038%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.85%)</title><rect x="85.1538%" y="309" width="0.8471%" height="15" fill="rgb(253,141,45)" fg:x="1910" fg:w="19"/><text x="85.4038%" y="319.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.85%)</title><rect x="85.1538%" y="293" width="0.8471%" height="15" fill="rgb(234,184,4)" fg:x="1910" fg:w="19"/><text x="85.4038%" y="303.50"></text></g><g><title>__rdl_alloc (19 samples, 0.85%)</title><rect x="85.1538%" y="277" width="0.8471%" height="15" fill="rgb(218,194,23)" fg:x="1910" fg:w="19"/><text x="85.4038%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (19 samples, 0.85%)</title><rect x="85.1538%" y="261" width="0.8471%" height="15" fill="rgb(235,66,41)" fg:x="1910" fg:w="19"/><text x="85.4038%" y="271.50"></text></g><g><title>__GI___libc_malloc (19 samples, 0.85%)</title><rect x="85.1538%" y="245" width="0.8471%" height="15" fill="rgb(245,217,1)" fg:x="1910" fg:w="19"/><text x="85.4038%" y="255.50"></text></g><g><title>checked_request2size (2 samples, 0.09%)</title><rect x="85.9117%" y="229" width="0.0892%" height="15" fill="rgb(229,91,1)" fg:x="1927" fg:w="2"/><text x="86.1617%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="86.3130%" y="325" width="0.0446%" height="15" fill="rgb(207,101,30)" fg:x="1936" fg:w="1"/><text x="86.5630%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="86.3130%" y="309" width="0.0446%" height="15" fill="rgb(223,82,49)" fg:x="1936" fg:w="1"/><text x="86.5630%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="86.3130%" y="293" width="0.0446%" height="15" fill="rgb(218,167,17)" fg:x="1936" fg:w="1"/><text x="86.5630%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="86.3130%" y="277" width="0.0446%" height="15" fill="rgb(208,103,14)" fg:x="1936" fg:w="1"/><text x="86.5630%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="86.3130%" y="261" width="0.0446%" height="15" fill="rgb(238,20,8)" fg:x="1936" fg:w="1"/><text x="86.5630%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="86.3130%" y="245" width="0.0446%" height="15" fill="rgb(218,80,54)" fg:x="1936" fg:w="1"/><text x="86.5630%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="86.3130%" y="229" width="0.0446%" height="15" fill="rgb(240,144,17)" fg:x="1936" fg:w="1"/><text x="86.5630%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="86.3130%" y="213" width="0.0446%" height="15" fill="rgb(245,27,50)" fg:x="1936" fg:w="1"/><text x="86.5630%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.04%)</title><rect x="86.3130%" y="197" width="0.0446%" height="15" fill="rgb(251,51,7)" fg:x="1936" fg:w="1"/><text x="86.5630%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.04%)</title><rect x="86.3130%" y="181" width="0.0446%" height="15" fill="rgb(245,217,29)" fg:x="1936" fg:w="1"/><text x="86.5630%" y="191.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.09%)</title><rect x="86.3576%" y="325" width="0.0892%" height="15" fill="rgb(221,176,29)" fg:x="1937" fg:w="2"/><text x="86.6076%" y="335.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="86.4021%" y="309" width="0.0446%" height="15" fill="rgb(212,180,24)" fg:x="1938" fg:w="1"/><text x="86.6521%" y="319.50"></text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 0.04%)</title><rect x="86.4467%" y="325" width="0.0446%" height="15" fill="rgb(254,24,2)" fg:x="1939" fg:w="1"/><text x="86.6967%" y="335.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (10 samples, 0.45%)</title><rect x="86.0901%" y="373" width="0.4458%" height="15" fill="rgb(230,100,2)" fg:x="1931" fg:w="10"/><text x="86.3401%" y="383.50"></text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (9 samples, 0.40%)</title><rect x="86.1346%" y="357" width="0.4012%" height="15" fill="rgb(219,142,25)" fg:x="1932" fg:w="9"/><text x="86.3846%" y="367.50"></text></g><g><title>&lt;rlox::parser::Literal as core::clone::Clone&gt;::clone (7 samples, 0.31%)</title><rect x="86.2238%" y="341" width="0.3121%" height="15" fill="rgb(240,73,43)" fg:x="1934" fg:w="7"/><text x="86.4738%" y="351.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f64&gt;::clone (1 samples, 0.04%)</title><rect x="86.4913%" y="325" width="0.0446%" height="15" fill="rgb(214,114,15)" fg:x="1940" fg:w="1"/><text x="86.7413%" y="335.50"></text></g><g><title>checked_request2size (5 samples, 0.22%)</title><rect x="86.5805%" y="245" width="0.2229%" height="15" fill="rgb(207,130,4)" fg:x="1942" fg:w="5"/><text x="86.8305%" y="255.50"></text></g><g><title>&lt;rlox::parser::Stmt as core::clone::Clone&gt;::clone (176 samples, 7.85%)</title><rect x="79.0905%" y="421" width="7.8466%" height="15" fill="rgb(221,25,40)" fg:x="1774" fg:w="176"/><text x="79.3405%" y="431.50">&lt;rlox::pars..</text></g><g><title>&lt;rlox::parser::Expression as core::clone::Clone&gt;::clone (21 samples, 0.94%)</title><rect x="86.0009%" y="405" width="0.9362%" height="15" fill="rgb(241,184,7)" fg:x="1929" fg:w="21"/><text x="86.2509%" y="415.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.85%)</title><rect x="86.0901%" y="389" width="0.8471%" height="15" fill="rgb(235,159,4)" fg:x="1931" fg:w="19"/><text x="86.3401%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (9 samples, 0.40%)</title><rect x="86.5359%" y="373" width="0.4012%" height="15" fill="rgb(214,87,48)" fg:x="1941" fg:w="9"/><text x="86.7859%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (9 samples, 0.40%)</title><rect x="86.5359%" y="357" width="0.4012%" height="15" fill="rgb(246,198,24)" fg:x="1941" fg:w="9"/><text x="86.7859%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.40%)</title><rect x="86.5359%" y="341" width="0.4012%" height="15" fill="rgb(209,66,40)" fg:x="1941" fg:w="9"/><text x="86.7859%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.40%)</title><rect x="86.5359%" y="325" width="0.4012%" height="15" fill="rgb(233,147,39)" fg:x="1941" fg:w="9"/><text x="86.7859%" y="335.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.40%)</title><rect x="86.5359%" y="309" width="0.4012%" height="15" fill="rgb(231,145,52)" fg:x="1941" fg:w="9"/><text x="86.7859%" y="319.50"></text></g><g><title>__rdl_alloc (9 samples, 0.40%)</title><rect x="86.5359%" y="293" width="0.4012%" height="15" fill="rgb(206,20,26)" fg:x="1941" fg:w="9"/><text x="86.7859%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.40%)</title><rect x="86.5359%" y="277" width="0.4012%" height="15" fill="rgb(238,220,4)" fg:x="1941" fg:w="9"/><text x="86.7859%" y="287.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.40%)</title><rect x="86.5359%" y="261" width="0.4012%" height="15" fill="rgb(252,195,42)" fg:x="1941" fg:w="9"/><text x="86.7859%" y="271.50"></text></g><g><title>tcache_get (3 samples, 0.13%)</title><rect x="86.8034%" y="245" width="0.1337%" height="15" fill="rgb(209,10,6)" fg:x="1947" fg:w="3"/><text x="87.0534%" y="255.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="87.4276%" y="277" width="0.0446%" height="15" fill="rgb(229,3,52)" fg:x="1961" fg:w="1"/><text x="87.6776%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.49%)</title><rect x="87.1155%" y="373" width="0.4904%" height="15" fill="rgb(253,49,37)" fg:x="1954" fg:w="11"/><text x="87.3655%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.49%)</title><rect x="87.1155%" y="357" width="0.4904%" height="15" fill="rgb(240,103,49)" fg:x="1954" fg:w="11"/><text x="87.3655%" y="367.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.36%)</title><rect x="87.2492%" y="341" width="0.3567%" height="15" fill="rgb(250,182,30)" fg:x="1957" fg:w="8"/><text x="87.4992%" y="351.50"></text></g><g><title>__rdl_alloc (8 samples, 0.36%)</title><rect x="87.2492%" y="325" width="0.3567%" height="15" fill="rgb(248,8,30)" fg:x="1957" fg:w="8"/><text x="87.4992%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.36%)</title><rect x="87.2492%" y="309" width="0.3567%" height="15" fill="rgb(237,120,30)" fg:x="1957" fg:w="8"/><text x="87.4992%" y="319.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.31%)</title><rect x="87.2938%" y="293" width="0.3121%" height="15" fill="rgb(221,146,34)" fg:x="1958" fg:w="7"/><text x="87.5438%" y="303.50"></text></g><g><title>tcache_get (3 samples, 0.13%)</title><rect x="87.4721%" y="277" width="0.1337%" height="15" fill="rgb(242,55,13)" fg:x="1962" fg:w="3"/><text x="87.7221%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.71%)</title><rect x="86.9371%" y="421" width="0.7133%" height="15" fill="rgb(242,112,31)" fg:x="1950" fg:w="16"/><text x="87.1871%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.71%)</title><rect x="86.9371%" y="405" width="0.7133%" height="15" fill="rgb(249,192,27)" fg:x="1950" fg:w="16"/><text x="87.1871%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.71%)</title><rect x="86.9371%" y="389" width="0.7133%" height="15" fill="rgb(208,204,44)" fg:x="1950" fg:w="16"/><text x="87.1871%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.04%)</title><rect x="87.6059%" y="373" width="0.0446%" height="15" fill="rgb(208,93,54)" fg:x="1965" fg:w="1"/><text x="87.8559%" y="383.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.04%)</title><rect x="87.6059%" y="357" width="0.0446%" height="15" fill="rgb(242,1,31)" fg:x="1965" fg:w="1"/><text x="87.8559%" y="367.50"></text></g><g><title>rlox::interpreter::Interpreter::evaluate (253 samples, 11.28%)</title><rect x="77.0843%" y="597" width="11.2795%" height="15" fill="rgb(241,83,25)" fg:x="1729" fg:w="253"/><text x="77.3343%" y="607.50">rlox::interpreter..</text></g><g><title>rlox::interpreter::Interpreter::val_from_lit (253 samples, 11.28%)</title><rect x="77.0843%" y="581" width="11.2795%" height="15" fill="rgb(205,169,50)" fg:x="1729" fg:w="253"/><text x="77.3343%" y="591.50">rlox::interpreter..</text></g><g><title>rlox::environ::Environ::get (253 samples, 11.28%)</title><rect x="77.0843%" y="565" width="11.2795%" height="15" fill="rgb(239,186,37)" fg:x="1729" fg:w="253"/><text x="77.3343%" y="575.50">rlox::environ::En..</text></g><g><title>rlox::environ::Environ::get (253 samples, 11.28%)</title><rect x="77.0843%" y="549" width="11.2795%" height="15" fill="rgb(205,221,10)" fg:x="1729" fg:w="253"/><text x="77.3343%" y="559.50">rlox::environ::En..</text></g><g><title>&lt;rlox::interpreter::LoxValue as core::clone::Clone&gt;::clone (253 samples, 11.28%)</title><rect x="77.0843%" y="533" width="11.2795%" height="15" fill="rgb(218,196,15)" fg:x="1729" fg:w="253"/><text x="77.3343%" y="543.50">&lt;rlox::interprete..</text></g><g><title>&lt;rlox::interpreter::LoxCallable as core::clone::Clone&gt;::clone (252 samples, 11.23%)</title><rect x="77.1288%" y="517" width="11.2350%" height="15" fill="rgb(218,196,35)" fg:x="1730" fg:w="252"/><text x="77.3788%" y="527.50">&lt;rlox::interprete..</text></g><g><title>&lt;rlox::interpreter::LoxFunction as core::clone::Clone&gt;::clone (252 samples, 11.23%)</title><rect x="77.1288%" y="501" width="11.2350%" height="15" fill="rgb(233,63,24)" fg:x="1730" fg:w="252"/><text x="77.3788%" y="511.50">&lt;rlox::interprete..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (237 samples, 10.57%)</title><rect x="77.7976%" y="485" width="10.5662%" height="15" fill="rgb(225,8,4)" fg:x="1745" fg:w="237"/><text x="78.0476%" y="495.50">&lt;alloc::vec::Ve..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (237 samples, 10.57%)</title><rect x="77.7976%" y="469" width="10.5662%" height="15" fill="rgb(234,105,35)" fg:x="1745" fg:w="237"/><text x="78.0476%" y="479.50">alloc::slice::&lt;..</text></g><g><title>alloc::slice::hack::to_vec (237 samples, 10.57%)</title><rect x="77.7976%" y="453" width="10.5662%" height="15" fill="rgb(236,21,32)" fg:x="1745" fg:w="237"/><text x="78.0476%" y="463.50">alloc::slice::h..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (237 samples, 10.57%)</title><rect x="77.7976%" y="437" width="10.5662%" height="15" fill="rgb(228,109,6)" fg:x="1745" fg:w="237"/><text x="78.0476%" y="447.50">&lt;T as alloc::sl..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (16 samples, 0.71%)</title><rect x="87.6505%" y="421" width="0.7133%" height="15" fill="rgb(229,215,31)" fg:x="1966" fg:w="16"/><text x="87.9005%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.18%)</title><rect x="88.4530%" y="517" width="0.1783%" height="15" fill="rgb(221,52,54)" fg:x="1984" fg:w="4"/><text x="88.7030%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (3 samples, 0.13%)</title><rect x="88.4975%" y="501" width="0.1337%" height="15" fill="rgb(252,129,43)" fg:x="1985" fg:w="3"/><text x="88.7475%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_add (3 samples, 0.13%)</title><rect x="88.4975%" y="485" width="0.1337%" height="15" fill="rgb(248,183,27)" fg:x="1985" fg:w="3"/><text x="88.7475%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;rlox::environ::Environ&gt;&gt;&gt; (11 samples, 0.49%)</title><rect x="88.6313%" y="517" width="0.4904%" height="15" fill="rgb(250,0,22)" fg:x="1988" fg:w="11"/><text x="88.8813%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.49%)</title><rect x="88.6313%" y="501" width="0.4904%" height="15" fill="rgb(213,166,10)" fg:x="1988" fg:w="11"/><text x="88.8813%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (10 samples, 0.45%)</title><rect x="88.6759%" y="485" width="0.4458%" height="15" fill="rgb(207,163,36)" fg:x="1989" fg:w="10"/><text x="88.9259%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_sub (10 samples, 0.45%)</title><rect x="88.6759%" y="469" width="0.4458%" height="15" fill="rgb(208,122,22)" fg:x="1989" fg:w="10"/><text x="88.9259%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;rlox::parser::Stmt&gt;&gt; (3 samples, 0.13%)</title><rect x="89.1217%" y="517" width="0.1337%" height="15" fill="rgb(207,104,49)" fg:x="1999" fg:w="3"/><text x="89.3717%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.13%)</title><rect x="89.1217%" y="501" width="0.1337%" height="15" fill="rgb(248,211,50)" fg:x="1999" fg:w="3"/><text x="89.3717%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::parser::Stmt,alloc::alloc::Global&gt;&gt; (3 samples, 0.13%)</title><rect x="89.1217%" y="485" width="0.1337%" height="15" fill="rgb(217,13,45)" fg:x="1999" fg:w="3"/><text x="89.3717%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.13%)</title><rect x="89.1217%" y="469" width="0.1337%" height="15" fill="rgb(211,216,49)" fg:x="1999" fg:w="3"/><text x="89.3717%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rlox::parser::Stmt&gt;&gt; (3 samples, 0.13%)</title><rect x="89.1217%" y="453" width="0.1337%" height="15" fill="rgb(221,58,53)" fg:x="1999" fg:w="3"/><text x="89.3717%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.13%)</title><rect x="89.1217%" y="437" width="0.1337%" height="15" fill="rgb(220,112,41)" fg:x="1999" fg:w="3"/><text x="89.3717%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.13%)</title><rect x="89.1217%" y="421" width="0.1337%" height="15" fill="rgb(236,38,28)" fg:x="1999" fg:w="3"/><text x="89.3717%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.13%)</title><rect x="89.1217%" y="405" width="0.1337%" height="15" fill="rgb(227,195,22)" fg:x="1999" fg:w="3"/><text x="89.3717%" y="415.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.13%)</title><rect x="89.1217%" y="389" width="0.1337%" height="15" fill="rgb(214,55,33)" fg:x="1999" fg:w="3"/><text x="89.3717%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.13%)</title><rect x="89.1217%" y="373" width="0.1337%" height="15" fill="rgb(248,80,13)" fg:x="1999" fg:w="3"/><text x="89.3717%" y="383.50"></text></g><g><title>__GI___libc_free (3 samples, 0.13%)</title><rect x="89.1217%" y="357" width="0.1337%" height="15" fill="rgb(238,52,6)" fg:x="1999" fg:w="3"/><text x="89.3717%" y="367.50"></text></g><g><title>_int_free (3 samples, 0.13%)</title><rect x="89.1217%" y="341" width="0.1337%" height="15" fill="rgb(224,198,47)" fg:x="1999" fg:w="3"/><text x="89.3717%" y="351.50"></text></g><g><title>tcache_put (1 samples, 0.04%)</title><rect x="89.2109%" y="325" width="0.0446%" height="15" fill="rgb(233,171,20)" fg:x="2001" fg:w="1"/><text x="89.4609%" y="335.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (11 samples, 0.49%)</title><rect x="89.4338%" y="485" width="0.4904%" height="15" fill="rgb(241,30,25)" fg:x="2006" fg:w="11"/><text x="89.6838%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (10 samples, 0.45%)</title><rect x="89.4784%" y="469" width="0.4458%" height="15" fill="rgb(207,171,38)" fg:x="2007" fg:w="10"/><text x="89.7284%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_add (10 samples, 0.45%)</title><rect x="89.4784%" y="453" width="0.4458%" height="15" fill="rgb(234,70,1)" fg:x="2007" fg:w="10"/><text x="89.7284%" y="463.50"></text></g><g><title>__GI___libc_free (8 samples, 0.36%)</title><rect x="89.9242%" y="453" width="0.3567%" height="15" fill="rgb(232,178,18)" fg:x="2017" fg:w="8"/><text x="90.1742%" y="463.50"></text></g><g><title>_int_free (6 samples, 0.27%)</title><rect x="90.0134%" y="437" width="0.2675%" height="15" fill="rgb(241,78,40)" fg:x="2019" fg:w="6"/><text x="90.2634%" y="447.50"></text></g><g><title>core::mem::drop (3 samples, 0.13%)</title><rect x="90.2809%" y="437" width="0.1337%" height="15" fill="rgb(222,35,25)" fg:x="2025" fg:w="3"/><text x="90.5309%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;std::sync::mutex::Mutex&lt;rlox::environ::Environ&gt;&gt;&gt; (3 samples, 0.13%)</title><rect x="90.2809%" y="421" width="0.1337%" height="15" fill="rgb(207,92,16)" fg:x="2025" fg:w="3"/><text x="90.5309%" y="431.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.13%)</title><rect x="90.2809%" y="405" width="0.1337%" height="15" fill="rgb(216,59,51)" fg:x="2025" fg:w="3"/><text x="90.5309%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.09%)</title><rect x="90.3255%" y="389" width="0.0892%" height="15" fill="rgb(213,80,28)" fg:x="2026" fg:w="2"/><text x="90.5755%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.09%)</title><rect x="90.3255%" y="373" width="0.0892%" height="15" fill="rgb(220,93,7)" fg:x="2026" fg:w="2"/><text x="90.5755%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (12 samples, 0.53%)</title><rect x="90.2809%" y="453" width="0.5350%" height="15" fill="rgb(225,24,44)" fg:x="2025" fg:w="12"/><text x="90.5309%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;rlox::environ::Environ&gt;&gt; (9 samples, 0.40%)</title><rect x="90.4146%" y="437" width="0.4012%" height="15" fill="rgb(243,74,40)" fg:x="2028" fg:w="9"/><text x="90.6646%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;rlox::environ::Environ&gt;&gt; (9 samples, 0.40%)</title><rect x="90.4146%" y="421" width="0.4012%" height="15" fill="rgb(228,39,7)" fg:x="2028" fg:w="9"/><text x="90.6646%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::environ::Environ&gt; (9 samples, 0.40%)</title><rect x="90.4146%" y="405" width="0.4012%" height="15" fill="rgb(227,79,8)" fg:x="2028" fg:w="9"/><text x="90.6646%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;rlox::environ::Environ&gt;&gt;&gt;&gt; (9 samples, 0.40%)</title><rect x="90.4146%" y="389" width="0.4012%" height="15" fill="rgb(236,58,11)" fg:x="2028" fg:w="9"/><text x="90.6646%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;rlox::environ::Environ&gt;&gt;&gt; (9 samples, 0.40%)</title><rect x="90.4146%" y="373" width="0.4012%" height="15" fill="rgb(249,63,35)" fg:x="2028" fg:w="9"/><text x="90.6646%" y="383.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.40%)</title><rect x="90.4146%" y="357" width="0.4012%" height="15" fill="rgb(252,114,16)" fg:x="2028" fg:w="9"/><text x="90.6646%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (9 samples, 0.40%)</title><rect x="90.4146%" y="341" width="0.4012%" height="15" fill="rgb(254,151,24)" fg:x="2028" fg:w="9"/><text x="90.6646%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (9 samples, 0.40%)</title><rect x="90.4146%" y="325" width="0.4012%" height="15" fill="rgb(253,54,39)" fg:x="2028" fg:w="9"/><text x="90.6646%" y="335.50"></text></g><g><title>rlox::interpreter::Interpreter::execute (315 samples, 14.04%)</title><rect x="77.0397%" y="901" width="14.0437%" height="15" fill="rgb(243,25,45)" fg:x="1728" fg:w="315"/><text x="77.2897%" y="911.50">rlox::interpreter::In..</text></g><g><title>core::option::Option&lt;T&gt;::map (314 samples, 14.00%)</title><rect x="77.0843%" y="885" width="13.9991%" height="15" fill="rgb(234,134,9)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="895.50">core::option::Option&lt;..</text></g><g><title>rlox::interpreter::Interpreter::execute::{{closure}} (314 samples, 14.00%)</title><rect x="77.0843%" y="869" width="13.9991%" height="15" fill="rgb(227,166,31)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="879.50">rlox::interpreter::In..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (314 samples, 14.00%)</title><rect x="77.0843%" y="853" width="13.9991%" height="15" fill="rgb(245,143,41)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="863.50">rlox::interpreter::In..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (314 samples, 14.00%)</title><rect x="77.0843%" y="837" width="13.9991%" height="15" fill="rgb(238,181,32)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="847.50">rlox::interpreter::In..</text></g><g><title>rlox::interpreter::LoxCallable::call (314 samples, 14.00%)</title><rect x="77.0843%" y="821" width="13.9991%" height="15" fill="rgb(224,113,18)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="831.50">rlox::interpreter::Lo..</text></g><g><title>rlox::interpreter::Interpreter::execute_block (314 samples, 14.00%)</title><rect x="77.0843%" y="805" width="13.9991%" height="15" fill="rgb(240,229,28)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="815.50">rlox::interpreter::In..</text></g><g><title>rlox::interpreter::Interpreter::execute (314 samples, 14.00%)</title><rect x="77.0843%" y="789" width="13.9991%" height="15" fill="rgb(250,185,3)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="799.50">rlox::interpreter::In..</text></g><g><title>core::option::Option&lt;T&gt;::map (314 samples, 14.00%)</title><rect x="77.0843%" y="773" width="13.9991%" height="15" fill="rgb(212,59,25)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="783.50">core::option::Option&lt;..</text></g><g><title>rlox::interpreter::Interpreter::execute::{{closure}} (314 samples, 14.00%)</title><rect x="77.0843%" y="757" width="13.9991%" height="15" fill="rgb(221,87,20)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="767.50">rlox::interpreter::In..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (314 samples, 14.00%)</title><rect x="77.0843%" y="741" width="13.9991%" height="15" fill="rgb(213,74,28)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="751.50">rlox::interpreter::In..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (314 samples, 14.00%)</title><rect x="77.0843%" y="725" width="13.9991%" height="15" fill="rgb(224,132,34)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="735.50">rlox::interpreter::In..</text></g><g><title>rlox::interpreter::LoxCallable::call (314 samples, 14.00%)</title><rect x="77.0843%" y="709" width="13.9991%" height="15" fill="rgb(222,101,24)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="719.50">rlox::interpreter::Lo..</text></g><g><title>rlox::interpreter::Interpreter::execute_block (314 samples, 14.00%)</title><rect x="77.0843%" y="693" width="13.9991%" height="15" fill="rgb(254,142,4)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="703.50">rlox::interpreter::In..</text></g><g><title>rlox::interpreter::Interpreter::execute (314 samples, 14.00%)</title><rect x="77.0843%" y="677" width="13.9991%" height="15" fill="rgb(230,229,49)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="687.50">rlox::interpreter::In..</text></g><g><title>core::option::Option&lt;T&gt;::map (314 samples, 14.00%)</title><rect x="77.0843%" y="661" width="13.9991%" height="15" fill="rgb(238,70,47)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="671.50">core::option::Option&lt;..</text></g><g><title>rlox::interpreter::Interpreter::execute::{{closure}} (314 samples, 14.00%)</title><rect x="77.0843%" y="645" width="13.9991%" height="15" fill="rgb(231,160,17)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="655.50">rlox::interpreter::In..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (314 samples, 14.00%)</title><rect x="77.0843%" y="629" width="13.9991%" height="15" fill="rgb(218,68,53)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="639.50">rlox::interpreter::In..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (314 samples, 14.00%)</title><rect x="77.0843%" y="613" width="13.9991%" height="15" fill="rgb(236,111,10)" fg:x="1729" fg:w="314"/><text x="77.3343%" y="623.50">rlox::interpreter::In..</text></g><g><title>rlox::interpreter::LoxCallable::call (61 samples, 2.72%)</title><rect x="88.3638%" y="597" width="2.7196%" height="15" fill="rgb(224,34,41)" fg:x="1982" fg:w="61"/><text x="88.6138%" y="607.50">rl..</text></g><g><title>rlox::interpreter::Interpreter::execute_block (61 samples, 2.72%)</title><rect x="88.3638%" y="581" width="2.7196%" height="15" fill="rgb(241,118,19)" fg:x="1982" fg:w="61"/><text x="88.6138%" y="591.50">rl..</text></g><g><title>rlox::interpreter::Interpreter::execute (61 samples, 2.72%)</title><rect x="88.3638%" y="565" width="2.7196%" height="15" fill="rgb(238,129,25)" fg:x="1982" fg:w="61"/><text x="88.6138%" y="575.50">rl..</text></g><g><title>rlox::interpreter::Interpreter::execute (61 samples, 2.72%)</title><rect x="88.3638%" y="549" width="2.7196%" height="15" fill="rgb(238,22,31)" fg:x="1982" fg:w="61"/><text x="88.6138%" y="559.50">rl..</text></g><g><title>rlox::interpreter::Interpreter::execute_block (61 samples, 2.72%)</title><rect x="88.3638%" y="533" width="2.7196%" height="15" fill="rgb(222,174,48)" fg:x="1982" fg:w="61"/><text x="88.6138%" y="543.50">rl..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (41 samples, 1.83%)</title><rect x="89.2555%" y="517" width="1.8279%" height="15" fill="rgb(206,152,40)" fg:x="2002" fg:w="41"/><text x="89.5055%" y="527.50">c..</text></g><g><title>rlox::interpreter::Interpreter::execute_block::{{closure}} (38 samples, 1.69%)</title><rect x="89.3892%" y="501" width="1.6942%" height="15" fill="rgb(218,99,54)" fg:x="2005" fg:w="38"/><text x="89.6392%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;rlox::environ::Environ&gt;&gt;&gt; (26 samples, 1.16%)</title><rect x="89.9242%" y="485" width="1.1592%" height="15" fill="rgb(220,174,26)" fg:x="2017" fg:w="26"/><text x="90.1742%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 1.16%)</title><rect x="89.9242%" y="469" width="1.1592%" height="15" fill="rgb(245,116,9)" fg:x="2017" fg:w="26"/><text x="90.1742%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (6 samples, 0.27%)</title><rect x="90.8159%" y="453" width="0.2675%" height="15" fill="rgb(209,72,35)" fg:x="2037" fg:w="6"/><text x="91.0659%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (6 samples, 0.27%)</title><rect x="90.8159%" y="437" width="0.2675%" height="15" fill="rgb(226,126,21)" fg:x="2037" fg:w="6"/><text x="91.0659%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (26 samples, 1.16%)</title><rect x="91.1280%" y="581" width="1.1592%" height="15" fill="rgb(227,192,1)" fg:x="2044" fg:w="26"/><text x="91.3780%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (26 samples, 1.16%)</title><rect x="91.1280%" y="565" width="1.1592%" height="15" fill="rgb(237,180,29)" fg:x="2044" fg:w="26"/><text x="91.3780%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (26 samples, 1.16%)</title><rect x="91.1280%" y="549" width="1.1592%" height="15" fill="rgb(230,197,35)" fg:x="2044" fg:w="26"/><text x="91.3780%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (26 samples, 1.16%)</title><rect x="91.1280%" y="533" width="1.1592%" height="15" fill="rgb(246,193,31)" fg:x="2044" fg:w="26"/><text x="91.3780%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (26 samples, 1.16%)</title><rect x="91.1280%" y="517" width="1.1592%" height="15" fill="rgb(241,36,4)" fg:x="2044" fg:w="26"/><text x="91.3780%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (26 samples, 1.16%)</title><rect x="91.1280%" y="501" width="1.1592%" height="15" fill="rgb(241,130,17)" fg:x="2044" fg:w="26"/><text x="91.3780%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (26 samples, 1.16%)</title><rect x="91.1280%" y="485" width="1.1592%" height="15" fill="rgb(206,137,32)" fg:x="2044" fg:w="26"/><text x="91.3780%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (26 samples, 1.16%)</title><rect x="91.1280%" y="469" width="1.1592%" height="15" fill="rgb(237,228,51)" fg:x="2044" fg:w="26"/><text x="91.3780%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (26 samples, 1.16%)</title><rect x="91.1280%" y="453" width="1.1592%" height="15" fill="rgb(243,6,42)" fg:x="2044" fg:w="26"/><text x="91.3780%" y="463.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (26 samples, 1.16%)</title><rect x="91.1280%" y="437" width="1.1592%" height="15" fill="rgb(251,74,28)" fg:x="2044" fg:w="26"/><text x="91.3780%" y="447.50"></text></g><g><title>rlox::interpreter::Interpreter::evaluate::{{closure}} (26 samples, 1.16%)</title><rect x="91.1280%" y="421" width="1.1592%" height="15" fill="rgb(218,20,49)" fg:x="2044" fg:w="26"/><text x="91.3780%" y="431.50"></text></g><g><title>rlox::interpreter::Interpreter::evaluate (26 samples, 1.16%)</title><rect x="91.1280%" y="405" width="1.1592%" height="15" fill="rgb(238,28,14)" fg:x="2044" fg:w="26"/><text x="91.3780%" y="415.50"></text></g><g><title>__GI___libc_free (7 samples, 0.31%)</title><rect x="91.9750%" y="389" width="0.3121%" height="15" fill="rgb(229,40,46)" fg:x="2063" fg:w="7"/><text x="92.2250%" y="399.50"></text></g><g><title>_int_free (6 samples, 0.27%)</title><rect x="92.0196%" y="373" width="0.2675%" height="15" fill="rgb(244,195,20)" fg:x="2064" fg:w="6"/><text x="92.2696%" y="383.50"></text></g><g><title>tcache_put (1 samples, 0.04%)</title><rect x="92.2425%" y="357" width="0.0446%" height="15" fill="rgb(253,56,35)" fg:x="2069" fg:w="1"/><text x="92.4925%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;rlox::environ::Environ&gt;&gt; (9 samples, 0.40%)</title><rect x="92.7329%" y="549" width="0.4012%" height="15" fill="rgb(210,149,44)" fg:x="2080" fg:w="9"/><text x="92.9829%" y="559.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.40%)</title><rect x="92.7329%" y="533" width="0.4012%" height="15" fill="rgb(240,135,12)" fg:x="2080" fg:w="9"/><text x="92.9829%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (9 samples, 0.40%)</title><rect x="92.7329%" y="517" width="0.4012%" height="15" fill="rgb(251,24,50)" fg:x="2080" fg:w="9"/><text x="92.9829%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (8 samples, 0.36%)</title><rect x="92.7775%" y="501" width="0.3567%" height="15" fill="rgb(243,200,47)" fg:x="2081" fg:w="8"/><text x="93.0275%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_swap (8 samples, 0.36%)</title><rect x="92.7775%" y="485" width="0.3567%" height="15" fill="rgb(224,166,26)" fg:x="2081" fg:w="8"/><text x="93.0275%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="93.2234%" y="533" width="0.0446%" height="15" fill="rgb(233,0,47)" fg:x="2091" fg:w="1"/><text x="93.4734%" y="543.50"></text></g><g><title>__GI___libc_free (10 samples, 0.45%)</title><rect x="93.2679%" y="533" width="0.4458%" height="15" fill="rgb(253,80,5)" fg:x="2092" fg:w="10"/><text x="93.5179%" y="543.50"></text></g><g><title>_int_free (9 samples, 0.40%)</title><rect x="93.3125%" y="517" width="0.4012%" height="15" fill="rgb(214,133,25)" fg:x="2093" fg:w="9"/><text x="93.5625%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;rlox::environ::Environ&gt;&gt; (10 samples, 0.45%)</title><rect x="93.7138%" y="533" width="0.4458%" height="15" fill="rgb(209,27,14)" fg:x="2102" fg:w="10"/><text x="93.9638%" y="543.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.45%)</title><rect x="93.7138%" y="517" width="0.4458%" height="15" fill="rgb(219,102,51)" fg:x="2102" fg:w="10"/><text x="93.9638%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (10 samples, 0.45%)</title><rect x="93.7138%" y="501" width="0.4458%" height="15" fill="rgb(237,18,16)" fg:x="2102" fg:w="10"/><text x="93.9638%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (10 samples, 0.45%)</title><rect x="93.7138%" y="485" width="0.4458%" height="15" fill="rgb(241,85,17)" fg:x="2102" fg:w="10"/><text x="93.9638%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (10 samples, 0.45%)</title><rect x="93.7138%" y="469" width="0.4458%" height="15" fill="rgb(236,90,42)" fg:x="2102" fg:w="10"/><text x="93.9638%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.09%)</title><rect x="94.1596%" y="517" width="0.0892%" height="15" fill="rgb(249,57,21)" fg:x="2112" fg:w="2"/><text x="94.4096%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.09%)</title><rect x="94.1596%" y="501" width="0.0892%" height="15" fill="rgb(243,12,36)" fg:x="2112" fg:w="2"/><text x="94.4096%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.09%)</title><rect x="94.1596%" y="485" width="0.0892%" height="15" fill="rgb(253,128,47)" fg:x="2112" fg:w="2"/><text x="94.4096%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="94.1596%" y="469" width="0.0892%" height="15" fill="rgb(207,33,20)" fg:x="2112" fg:w="2"/><text x="94.4096%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.09%)</title><rect x="94.1596%" y="453" width="0.0892%" height="15" fill="rgb(233,215,35)" fg:x="2112" fg:w="2"/><text x="94.4096%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="94.3825%" y="389" width="0.0446%" height="15" fill="rgb(249,188,52)" fg:x="2117" fg:w="1"/><text x="94.6325%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.13%)</title><rect x="94.4271%" y="373" width="0.1337%" height="15" fill="rgb(225,12,32)" fg:x="2118" fg:w="3"/><text x="94.6771%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (6 samples, 0.27%)</title><rect x="94.3379%" y="437" width="0.2675%" height="15" fill="rgb(247,98,14)" fg:x="2116" fg:w="6"/><text x="94.5879%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (6 samples, 0.27%)</title><rect x="94.3379%" y="421" width="0.2675%" height="15" fill="rgb(247,219,48)" fg:x="2116" fg:w="6"/><text x="94.5879%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (6 samples, 0.27%)</title><rect x="94.3379%" y="405" width="0.2675%" height="15" fill="rgb(253,60,48)" fg:x="2116" fg:w="6"/><text x="94.5879%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.18%)</title><rect x="94.4271%" y="389" width="0.1783%" height="15" fill="rgb(245,15,52)" fg:x="2118" fg:w="4"/><text x="94.6771%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="94.5609%" y="373" width="0.0446%" height="15" fill="rgb(220,133,28)" fg:x="2121" fg:w="1"/><text x="94.8109%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.13%)</title><rect x="94.6054%" y="437" width="0.1337%" height="15" fill="rgb(217,180,4)" fg:x="2122" fg:w="3"/><text x="94.8554%" y="447.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.04%)</title><rect x="94.6946%" y="421" width="0.0446%" height="15" fill="rgb(251,24,1)" fg:x="2124" fg:w="1"/><text x="94.9446%" y="431.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.04%)</title><rect x="94.6946%" y="405" width="0.0446%" height="15" fill="rgb(212,185,49)" fg:x="2124" fg:w="1"/><text x="94.9446%" y="415.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.04%)</title><rect x="94.6946%" y="389" width="0.0446%" height="15" fill="rgb(215,175,22)" fg:x="2124" fg:w="1"/><text x="94.9446%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.58%)</title><rect x="94.7838%" y="341" width="0.5796%" height="15" fill="rgb(250,205,14)" fg:x="2126" fg:w="13"/><text x="95.0338%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (5 samples, 0.22%)</title><rect x="95.1404%" y="325" width="0.2229%" height="15" fill="rgb(225,211,22)" fg:x="2134" fg:w="5"/><text x="95.3904%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (29 samples, 1.29%)</title><rect x="94.2488%" y="469" width="1.2929%" height="15" fill="rgb(251,179,42)" fg:x="2114" fg:w="29"/><text x="94.4988%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (27 samples, 1.20%)</title><rect x="94.3379%" y="453" width="1.2037%" height="15" fill="rgb(208,216,51)" fg:x="2116" fg:w="27"/><text x="94.5879%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (18 samples, 0.80%)</title><rect x="94.7392%" y="437" width="0.8025%" height="15" fill="rgb(235,36,11)" fg:x="2125" fg:w="18"/><text x="94.9892%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (18 samples, 0.80%)</title><rect x="94.7392%" y="421" width="0.8025%" height="15" fill="rgb(213,189,28)" fg:x="2125" fg:w="18"/><text x="94.9892%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (18 samples, 0.80%)</title><rect x="94.7392%" y="405" width="0.8025%" height="15" fill="rgb(227,203,42)" fg:x="2125" fg:w="18"/><text x="94.9892%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (18 samples, 0.80%)</title><rect x="94.7392%" y="389" width="0.8025%" height="15" fill="rgb(244,72,36)" fg:x="2125" fg:w="18"/><text x="94.9892%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (18 samples, 0.80%)</title><rect x="94.7392%" y="373" width="0.8025%" height="15" fill="rgb(213,53,17)" fg:x="2125" fg:w="18"/><text x="94.9892%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (18 samples, 0.80%)</title><rect x="94.7392%" y="357" width="0.8025%" height="15" fill="rgb(207,167,3)" fg:x="2125" fg:w="18"/><text x="94.9892%" y="367.50"></text></g><g><title>core::hash::Hasher::write_u8 (4 samples, 0.18%)</title><rect x="95.3634%" y="341" width="0.1783%" height="15" fill="rgb(216,98,30)" fg:x="2139" fg:w="4"/><text x="95.6134%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.18%)</title><rect x="95.3634%" y="325" width="0.1783%" height="15" fill="rgb(236,123,15)" fg:x="2139" fg:w="4"/><text x="95.6134%" y="335.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.13%)</title><rect x="95.4079%" y="309" width="0.1337%" height="15" fill="rgb(248,81,50)" fg:x="2140" fg:w="3"/><text x="95.6579%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (4 samples, 0.18%)</title><rect x="95.5863%" y="405" width="0.1783%" height="15" fill="rgb(214,120,4)" fg:x="2144" fg:w="4"/><text x="95.8363%" y="415.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4 samples, 0.18%)</title><rect x="95.5863%" y="389" width="0.1783%" height="15" fill="rgb(208,179,34)" fg:x="2144" fg:w="4"/><text x="95.8363%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.18%)</title><rect x="95.5863%" y="373" width="0.1783%" height="15" fill="rgb(227,140,7)" fg:x="2144" fg:w="4"/><text x="95.8363%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (4 samples, 0.18%)</title><rect x="95.5863%" y="357" width="0.1783%" height="15" fill="rgb(214,22,6)" fg:x="2144" fg:w="4"/><text x="95.8363%" y="367.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (4 samples, 0.18%)</title><rect x="95.5863%" y="341" width="0.1783%" height="15" fill="rgb(207,137,27)" fg:x="2144" fg:w="4"/><text x="95.8363%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.18%)</title><rect x="95.5863%" y="325" width="0.1783%" height="15" fill="rgb(210,8,46)" fg:x="2144" fg:w="4"/><text x="95.8363%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.18%)</title><rect x="95.5863%" y="309" width="0.1783%" height="15" fill="rgb(240,16,54)" fg:x="2144" fg:w="4"/><text x="95.8363%" y="319.50"></text></g><g><title>__memcmp_evex_movbe (3 samples, 0.13%)</title><rect x="95.6309%" y="293" width="0.1337%" height="15" fill="rgb(211,209,29)" fg:x="2145" fg:w="3"/><text x="95.8809%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.04%)</title><rect x="95.7646%" y="405" width="0.0446%" height="15" fill="rgb(226,228,24)" fg:x="2148" fg:w="1"/><text x="96.0146%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="95.7646%" y="389" width="0.0446%" height="15" fill="rgb(222,84,9)" fg:x="2148" fg:w="1"/><text x="96.0146%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="95.7646%" y="373" width="0.0446%" height="15" fill="rgb(234,203,30)" fg:x="2148" fg:w="1"/><text x="96.0146%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="95.7646%" y="357" width="0.0446%" height="15" fill="rgb(238,109,14)" fg:x="2148" fg:w="1"/><text x="96.0146%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (6 samples, 0.27%)</title><rect x="95.5863%" y="421" width="0.2675%" height="15" fill="rgb(233,206,34)" fg:x="2144" fg:w="6"/><text x="95.8363%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.04%)</title><rect x="95.8092%" y="405" width="0.0446%" height="15" fill="rgb(220,167,47)" fg:x="2149" fg:w="1"/><text x="96.0592%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.04%)</title><rect x="95.8092%" y="389" width="0.0446%" height="15" fill="rgb(238,105,10)" fg:x="2149" fg:w="1"/><text x="96.0592%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="95.8092%" y="373" width="0.0446%" height="15" fill="rgb(213,227,17)" fg:x="2149" fg:w="1"/><text x="96.0592%" y="383.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (1 samples, 0.04%)</title><rect x="95.8092%" y="357" width="0.0446%" height="15" fill="rgb(217,132,38)" fg:x="2149" fg:w="1"/><text x="96.0592%" y="367.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (1 samples, 0.04%)</title><rect x="95.8092%" y="341" width="0.0446%" height="15" fill="rgb(242,146,4)" fg:x="2149" fg:w="1"/><text x="96.0592%" y="351.50"></text></g><g><title>rlox::environ::Environ::get (40 samples, 1.78%)</title><rect x="94.1596%" y="533" width="1.7833%" height="15" fill="rgb(212,61,9)" fg:x="2112" fg:w="40"/><text x="94.4096%" y="543.50">r..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (38 samples, 1.69%)</title><rect x="94.2488%" y="517" width="1.6942%" height="15" fill="rgb(247,126,22)" fg:x="2114" fg:w="38"/><text x="94.4988%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (38 samples, 1.69%)</title><rect x="94.2488%" y="501" width="1.6942%" height="15" fill="rgb(220,196,2)" fg:x="2114" fg:w="38"/><text x="94.4988%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (38 samples, 1.69%)</title><rect x="94.2488%" y="485" width="1.6942%" height="15" fill="rgb(208,46,4)" fg:x="2114" fg:w="38"/><text x="94.4988%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9 samples, 0.40%)</title><rect x="95.5417%" y="469" width="0.4012%" height="15" fill="rgb(252,104,46)" fg:x="2143" fg:w="9"/><text x="95.7917%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.40%)</title><rect x="95.5417%" y="453" width="0.4012%" height="15" fill="rgb(237,152,48)" fg:x="2143" fg:w="9"/><text x="95.7917%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (9 samples, 0.40%)</title><rect x="95.5417%" y="437" width="0.4012%" height="15" fill="rgb(221,59,37)" fg:x="2143" fg:w="9"/><text x="95.7917%" y="447.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.09%)</title><rect x="95.8538%" y="421" width="0.0892%" height="15" fill="rgb(209,202,51)" fg:x="2150" fg:w="2"/><text x="96.1038%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="96.1213%" y="405" width="0.0446%" height="15" fill="rgb(228,81,30)" fg:x="2156" fg:w="1"/><text x="96.3713%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="96.1213%" y="389" width="0.0446%" height="15" fill="rgb(227,42,39)" fg:x="2156" fg:w="1"/><text x="96.3713%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.45%)</title><rect x="96.0321%" y="453" width="0.4458%" height="15" fill="rgb(221,26,2)" fg:x="2154" fg:w="10"/><text x="96.2821%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (10 samples, 0.45%)</title><rect x="96.0321%" y="437" width="0.4458%" height="15" fill="rgb(254,61,31)" fg:x="2154" fg:w="10"/><text x="96.2821%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10 samples, 0.45%)</title><rect x="96.0321%" y="421" width="0.4458%" height="15" fill="rgb(222,173,38)" fg:x="2154" fg:w="10"/><text x="96.2821%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.31%)</title><rect x="96.1658%" y="405" width="0.3121%" height="15" fill="rgb(218,50,12)" fg:x="2157" fg:w="7"/><text x="96.4158%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.22%)</title><rect x="96.2550%" y="389" width="0.2229%" height="15" fill="rgb(223,88,40)" fg:x="2159" fg:w="5"/><text x="96.5050%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.13%)</title><rect x="96.4779%" y="453" width="0.1337%" height="15" fill="rgb(237,54,19)" fg:x="2164" fg:w="3"/><text x="96.7279%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.31%)</title><rect x="96.6117%" y="357" width="0.3121%" height="15" fill="rgb(251,129,25)" fg:x="2167" fg:w="7"/><text x="96.8617%" y="367.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.18%)</title><rect x="96.7454%" y="341" width="0.1783%" height="15" fill="rgb(238,97,19)" fg:x="2170" fg:w="4"/><text x="96.9954%" y="351.50"></text></g><g><title>core::cmp::min (2 samples, 0.09%)</title><rect x="97.0575%" y="325" width="0.0892%" height="15" fill="rgb(240,169,18)" fg:x="2177" fg:w="2"/><text x="97.3075%" y="335.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.09%)</title><rect x="97.0575%" y="309" width="0.0892%" height="15" fill="rgb(230,187,49)" fg:x="2177" fg:w="2"/><text x="97.3075%" y="319.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.09%)</title><rect x="97.0575%" y="293" width="0.0892%" height="15" fill="rgb(209,44,26)" fg:x="2177" fg:w="2"/><text x="97.3075%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (29 samples, 1.29%)</title><rect x="95.9429%" y="485" width="1.2929%" height="15" fill="rgb(244,0,6)" fg:x="2152" fg:w="29"/><text x="96.1929%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (27 samples, 1.20%)</title><rect x="96.0321%" y="469" width="1.2037%" height="15" fill="rgb(248,18,21)" fg:x="2154" fg:w="27"/><text x="96.2821%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (14 samples, 0.62%)</title><rect x="96.6117%" y="453" width="0.6242%" height="15" fill="rgb(245,180,19)" fg:x="2167" fg:w="14"/><text x="96.8617%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (14 samples, 0.62%)</title><rect x="96.6117%" y="437" width="0.6242%" height="15" fill="rgb(252,118,36)" fg:x="2167" fg:w="14"/><text x="96.8617%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (14 samples, 0.62%)</title><rect x="96.6117%" y="421" width="0.6242%" height="15" fill="rgb(210,224,19)" fg:x="2167" fg:w="14"/><text x="96.8617%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (14 samples, 0.62%)</title><rect x="96.6117%" y="405" width="0.6242%" height="15" fill="rgb(218,30,24)" fg:x="2167" fg:w="14"/><text x="96.8617%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (14 samples, 0.62%)</title><rect x="96.6117%" y="389" width="0.6242%" height="15" fill="rgb(219,75,50)" fg:x="2167" fg:w="14"/><text x="96.8617%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (14 samples, 0.62%)</title><rect x="96.6117%" y="373" width="0.6242%" height="15" fill="rgb(234,72,50)" fg:x="2167" fg:w="14"/><text x="96.8617%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u8 (7 samples, 0.31%)</title><rect x="96.9238%" y="357" width="0.3121%" height="15" fill="rgb(219,100,48)" fg:x="2174" fg:w="7"/><text x="97.1738%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.31%)</title><rect x="96.9238%" y="341" width="0.3121%" height="15" fill="rgb(253,5,41)" fg:x="2174" fg:w="7"/><text x="97.1738%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.09%)</title><rect x="97.1467%" y="325" width="0.0892%" height="15" fill="rgb(247,181,11)" fg:x="2179" fg:w="2"/><text x="97.3967%" y="335.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.13%)</title><rect x="97.3696%" y="437" width="0.1337%" height="15" fill="rgb(222,223,25)" fg:x="2184" fg:w="3"/><text x="97.6196%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (36 samples, 1.60%)</title><rect x="95.9429%" y="533" width="1.6050%" height="15" fill="rgb(214,198,28)" fg:x="2152" fg:w="36"/><text x="96.1929%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (36 samples, 1.60%)</title><rect x="95.9429%" y="517" width="1.6050%" height="15" fill="rgb(230,46,43)" fg:x="2152" fg:w="36"/><text x="96.1929%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (36 samples, 1.60%)</title><rect x="95.9429%" y="501" width="1.6050%" height="15" fill="rgb(233,65,53)" fg:x="2152" fg:w="36"/><text x="96.1929%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (7 samples, 0.31%)</title><rect x="97.2358%" y="485" width="0.3121%" height="15" fill="rgb(221,121,27)" fg:x="2181" fg:w="7"/><text x="97.4858%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 0.31%)</title><rect x="97.2358%" y="469" width="0.3121%" height="15" fill="rgb(247,70,47)" fg:x="2181" fg:w="7"/><text x="97.4858%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (7 samples, 0.31%)</title><rect x="97.2358%" y="453" width="0.3121%" height="15" fill="rgb(228,85,35)" fg:x="2181" fg:w="7"/><text x="97.4858%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.04%)</title><rect x="97.5033%" y="437" width="0.0446%" height="15" fill="rgb(209,50,18)" fg:x="2187" fg:w="1"/><text x="97.7533%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.04%)</title><rect x="97.5033%" y="421" width="0.0446%" height="15" fill="rgb(250,19,35)" fg:x="2187" fg:w="1"/><text x="97.7533%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="97.5033%" y="405" width="0.0446%" height="15" fill="rgb(253,107,29)" fg:x="2187" fg:w="1"/><text x="97.7533%" y="415.50"></text></g><g><title>rlox::environ::Environ::get (111 samples, 4.95%)</title><rect x="93.1342%" y="549" width="4.9487%" height="15" fill="rgb(252,179,29)" fg:x="2089" fg:w="111"/><text x="93.3842%" y="559.50">rlox::..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (12 samples, 0.53%)</title><rect x="97.5479%" y="533" width="0.5350%" height="15" fill="rgb(238,194,6)" fg:x="2188" fg:w="12"/><text x="97.7979%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (12 samples, 0.53%)</title><rect x="97.5479%" y="517" width="0.5350%" height="15" fill="rgb(238,164,29)" fg:x="2188" fg:w="12"/><text x="97.7979%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (12 samples, 0.53%)</title><rect x="97.5479%" y="501" width="0.5350%" height="15" fill="rgb(224,25,9)" fg:x="2188" fg:w="12"/><text x="97.7979%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.53%)</title><rect x="97.5479%" y="485" width="0.5350%" height="15" fill="rgb(244,153,23)" fg:x="2188" fg:w="12"/><text x="97.7979%" y="495.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="98.0829%" y="533" width="0.0446%" height="15" fill="rgb(212,203,14)" fg:x="2200" fg:w="1"/><text x="98.3329%" y="543.50"></text></g><g><title>std::sync::poison::Flag::guard (1 samples, 0.04%)</title><rect x="98.0829%" y="517" width="0.0446%" height="15" fill="rgb(220,164,20)" fg:x="2200" fg:w="1"/><text x="98.3329%" y="527.50"></text></g><g><title>rlox::interpreter::Interpreter::evaluate (149 samples, 6.64%)</title><rect x="92.2871%" y="581" width="6.6429%" height="15" fill="rgb(222,203,48)" fg:x="2070" fg:w="149"/><text x="92.5371%" y="591.50">rlox::int..</text></g><g><title>rlox::interpreter::Interpreter::val_from_lit (148 samples, 6.60%)</title><rect x="92.3317%" y="565" width="6.5983%" height="15" fill="rgb(215,159,22)" fg:x="2071" fg:w="148"/><text x="92.5817%" y="575.50">rlox::int..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (19 samples, 0.85%)</title><rect x="98.0829%" y="549" width="0.8471%" height="15" fill="rgb(216,183,47)" fg:x="2200" fg:w="19"/><text x="98.3329%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (18 samples, 0.80%)</title><rect x="98.1275%" y="533" width="0.8025%" height="15" fill="rgb(229,195,25)" fg:x="2201" fg:w="18"/><text x="98.3775%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (18 samples, 0.80%)</title><rect x="98.1275%" y="517" width="0.8025%" height="15" fill="rgb(224,132,51)" fg:x="2201" fg:w="18"/><text x="98.3775%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.80%)</title><rect x="98.1275%" y="501" width="0.8025%" height="15" fill="rgb(240,63,7)" fg:x="2201" fg:w="18"/><text x="98.3775%" y="511.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.18%)</title><rect x="99.1975%" y="517" width="0.1783%" height="15" fill="rgb(249,182,41)" fg:x="2225" fg:w="4"/><text x="99.4475%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (4 samples, 0.18%)</title><rect x="99.1975%" y="501" width="0.1783%" height="15" fill="rgb(243,47,26)" fg:x="2225" fg:w="4"/><text x="99.4475%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_add (4 samples, 0.18%)</title><rect x="99.1975%" y="485" width="0.1783%" height="15" fill="rgb(233,48,2)" fg:x="2225" fg:w="4"/><text x="99.4475%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="99.3758%" y="517" width="0.0446%" height="15" fill="rgb(244,165,34)" fg:x="2229" fg:w="1"/><text x="99.6258%" y="527.50"></text></g><g><title>[unknown] (1,962 samples, 87.47%)</title><rect x="12.0374%" y="917" width="87.4721%" height="15" fill="rgb(207,89,7)" fg:x="270" fg:w="1962"/><text x="12.2874%" y="927.50">[unknown]</text></g><g><title>rlox::interpreter::Interpreter::execute_block (189 samples, 8.43%)</title><rect x="91.0834%" y="901" width="8.4262%" height="15" fill="rgb(244,117,36)" fg:x="2043" fg:w="189"/><text x="91.3334%" y="911.50">rlox::interp..</text></g><g><title>rlox::interpreter::Interpreter::execute (188 samples, 8.38%)</title><rect x="91.1280%" y="885" width="8.3816%" height="15" fill="rgb(226,144,34)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="895.50">rlox::interp..</text></g><g><title>core::option::Option&lt;T&gt;::map (188 samples, 8.38%)</title><rect x="91.1280%" y="869" width="8.3816%" height="15" fill="rgb(213,23,19)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="879.50">core::option..</text></g><g><title>rlox::interpreter::Interpreter::execute::{{closure}} (188 samples, 8.38%)</title><rect x="91.1280%" y="853" width="8.3816%" height="15" fill="rgb(217,75,12)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="863.50">rlox::interp..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (188 samples, 8.38%)</title><rect x="91.1280%" y="837" width="8.3816%" height="15" fill="rgb(224,159,17)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="847.50">rlox::interp..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (188 samples, 8.38%)</title><rect x="91.1280%" y="821" width="8.3816%" height="15" fill="rgb(217,118,1)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="831.50">rlox::interp..</text></g><g><title>rlox::interpreter::LoxCallable::call (188 samples, 8.38%)</title><rect x="91.1280%" y="805" width="8.3816%" height="15" fill="rgb(232,180,48)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="815.50">rlox::interp..</text></g><g><title>rlox::interpreter::Interpreter::execute_block (188 samples, 8.38%)</title><rect x="91.1280%" y="789" width="8.3816%" height="15" fill="rgb(230,27,33)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="799.50">rlox::interp..</text></g><g><title>rlox::interpreter::Interpreter::execute (188 samples, 8.38%)</title><rect x="91.1280%" y="773" width="8.3816%" height="15" fill="rgb(205,31,21)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="783.50">rlox::interp..</text></g><g><title>core::option::Option&lt;T&gt;::map (188 samples, 8.38%)</title><rect x="91.1280%" y="757" width="8.3816%" height="15" fill="rgb(253,59,4)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="767.50">core::option..</text></g><g><title>rlox::interpreter::Interpreter::execute::{{closure}} (188 samples, 8.38%)</title><rect x="91.1280%" y="741" width="8.3816%" height="15" fill="rgb(224,201,9)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="751.50">rlox::interp..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (188 samples, 8.38%)</title><rect x="91.1280%" y="725" width="8.3816%" height="15" fill="rgb(229,206,30)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="735.50">rlox::interp..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (188 samples, 8.38%)</title><rect x="91.1280%" y="709" width="8.3816%" height="15" fill="rgb(212,67,47)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="719.50">rlox::interp..</text></g><g><title>rlox::interpreter::LoxCallable::call (188 samples, 8.38%)</title><rect x="91.1280%" y="693" width="8.3816%" height="15" fill="rgb(211,96,50)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="703.50">rlox::interp..</text></g><g><title>rlox::interpreter::Interpreter::execute_block (188 samples, 8.38%)</title><rect x="91.1280%" y="677" width="8.3816%" height="15" fill="rgb(252,114,18)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="687.50">rlox::interp..</text></g><g><title>rlox::interpreter::Interpreter::execute (188 samples, 8.38%)</title><rect x="91.1280%" y="661" width="8.3816%" height="15" fill="rgb(223,58,37)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="671.50">rlox::interp..</text></g><g><title>core::option::Option&lt;T&gt;::map (188 samples, 8.38%)</title><rect x="91.1280%" y="645" width="8.3816%" height="15" fill="rgb(237,70,4)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="655.50">core::option..</text></g><g><title>rlox::interpreter::Interpreter::execute::{{closure}} (188 samples, 8.38%)</title><rect x="91.1280%" y="629" width="8.3816%" height="15" fill="rgb(244,85,46)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="639.50">rlox::interp..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (188 samples, 8.38%)</title><rect x="91.1280%" y="613" width="8.3816%" height="15" fill="rgb(223,39,52)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="623.50">rlox::interp..</text></g><g><title>rlox::interpreter::Interpreter::evaluate (188 samples, 8.38%)</title><rect x="91.1280%" y="597" width="8.3816%" height="15" fill="rgb(218,200,14)" fg:x="2044" fg:w="188"/><text x="91.3780%" y="607.50">rlox::interp..</text></g><g><title>rlox::interpreter::LoxCallable::call (13 samples, 0.58%)</title><rect x="98.9300%" y="581" width="0.5796%" height="15" fill="rgb(208,171,16)" fg:x="2219" fg:w="13"/><text x="99.1800%" y="591.50"></text></g><g><title>rlox::interpreter::Interpreter::execute_block (13 samples, 0.58%)</title><rect x="98.9300%" y="565" width="0.5796%" height="15" fill="rgb(234,200,18)" fg:x="2219" fg:w="13"/><text x="99.1800%" y="575.50"></text></g><g><title>rlox::interpreter::Interpreter::execute (13 samples, 0.58%)</title><rect x="98.9300%" y="549" width="0.5796%" height="15" fill="rgb(228,45,11)" fg:x="2219" fg:w="13"/><text x="99.1800%" y="559.50"></text></g><g><title>rlox::interpreter::Interpreter::execute (13 samples, 0.58%)</title><rect x="98.9300%" y="533" width="0.5796%" height="15" fill="rgb(237,182,11)" fg:x="2219" fg:w="13"/><text x="99.1800%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.09%)</title><rect x="99.4204%" y="517" width="0.0892%" height="15" fill="rgb(241,175,49)" fg:x="2230" fg:w="2"/><text x="99.6704%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.09%)</title><rect x="99.4204%" y="501" width="0.0892%" height="15" fill="rgb(247,38,35)" fg:x="2230" fg:w="2"/><text x="99.6704%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.09%)</title><rect x="99.4204%" y="485" width="0.0892%" height="15" fill="rgb(228,39,49)" fg:x="2230" fg:w="2"/><text x="99.6704%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.09%)</title><rect x="99.4204%" y="469" width="0.0892%" height="15" fill="rgb(226,101,26)" fg:x="2230" fg:w="2"/><text x="99.6704%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.09%)</title><rect x="99.4204%" y="453" width="0.0892%" height="15" fill="rgb(206,141,19)" fg:x="2230" fg:w="2"/><text x="99.6704%" y="463.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.09%)</title><rect x="99.4204%" y="437" width="0.0892%" height="15" fill="rgb(211,200,13)" fg:x="2230" fg:w="2"/><text x="99.6704%" y="447.50"></text></g><g><title>__rdl_alloc (2 samples, 0.09%)</title><rect x="99.4204%" y="421" width="0.0892%" height="15" fill="rgb(241,121,6)" fg:x="2230" fg:w="2"/><text x="99.6704%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.09%)</title><rect x="99.4204%" y="405" width="0.0892%" height="15" fill="rgb(234,221,29)" fg:x="2230" fg:w="2"/><text x="99.6704%" y="415.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.09%)</title><rect x="99.4204%" y="389" width="0.0892%" height="15" fill="rgb(229,136,5)" fg:x="2230" fg:w="2"/><text x="99.6704%" y="399.50"></text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="99.4650%" y="373" width="0.0446%" height="15" fill="rgb(238,36,11)" fg:x="2231" fg:w="1"/><text x="99.7150%" y="383.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="99.5096%" y="917" width="0.0446%" height="15" fill="rgb(251,55,41)" fg:x="2232" fg:w="1"/><text x="99.7596%" y="927.50"></text></g><g><title>_int_free (3 samples, 0.13%)</title><rect x="99.5542%" y="917" width="0.1337%" height="15" fill="rgb(242,34,40)" fg:x="2233" fg:w="3"/><text x="99.8042%" y="927.50"></text></g><g><title>_start (5 samples, 0.22%)</title><rect x="99.6879%" y="917" width="0.2229%" height="15" fill="rgb(215,42,17)" fg:x="2236" fg:w="5"/><text x="99.9379%" y="927.50"></text></g><g><title>_dl_start (1 samples, 0.04%)</title><rect x="99.8663%" y="901" width="0.0446%" height="15" fill="rgb(207,44,46)" fg:x="2240" fg:w="1"/><text x="100.1163%" y="911.50"></text></g><g><title>_dl_start_final (1 samples, 0.04%)</title><rect x="99.8663%" y="885" width="0.0446%" height="15" fill="rgb(211,206,28)" fg:x="2240" fg:w="1"/><text x="100.1163%" y="895.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.04%)</title><rect x="99.8663%" y="869" width="0.0446%" height="15" fill="rgb(237,167,16)" fg:x="2240" fg:w="1"/><text x="100.1163%" y="879.50"></text></g><g><title>dl_platform_init (1 samples, 0.04%)</title><rect x="99.8663%" y="853" width="0.0446%" height="15" fill="rgb(233,66,6)" fg:x="2240" fg:w="1"/><text x="100.1163%" y="863.50"></text></g><g><title>init_cpu_features (1 samples, 0.04%)</title><rect x="99.8663%" y="837" width="0.0446%" height="15" fill="rgb(246,123,29)" fg:x="2240" fg:w="1"/><text x="100.1163%" y="847.50"></text></g><g><title>dl_init_cacheinfo (1 samples, 0.04%)</title><rect x="99.8663%" y="821" width="0.0446%" height="15" fill="rgb(209,62,40)" fg:x="2240" fg:w="1"/><text x="100.1163%" y="831.50"></text></g><g><title>handle_intel (1 samples, 0.04%)</title><rect x="99.8663%" y="805" width="0.0446%" height="15" fill="rgb(218,4,25)" fg:x="2240" fg:w="1"/><text x="100.1163%" y="815.50"></text></g><g><title>rlox::environ::Environ::define (1 samples, 0.04%)</title><rect x="99.9108%" y="917" width="0.0446%" height="15" fill="rgb(253,91,49)" fg:x="2241" fg:w="1"/><text x="100.1608%" y="927.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.04%)</title><rect x="99.9108%" y="901" width="0.0446%" height="15" fill="rgb(228,155,29)" fg:x="2241" fg:w="1"/><text x="100.1608%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.04%)</title><rect x="99.9108%" y="885" width="0.0446%" height="15" fill="rgb(243,57,37)" fg:x="2241" fg:w="1"/><text x="100.1608%" y="895.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.04%)</title><rect x="99.9108%" y="869" width="0.0446%" height="15" fill="rgb(244,167,17)" fg:x="2241" fg:w="1"/><text x="100.1608%" y="879.50"></text></g><g><title>all (2,243 samples, 100%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(207,181,38)" fg:x="0" fg:w="2243"/><text x="0.2500%" y="959.50"></text></g><g><title>rlox (2,243 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(211,8,23)" fg:x="0" fg:w="2243"/><text x="0.2500%" y="943.50">rlox</text></g><g><title>rlox::interpreter::Interpreter::execute (1 samples, 0.04%)</title><rect x="99.9554%" y="917" width="0.0446%" height="15" fill="rgb(235,11,44)" fg:x="2242" fg:w="1"/><text x="100.2054%" y="927.50"></text></g></svg></svg>